#if UBLUX_BACKEND

namespace Ublux.Communications.Models;

/// <summary>
///     All collections on database must contain this attribute.
///     Represents a Table on a traditional database. 
///     Business Logic Models that we work with inherit from this. 
///     We need to work with what is stored on our application. 
///     DTO objects is what we present to clients
/// </summary>
public partial interface IUbluxDocument : IUbluxDocumentId
{
    /// <summary>
    ///     Date when item was deleted
    /// </summary>
    [AllowUpdate(false)]
    [JsonProperty(Order = 1001)]
    [IgnoreDataMember]
    DateTime? DateDeleted { get; set; }
}

/// <summary>
///     * This are business logic objects *
///     All collections on database must contain this attribute.
///     Represents a Table on a traditional database
/// </summary>
public abstract partial class UbluxDocument : IUbluxDocument, IUbluxDocumentId
{
    /// <summary>
    ///     Set id
    /// </summary>
    [System.Text.Json.Serialization.JsonIgnore]
    [BsonIgnore]
    [JsonIgnore]
    [IgnoreDataMember]
    [AllowUpdate(false)]
    public BuiltId BuiltId
    {
        set
        {
            this.id = value.Id;
        }
    }

    /// <summary>
    ///     Deletion Date
    /// </summary>
    [JsonProperty(Order = 1001)]
    [IgnoreDataMember]
    [AllowUpdate(false)]
    [HideForCreateRequest]
    public DateTime? DateDeleted { get; set; }
    
    #region IdGlobal

    /// <summary>
    ///     Used to generate ids. Placed in here because autogenerated-code makes used of this
    /// </summary>
    private static ulong _idGlobalCounter;

    /// <summary>
    ///     Increments counter and gets current id
    /// </summary>    
    public static string IdGlobalAutoIncrement()
    {
        return ToBase62(Interlocked.Increment(ref _idGlobalCounter));
    }

    /// <summary>
    ///     Get IdGlobal current value
    /// </summary>    
    public static ulong IdGlobalCurrentValue()
    {
        return Interlocked.Read(ref _idGlobalCounter);
    }

    /// <summary>
    ///     This is not thread safe. call this method before initializing database.
    /// </summary>
    [Obsolete("Only set once. Having an incorrect counter will result in duplicate ids")]
    public static void IdGlobalSetValue(ulong v)
    {
        _idGlobalCounter = v;
    }

    #endregion

    #region Base62

    // add: `-=[];',./~!@#$%^&*()_+{}|:<>?
    // to make it base92
    private const string charsString = @"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static readonly char[] base62Chars = charsString.ToCharArray();
    static readonly ulong base62CharsLength = (ulong)base62Chars.Length;

    /// <summary>
    ///     Convert from base62 string. 0=0 1=1 Z=61 10=62
    /// </summary>
    public static ulong FromBase62(string input)
    {
        ulong r = 0;
        int ctr = 0;

        for (var i = input.Length; i > 0; i--)
        {
            // 0 = 48
            // A = 65
            // a = 97
            var currChar = input[i - 1];
            var val = (ulong)charsString.IndexOf(currChar);

            if (ctr == 0)
                r = val;
            else
            {
                ulong tmp = base62CharsLength;
                for (int k = 1; k < ctr; k++)
                    tmp *= base62CharsLength;

                r += (val * tmp);
            }

            ctr++;
        }

        return r;
    }

    /// <summary>
    /// 0 = 0
    /// ...
    /// 9 = 9
    /// 10 = a
    /// 35 = Z
    /// </summary>
    public static string ToBase62(ulong input)
    {
        Span<char> result = stackalloc char[11];
        //char[] result = new char[6];

        //List<char> result = new List<char>();
        // max of 10 iterations because ulong.maxValue to base 62 is 10 characters long
        for (int i = 10; ; i--)
        {
            ulong reminder = input % base62CharsLength;
            input /= base62CharsLength;
            result[i] = base62Chars[reminder];

            if (input == 0)
                return new string(result[i..]);
        }
    }

    #endregion
}

#endif