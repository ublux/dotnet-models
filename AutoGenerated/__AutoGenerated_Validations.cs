///* FILE AUTOGENERATED DO NOT MODIFY OR DELETE
// *
// *  Contains basic validation that checks if null values, string ranges and required properties.
//*/

//namespace Ublux.Communications.Models;

//public partial class UbluxDocument
//{
//        #region Hardcoded Static Common Functions 
    
//#pragma warning disable IDE0060 // Remove unused parameter

//    // hadcoded
//    private static int Validate_String(string? value, bool isNullable, bool isRequired, int minLength, int maxLength)
//    {
//        if (value is null)
//        {
//            // if NOT nullable and value is null return error
//            if (isNullable == false)
//                return 1;

//            if (isRequired)
//                return 2;

//            return 0;
//        }

//        if (isRequired)
//        {
//            if (string.IsNullOrEmpty(value))
//                return 2;
//        }

//        if (value.Length < minLength || value.Length > maxLength)
//        {
//            return 3;
//        }

//        return 0;
//    }
//    private static int Validate_ValueTypeRequired<T>(T value, bool isEnum)
//        where T : struct
//    {
//        // Does not make sense to validate a nullable value type because it cannot be required if null
//        // Does not make sense to validate a non required value type also
//        // So if we are here we know it must be required

//        if (isEnum)
//        {
//            return Convert.ToInt32(value) == 0 ? 2 : 0;
//        }

//        // bool
//        {
//            // this required type can be false
//            if (value is bool)
//                return 0;
//            //    return x == false ? 2 : 0;
//        }
//        // DateTime
//        {
//            if (value is DateTime x)
//                return x.Year <= 1970 ? 2 : 0;
//        }
//        // double
//        {
//            if (value is double x)
//                return x == 0 ? 2 : 0;
//        }
//        // float
//        {
//            if (value is float x)
//                return x == 0 ? 2 : 0;
//        }
//        // ulong
//        {
//            if (value is ulong x)
//                return x == 0 ? 2 : 0;
//        }
//        // long
//        {
//            if (value is long x)
//                return x == 0 ? 2 : 0;
//        }
//        // uint
//        {
//            if (value is uint x)
//                return x == 0 ? 2 : 0;
//        }
//        // int
//        {
//            if (value is int x)
//                return x == 0 ? 2 : 0;
//        }
//        // sbyte
//        {
//            if (value is sbyte x)
//                return x == 0 ? 2 : 0;
//        }
//        // byte
//        {
//            if (value is byte x)
//                return x == 0 ? 2 : 0;
//        }
//        // char
//        {
//            if (value is char x)
//                return x == 0 ? 2 : 0;
//        }
//        // DateOnly
//        {
//            if (value is DateOnly x)
//                return x == DateOnly.MinValue ? 2 : 0;
//        }

//        // missing validation for this value type
//        if (Debugger.IsAttached) Debugger.Break();
//        return -1;
//    }
//    private static int Validate_EnumType<T>(T value, Type typeOfEnum) where T : Enum
//    {
//        bool isValid = Enum.IsDefined(typeOfEnum, value);
//        if (isValid)
//            return 0;
//        return 5;
//    }
//    private static ValidationError BuildErrorMessage(int errorType, string callstack, object? value, int minLength = 0, int maxLength = 0)
//    {
//        // 1 value cannot be null
//        // 2 value is required
//        // 3 range error
//        // 4 list cannot contain null value
//        // 5 invalid enum value.

//        // remove first .
//        if (callstack != null && callstack.Length > 0 && callstack[0] == '.')
//            callstack = callstack[1..];

//        if (errorType == 1)
//            return new ValidationError() { ErrorMessage = $"{callstack} cannot be null", PropertyName = callstack, PropertyValue = value };

//        if (errorType == 2)
//            return new ValidationError() { ErrorMessage = $"{callstack} is required", PropertyName = callstack, PropertyValue = value };

//        if (errorType == 3)
//            return new ValidationError() { ErrorMessage = $"{callstack} length must be between {minLength} and {maxLength} characters", PropertyName = callstack, PropertyValue = value };

//        if (errorType == 4)
//            return new ValidationError() { ErrorMessage = $"{callstack} is null and list cannot contain null items.", PropertyName = callstack, PropertyValue = value };

//        if (errorType == 5)
//            return new ValidationError() { ErrorMessage = $"{callstack} enum has invalid value.", PropertyName = callstack, PropertyValue = value };

//        // Unknown error type
//        if (Debugger.IsAttached) Debugger.Break();
//        return new ValidationError() { ErrorMessage = $"{callstack}", PropertyName = callstack, PropertyValue = value };
//    }
//    // Objects that have already been validated to prevent cicular reference
//    private static readonly HashSet<object> ValidatedObjects = new();

//    #endregion

//    #region Validations

//    /// <summary> Validation for ApiKey </summary>
//    public IEnumerable<ValidationError> Validate(ApiKey apiKey)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ApiKey(apiKey, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Account </summary>
//    public IEnumerable<ValidationError> Validate(Account account)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Account(account, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Email </summary>
//    public IEnumerable<ValidationError> Validate(Email email)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Email(email, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for AgreementToTermsAndConditions </summary>
//    public IEnumerable<ValidationError> Validate(AgreementToTermsAndConditions agreementToTermsAndConditions)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_AgreementToTermsAndConditions(agreementToTermsAndConditions, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for AirNetworksProvince </summary>
//    public IEnumerable<ValidationError> Validate(AirNetworksProvince airNetworksProvince)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_AirNetworksProvince(airNetworksProvince, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Audio </summary>
//    public IEnumerable<ValidationError> Validate(Audio audio)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Audio(audio, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for AutoProvisionReference </summary>
//    public IEnumerable<ValidationError> Validate(AutoProvisionReference autoProvisionReference)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_AutoProvisionReference(autoProvisionReference, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for BlackListPhoneNumber </summary>
//    public IEnumerable<ValidationError> Validate(BlackListPhoneNumber blackListPhoneNumber)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_BlackListPhoneNumber(blackListPhoneNumber, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallerIdMask </summary>
//    public IEnumerable<ValidationError> Validate(CallerIdMask callerIdMask)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallerIdMask(callerIdMask, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallFlowLogic </summary>
//    public IEnumerable<ValidationError> Validate(CallFlowLogic callFlowLogic)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallFlowLogic(callFlowLogic, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallIncomingToCallFlowLogic </summary>
//    public IEnumerable<ValidationError> Validate(CallIncomingToCallFlowLogic callIncomingToCallFlowLogic)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallIncomingToCallFlowLogic(callIncomingToCallFlowLogic, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallIncomingToExtension </summary>
//    public IEnumerable<ValidationError> Validate(CallIncomingToExtension callIncomingToExtension)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallIncomingToExtension(callIncomingToExtension, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallOutgoingToExtension </summary>
//    public IEnumerable<ValidationError> Validate(CallOutgoingToExtension callOutgoingToExtension)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallOutgoingToExtension(callOutgoingToExtension, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CallOutgoingToPSTN </summary>
//    public IEnumerable<ValidationError> Validate(CallOutgoingToPSTN callOutgoingToPSTN)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CallOutgoingToPSTN(callOutgoingToPSTN, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CloudServicePbx </summary>
//    public IEnumerable<ValidationError> Validate(CloudServicePbx cloudServicePbx)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CloudServicePbx(cloudServicePbx, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CloudServiceWebApp </summary>
//    public IEnumerable<ValidationError> Validate(CloudServiceWebApp cloudServiceWebApp)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CloudServiceWebApp(cloudServiceWebApp, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CloudServiceWebHost </summary>
//    public IEnumerable<ValidationError> Validate(CloudServiceWebHost cloudServiceWebHost)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CloudServiceWebHost(cloudServiceWebHost, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Contact </summary>
//    public IEnumerable<ValidationError> Validate(Contact contact)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Contact(contact, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CustomerInfo </summary>
//    public IEnumerable<ValidationError> Validate(CustomerInfo customerInfo)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CustomerInfo(customerInfo, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for ExtensionCallFlowLogic </summary>
//    public IEnumerable<ValidationError> Validate(ExtensionCallFlowLogic extensionCallFlowLogic)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ExtensionCallFlowLogic(extensionCallFlowLogic, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for ExtensionConference </summary>
//    public IEnumerable<ValidationError> Validate(ExtensionConference extensionConference)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ExtensionConference(extensionConference, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for ExtensionDial </summary>
//    public IEnumerable<ValidationError> Validate(ExtensionDial extensionDial)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ExtensionDial(extensionDial, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for ExtensionQueue </summary>
//    public IEnumerable<ValidationError> Validate(ExtensionQueue extensionQueue)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ExtensionQueue(extensionQueue, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for ExtensionVoicemail </summary>
//    public IEnumerable<ValidationError> Validate(ExtensionVoicemail extensionVoicemail)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_ExtensionVoicemail(extensionVoicemail, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for FaxIncoming </summary>
//    public IEnumerable<ValidationError> Validate(FaxIncoming faxIncoming)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_FaxIncoming(faxIncoming, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for FaxOutgoingGroup </summary>
//    public IEnumerable<ValidationError> Validate(FaxOutgoingGroup faxOutgoingGroup)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_FaxOutgoingGroup(faxOutgoingGroup, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for User </summary>
//    public IEnumerable<ValidationError> Validate(User user)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_User(user, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for LineKeyGroup </summary>
//    public IEnumerable<ValidationError> Validate(LineKeyGroup lineKeyGroup)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_LineKeyGroup(lineKeyGroup, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for LogWebServiceRequest </summary>
//    public IEnumerable<ValidationError> Validate(LogWebServiceRequest logWebServiceRequest)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_LogWebServiceRequest(logWebServiceRequest, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for MusicOnHoldGroup </summary>
//    public IEnumerable<ValidationError> Validate(MusicOnHoldGroup musicOnHoldGroup)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_MusicOnHoldGroup(musicOnHoldGroup, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Phone </summary>
//    public IEnumerable<ValidationError> Validate(Phone phone)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Phone(phone, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for PhoneConfiguration </summary>
//    public IEnumerable<ValidationError> Validate(PhoneConfiguration phoneConfiguration)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_PhoneConfiguration(phoneConfiguration, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for PowerDialerGroup </summary>
//    public IEnumerable<ValidationError> Validate(PowerDialerGroup powerDialerGroup)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_PowerDialerGroup(powerDialerGroup, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for SMS </summary>
//    public IEnumerable<ValidationError> Validate(SMS sMS)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_SMS(sMS, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for TrunkOriginationForward </summary>
//    public IEnumerable<ValidationError> Validate(TrunkOriginationForward trunkOriginationForward)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_TrunkOriginationForward(trunkOriginationForward, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for TrunkOriginationRegister </summary>
//    public IEnumerable<ValidationError> Validate(TrunkOriginationRegister trunkOriginationRegister)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_TrunkOriginationRegister(trunkOriginationRegister, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for TrunkTermination </summary>
//    public IEnumerable<ValidationError> Validate(TrunkTermination trunkTermination)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_TrunkTermination(trunkTermination, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for TrunkTerminationGroup </summary>
//    public IEnumerable<ValidationError> Validate(TrunkTerminationGroup trunkTerminationGroup)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_TrunkTerminationGroup(trunkTerminationGroup, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Voicemail </summary>
//    public IEnumerable<ValidationError> Validate(Voicemail voicemail)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Voicemail(voicemail, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoicemailForwarded </summary>
//    public IEnumerable<ValidationError> Validate(VoicemailForwarded voicemailForwarded)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoicemailForwarded(voicemailForwarded, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoipNumberAvailableForPurchase </summary>
//    public IEnumerable<ValidationError> Validate(VoipNumberAvailableForPurchase voipNumberAvailableForPurchase)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoipNumberAvailableForPurchase(voipNumberAvailableForPurchase, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoipNumberFax </summary>
//    public IEnumerable<ValidationError> Validate(VoipNumberFax voipNumberFax)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoipNumberFax(voipNumberFax, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoipNumberPhone </summary>
//    public IEnumerable<ValidationError> Validate(VoipNumberPhone voipNumberPhone)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoipNumberPhone(voipNumberPhone, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoipProvider </summary>
//    public IEnumerable<ValidationError> Validate(VoipProvider voipProvider)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoipProvider(voipProvider, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for WebHook </summary>
//    public IEnumerable<ValidationError> Validate(WebHook webHook)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_WebHook(webHook, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for StoredFileReference </summary>
//    public IEnumerable<ValidationError> Validate(StoredFileReference storedFileReference)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_StoredFileReference(storedFileReference, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Tag </summary>
//    public IEnumerable<ValidationError> Validate(Tag tag)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Tag(tag, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for AiCallTranscription </summary>
//    public IEnumerable<ValidationError> Validate(AiCallTranscription aiCallTranscription)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_AiCallTranscription(aiCallTranscription, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for CloudService </summary>
//    public IEnumerable<ValidationError> Validate(CloudService cloudService)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_CloudService(cloudService, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Extension </summary>
//    public IEnumerable<ValidationError> Validate(Extension extension)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Extension(extension, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for Call </summary>
//    public IEnumerable<ValidationError> Validate(Call call)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_Call(call, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for TrunkOrigination </summary>
//    public IEnumerable<ValidationError> Validate(TrunkOrigination trunkOrigination)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_TrunkOrigination(trunkOrigination, new(64, 255)))
//            yield return item;
//    }
//    /// <summary> Validation for VoipNumber </summary>
//    public IEnumerable<ValidationError> Validate(VoipNumber voipNumber)
//    {
//        ValidatedObjects.Clear();
//        foreach(var item in Validate_VoipNumber(voipNumber, new(64, 255)))
//            yield return item;
//    }

//#endregion

//#region Private Validations

//    private IEnumerable<ValidationError> Validate_ApiKey(ApiKey apiKey, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(apiKey)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (apiKey.IdUser) == 
//        {
//            var err = Validate_String(value: apiKey.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: apiKey.IdUser);
//            }
//        }
//// == IList type (apiKey.UbluxRoles) ==
//{
//    if(apiKey.UbluxRoles is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(apiKey.UbluxRoles.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < apiKey.UbluxRoles.Count; i++)
//        {
//                    // == Value type (apiKey.UbluxRoles) == 
//        {
//            int err1 = Validate_EnumType<UbluxRole>(value: apiKey.UbluxRoles[i], typeOfEnum: typeof(UbluxRole));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxRoles[{i}]", value: apiKey.UbluxRoles[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxRole>(value: apiKey.UbluxRoles[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxRoles[{i}]", value: apiKey.UbluxRoles[i]);
//            }            
//        }
//        }
//    }
//}

//        // == String type (apiKey.Key) == 
//        {
//            var err = Validate_String(value: apiKey.Key, isNullable: false, isRequired: true, minLength: 0, maxLength: 300);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Key", value: apiKey.Key);
//            }
//        }
//        // == [Ignoring] Value type (apiKey.DateExpire) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == [Ignoring] Value type (apiKey.DateLastUsed) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (apiKey.Description) == 
//        {
//            var err = Validate_String(value: apiKey.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: apiKey.Description);
//            }
//        }
//// == IList type (apiKey.IdsTags) ==
//{
//    if(apiKey.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < apiKey.IdsTags.Count; i++)
//        {
//                    // == String type (apiKey.IdsTags) == 
//        {
//            var err = Validate_String(value: apiKey.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: apiKey.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (apiKey.IdAccount) == 
//        {
//            var err = Validate_String(value: apiKey.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: apiKey.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (apiKey.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (apiKey.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (apiKey.Id) == 
//        {
//            var err = Validate_String(value: apiKey.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: apiKey.Id);
//            }
//        }
//        // == Value type (apiKey.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: apiKey.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: apiKey.DateCreated);
//            }            
//        }
//        // == Value type (apiKey.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: apiKey.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: apiKey.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Account(Account account, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(account)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (account.IdGTrunkTerminationGroup) == 
//        {
//            var err = Validate_String(value: account.IdGTrunkTerminationGroup, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdGTrunkTerminationGroup", value: account.IdGTrunkTerminationGroup);
//            }
//        }
//// == IList type (account.ReserveAccountsOnPhone) ==
//{
//    if(account.ReserveAccountsOnPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ReserveAccountsOnPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < account.ReserveAccountsOnPhone.Count; i++)
//        {
//                    // == [Ignoring] Value type (account.ReserveAccountsOnPhone) because it is not required. (nothing to validate) == 
//        }
//    }
//}

//        // == Value type (account.UbluxPartner) == 
//        {
//            int err1 = Validate_EnumType<UbluxPartner>(value: account.UbluxPartner, typeOfEnum: typeof(UbluxPartner));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxPartner", value: account.UbluxPartner);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxPartner>(value: account.UbluxPartner, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxPartner", value: account.UbluxPartner);
//            }            
//        }
//// == IList type (account.IdsCloudServicePbxs) ==
//{
//    if(account.IdsCloudServicePbxs is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsCloudServicePbxs", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(account.IdsCloudServicePbxs.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsCloudServicePbxs", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < account.IdsCloudServicePbxs.Count; i++)
//        {
//                    // == String type (account.IdsCloudServicePbxs) == 
//        {
//            var err = Validate_String(value: account.IdsCloudServicePbxs[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsCloudServicePbxs[{i}]", value: account.IdsCloudServicePbxs[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = account.MailingAddress;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddress");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = account.AccountSecrets;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.AccountSecrets", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AccountSecrets");
//                        foreach(var err in Validate_AccountSecrets(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (account.CompanyName) == 
//        {
//            var err = Validate_String(value: account.CompanyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CompanyName", value: account.CompanyName);
//            }
//        }
//        // == [Ignoring] Value type (account.HasGrantedSupportAccess) because it is not required. (nothing to validate) == 
//// == IList type (account.CountriesThatCanCallLocally) ==
//{
//    if(account.CountriesThatCanCallLocally is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountriesThatCanCallLocally", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(account.CountriesThatCanCallLocally.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.CountriesThatCanCallLocally", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < account.CountriesThatCanCallLocally.Count; i++)
//        {
//                    // == Value type (account.CountriesThatCanCallLocally) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: account.CountriesThatCanCallLocally[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountriesThatCanCallLocally[{i}]", value: account.CountriesThatCanCallLocally[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: account.CountriesThatCanCallLocally[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountriesThatCanCallLocally[{i}]", value: account.CountriesThatCanCallLocally[i]);
//            }            
//        }
//        }
//    }
//}

//// == IList type (account.CountriesThatCanCallInternationally) ==
//{
//    if(account.CountriesThatCanCallInternationally is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountriesThatCanCallInternationally", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < account.CountriesThatCanCallInternationally.Count; i++)
//        {
//                    // == Value type (account.CountriesThatCanCallInternationally) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: account.CountriesThatCanCallInternationally[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountriesThatCanCallInternationally[{i}]", value: account.CountriesThatCanCallInternationally[i]);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        }
//    }
//}

//        // == Value type (account.Industry) == 
//        {
//            int err1 = Validate_EnumType<Industry>(value: account.Industry, typeOfEnum: typeof(Industry));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Industry", value: account.Industry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == [Ignoring] Value type (account.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (account.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (account.Id) == 
//        {
//            var err = Validate_String(value: account.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: account.Id);
//            }
//        }
//        // == Value type (account.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: account.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: account.DateCreated);
//            }            
//        }
//        // == Value type (account.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: account.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: account.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_MailingAddress(MailingAddress mailingAddress, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(mailingAddress)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (mailingAddress.RecipientName) == 
//        {
//            var err = Validate_String(value: mailingAddress.RecipientName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RecipientName", value: mailingAddress.RecipientName);
//            }
//        }
//        // == String type (mailingAddress.BusinessName) == 
//        {
//            var err = Validate_String(value: mailingAddress.BusinessName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.BusinessName", value: mailingAddress.BusinessName);
//            }
//        }
//        // == String type (mailingAddress.StreetAddress) == 
//        {
//            var err = Validate_String(value: mailingAddress.StreetAddress, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.StreetAddress", value: mailingAddress.StreetAddress);
//            }
//        }
//        // == String type (mailingAddress.ApparmentOrSuiteNumber) == 
//        {
//            var err = Validate_String(value: mailingAddress.ApparmentOrSuiteNumber, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ApparmentOrSuiteNumber", value: mailingAddress.ApparmentOrSuiteNumber);
//            }
//        }
//        // == String type (mailingAddress.City) == 
//        {
//            var err = Validate_String(value: mailingAddress.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: mailingAddress.City);
//            }
//        }
//        // == String type (mailingAddress.State) == 
//        {
//            var err = Validate_String(value: mailingAddress.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: mailingAddress.State);
//            }
//        }
//        // == String type (mailingAddress.ZipCode) == 
//        {
//            var err = Validate_String(value: mailingAddress.ZipCode, isNullable: false, isRequired: true, minLength: 0, maxLength: 15);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ZipCode", value: mailingAddress.ZipCode);
//            }
//        }
//        // == Value type (mailingAddress.Country) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: mailingAddress.Country, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Country", value: mailingAddress.Country);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AccountSecrets(AccountSecrets accountSecrets, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(accountSecrets)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (accountSecrets.PinPhone) == 
//        {
//            var err = Validate_String(value: accountSecrets.PinPhone, isNullable: false, isRequired: true, minLength: 5, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PinPhone", value: accountSecrets.PinPhone);
//            }
//        }
//        // == String type (accountSecrets.PinSpy) == 
//        {
//            var err = Validate_String(value: accountSecrets.PinSpy, isNullable: false, isRequired: true, minLength: 9, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PinSpy", value: accountSecrets.PinSpy);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Email(Email email, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(email)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (email.Address) == 
//        {
//            var err = Validate_String(value: email.Address, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Address", value: email.Address);
//            }
//        }
//        // == [Ignoring] Value type (email.DateVerified) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//                // == Validate object ==
//                {
//                    var tmp = email.SessionWhenVerified;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SessionWhenVerified");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (email.IpAddress) == 
//        {
//            var err = Validate_String(value: email.IpAddress, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpAddress", value: email.IpAddress);
//            }
//        }
//// == IList type (email.IdsTags) ==
//{
//    if(email.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < email.IdsTags.Count; i++)
//        {
//                    // == String type (email.IdsTags) == 
//        {
//            var err = Validate_String(value: email.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: email.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (email.IdAccount) == 
//        {
//            var err = Validate_String(value: email.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: email.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (email.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (email.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (email.Id) == 
//        {
//            var err = Validate_String(value: email.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: email.Id);
//            }
//        }
//        // == Value type (email.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: email.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: email.DateCreated);
//            }            
//        }
//        // == Value type (email.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: email.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: email.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_UbluxSession(UbluxSession ubluxSession, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(ubluxSession)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (ubluxSession.IdUser) == 
//        {
//            var err = Validate_String(value: ubluxSession.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: ubluxSession.IdUser);
//            }
//        }
//        // == Value type (ubluxSession.UserType) == 
//        {
//            int err1 = Validate_EnumType<UserType>(value: ubluxSession.UserType, typeOfEnum: typeof(UserType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UserType", value: ubluxSession.UserType);
//            }
//            int err3 = Validate_ValueTypeRequired<UserType>(value: ubluxSession.UserType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UserType", value: ubluxSession.UserType);
//            }            
//        }
//        // == String type (ubluxSession.IdAccount) == 
//        {
//            var err = Validate_String(value: ubluxSession.IdAccount, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: ubluxSession.IdAccount);
//            }
//        }
//// == IList type (ubluxSession.UbluxRoles) ==
//{
//    if(ubluxSession.UbluxRoles is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(ubluxSession.UbluxRoles.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < ubluxSession.UbluxRoles.Count; i++)
//        {
//                    // == Value type (ubluxSession.UbluxRoles) == 
//        {
//            int err1 = Validate_EnumType<UbluxRole>(value: ubluxSession.UbluxRoles[i], typeOfEnum: typeof(UbluxRole));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxRoles[{i}]", value: ubluxSession.UbluxRoles[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxRole>(value: ubluxSession.UbluxRoles[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxRoles[{i}]", value: ubluxSession.UbluxRoles[i]);
//            }            
//        }
//        }
//    }
//}

//        // == Value type (ubluxSession.ExpirationDate) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: ubluxSession.ExpirationDate, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExpirationDate", value: ubluxSession.ExpirationDate);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AgreementToTermsAndConditions(AgreementToTermsAndConditions agreementToTermsAndConditions, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(agreementToTermsAndConditions)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//                // == Validate object ==
//                {
//                    var tmp = agreementToTermsAndConditions.UbluxSession;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxSession", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"UbluxSession");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (agreementToTermsAndConditions.Ip) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: agreementToTermsAndConditions.Ip);
//            }
//        }
//        // == String type (agreementToTermsAndConditions.HttpRequestHeaders) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.HttpRequestHeaders, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.HttpRequestHeaders", value: agreementToTermsAndConditions.HttpRequestHeaders);
//            }
//        }
//        // == Value type (agreementToTermsAndConditions.TermsAndConditionsCategory) == 
//        {
//            int err1 = Validate_EnumType<TermsAndConditionsCategory>(value: agreementToTermsAndConditions.TermsAndConditionsCategory, typeOfEnum: typeof(TermsAndConditionsCategory));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TermsAndConditionsCategory", value: agreementToTermsAndConditions.TermsAndConditionsCategory);
//            }
//            int err3 = Validate_ValueTypeRequired<TermsAndConditionsCategory>(value: agreementToTermsAndConditions.TermsAndConditionsCategory, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TermsAndConditionsCategory", value: agreementToTermsAndConditions.TermsAndConditionsCategory);
//            }            
//        }
//        // == [Ignoring] Value type (agreementToTermsAndConditions.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (agreementToTermsAndConditions.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (agreementToTermsAndConditions.Id) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: agreementToTermsAndConditions.Id);
//            }
//        }
//        // == Value type (agreementToTermsAndConditions.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: agreementToTermsAndConditions.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: agreementToTermsAndConditions.DateCreated);
//            }            
//        }
//        // == Value type (agreementToTermsAndConditions.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: agreementToTermsAndConditions.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: agreementToTermsAndConditions.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AirNetworksProvince(AirNetworksProvince airNetworksProvince, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(airNetworksProvince)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (airNetworksProvince.Name) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Name, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: airNetworksProvince.Name);
//            }
//        }
//// == IList type (airNetworksProvince.Populations) ==
//{
//    if(airNetworksProvince.Populations is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Populations", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(airNetworksProvince.Populations.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.Populations", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < airNetworksProvince.Populations.Count; i++)
//        {
//                    // == String type (airNetworksProvince.Populations) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Populations[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Populations[{i}]", value: airNetworksProvince.Populations[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (airNetworksProvince.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (airNetworksProvince.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (airNetworksProvince.Id) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: airNetworksProvince.Id);
//            }
//        }
//        // == Value type (airNetworksProvince.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: airNetworksProvince.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: airNetworksProvince.DateCreated);
//            }            
//        }
//        // == Value type (airNetworksProvince.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: airNetworksProvince.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: airNetworksProvince.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Audio(Audio audio, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(audio)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//                // == Validate object ==
//                {
//                    var tmp = audio.AudioSln;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.AudioSln", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioSln");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = audio.AudioMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = audio.AudioWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (audio.FriendlyName) == 
//        {
//            var err = Validate_String(value: audio.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: audio.FriendlyName);
//            }
//        }
//        // == Value type (audio.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: audio.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: audio.DurationInSeconds);
//            }            
//        }
//        // == String type (audio.Description) == 
//        {
//            var err = Validate_String(value: audio.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: audio.Description);
//            }
//        }
//// == IList type (audio.IdsTags) ==
//{
//    if(audio.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < audio.IdsTags.Count; i++)
//        {
//                    // == String type (audio.IdsTags) == 
//        {
//            var err = Validate_String(value: audio.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: audio.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (audio.IdAccount) == 
//        {
//            var err = Validate_String(value: audio.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: audio.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (audio.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (audio.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (audio.Id) == 
//        {
//            var err = Validate_String(value: audio.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: audio.Id);
//            }
//        }
//        // == Value type (audio.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: audio.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: audio.DateCreated);
//            }            
//        }
//        // == Value type (audio.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: audio.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: audio.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_UbluxSubDocument(UbluxSubDocument ubluxSubDocument, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(ubluxSubDocument)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (ubluxSubDocument is FaxOutgoing faxOutgoing)
//{
//            // == String type (faxOutgoing.IdFaxOutgoingGroup) == 
//        {
//            var err = Validate_String(value: faxOutgoing.IdFaxOutgoingGroup, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdFaxOutgoingGroup", value: faxOutgoing.IdFaxOutgoingGroup);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = faxOutgoing.EmailAttachment;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.EmailAttachment", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EmailAttachment");
//                        foreach(var err in Validate_EmailAttachment(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (faxOutgoing.IsComplete) because it is not required. (nothing to validate) == 
//        // == Value type (faxOutgoing.NumberOfPages) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: faxOutgoing.NumberOfPages, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumberOfPages", value: faxOutgoing.NumberOfPages);
//            }            
//        }
//        // == String type (faxOutgoing.FaxStatus) == 
//        {
//            var err = Validate_String(value: faxOutgoing.FaxStatus, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FaxStatus", value: faxOutgoing.FaxStatus);
//            }
//        }
//        // == String type (faxOutgoing.To) == 
//        {
//            var err = Validate_String(value: faxOutgoing.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: faxOutgoing.To);
//            }
//        }
//        // == String type (faxOutgoing.ErrorMessage) == 
//        {
//            var err = Validate_String(value: faxOutgoing.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: faxOutgoing.ErrorMessage);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = faxOutgoing.Pdf;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Pdf", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Pdf");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (faxOutgoing.NumberOfPagesSent) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (faxOutgoing.IsPortrait) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (faxOutgoing.Name) == 
//        {
//            var err = Validate_String(value: faxOutgoing.Name, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: faxOutgoing.Name);
//            }
//        }
//        // == Value type (faxOutgoing.NumberOfAttempts) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: faxOutgoing.NumberOfAttempts, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumberOfAttempts", value: faxOutgoing.NumberOfAttempts);
//            }            
//        }
//        // == [Ignoring] Value type (faxOutgoing.BuiltId) because it is not required. (nothing to validate) == 
//        // == String type (faxOutgoing.Id) == 
//        {
//            var err = Validate_String(value: faxOutgoing.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: faxOutgoing.Id);
//            }
//        }

//}
//else if (ubluxSubDocument is Line line)
//{
//            // == String type (line.FriendlyName) == 
//        {
//            var err = Validate_String(value: line.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: line.FriendlyName);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = line.LineConnectionStatus;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineConnectionStatus");
//                        foreach(var err in Validate_LineConnectionStatus(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (line.CallerIdNumber) == 
//        {
//            var err = Validate_String(value: line.CallerIdNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallerIdNumber", value: line.CallerIdNumber);
//            }
//        }
//        // == [Ignoring] Value type (line.RecordExternalCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (line.RecordInternalCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (line.UseAiForExternalCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (line.UseAiForOutgoingCallsToExtensions) because it is not required. (nothing to validate) == 
//        // == Value type (line.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: line.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: line.Language);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == [Ignoring] Value type (line.BuiltId) because it is not required. (nothing to validate) == 
//        // == String type (line.Id) == 
//        {
//            var err = Validate_String(value: line.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: line.Id);
//            }
//        }

//}
//else if (ubluxSubDocument is Recording recording)
//{
//            // == String type (recording.ErrorMessage) == 
//        {
//            var err = Validate_String(value: recording.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: recording.ErrorMessage);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = recording.RecordingClientMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RecordingClientMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = recording.RecordingAgentMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RecordingAgentMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = recording.RecordingMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RecordingMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (recording.RecordingDurationInSeconds) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (recording.BuiltId) because it is not required. (nothing to validate) == 
//        // == String type (recording.Id) == 
//        {
//            var err = Validate_String(value: recording.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: recording.Id);
//            }
//        }

//}
//else if (ubluxSubDocument is StoredFile storedFile)
//{
//            // == String type (storedFile.IdAccount) == 
//        {
//            var err = Validate_String(value: storedFile.IdAccount, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: storedFile.IdAccount);
//            }
//        }
//        // == Value type (storedFile.FolderName) == 
//        {
//            int err1 = Validate_EnumType<StorageFolderName>(value: storedFile.FolderName, typeOfEnum: typeof(StorageFolderName));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FolderName", value: storedFile.FolderName);
//            }
//            int err3 = Validate_ValueTypeRequired<StorageFolderName>(value: storedFile.FolderName, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FolderName", value: storedFile.FolderName);
//            }            
//        }
//        // == String type (storedFile.InstanceId) == 
//        {
//            var err = Validate_String(value: storedFile.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: storedFile.InstanceId);
//            }
//        }
//        // == Value type (storedFile.FileSizeInBytes) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: storedFile.FileSizeInBytes, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FileSizeInBytes", value: storedFile.FileSizeInBytes);
//            }            
//        }
//        // == String type (storedFile.Md5Hash) == 
//        {
//            var err = Validate_String(value: storedFile.Md5Hash, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Md5Hash", value: storedFile.Md5Hash);
//            }
//        }
//        // == [Ignoring] Value type (storedFile.BuiltId) because it is not required. (nothing to validate) == 
//        // == String type (storedFile.Id) == 
//        {
//            var err = Validate_String(value: storedFile.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: storedFile.Id);
//            }
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_EmailAttachment(EmailAttachment emailAttachment, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(emailAttachment)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (emailAttachment.Id) == 
//        {
//            var err = Validate_String(value: emailAttachment.Id, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: emailAttachment.Id);
//            }
//        }
//        // == String type (emailAttachment.IdFaxEmailInfo) == 
//        {
//            var err = Validate_String(value: emailAttachment.IdFaxEmailInfo, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdFaxEmailInfo", value: emailAttachment.IdFaxEmailInfo);
//            }
//        }
//        // == String type (emailAttachment.Name) == 
//        {
//            var err = Validate_String(value: emailAttachment.Name, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: emailAttachment.Name);
//            }
//        }
//        // == String type (emailAttachment.FilePath) == 
//        {
//            var err = Validate_String(value: emailAttachment.FilePath, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FilePath", value: emailAttachment.FilePath);
//            }
//        }
//        // == String type (emailAttachment.MimeType) == 
//        {
//            var err = Validate_String(value: emailAttachment.MimeType, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.MimeType", value: emailAttachment.MimeType);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_LineConnectionStatus(LineConnectionStatus lineConnectionStatus, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(lineConnectionStatus)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (lineConnectionStatus.IpWAN) == 
//        {
//            var err = Validate_String(value: lineConnectionStatus.IpWAN, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpWAN", value: lineConnectionStatus.IpWAN);
//            }
//        }
//        // == [Ignoring] Value type (lineConnectionStatus.PortWAN) because it is not required. (nothing to validate) == 
//        // == String type (lineConnectionStatus.IpLAN) == 
//        {
//            var err = Validate_String(value: lineConnectionStatus.IpLAN, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpLAN", value: lineConnectionStatus.IpLAN);
//            }
//        }
//        // == [Ignoring] Value type (lineConnectionStatus.PortLAN) because it is not required. (nothing to validate) == 
//        // == String type (lineConnectionStatus.UserAgent) == 
//        {
//            var err = Validate_String(value: lineConnectionStatus.UserAgent, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: lineConnectionStatus.UserAgent);
//            }
//        }
//        // == [Ignoring] Value type (lineConnectionStatus.IsConnected) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (lineConnectionStatus.DisconnectedReason) == 
//        {
//            var err = Validate_String(value: lineConnectionStatus.DisconnectedReason, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DisconnectedReason", value: lineConnectionStatus.DisconnectedReason);
//            }
//        }
//        // == [Ignoring] Value type (lineConnectionStatus.DateConnected) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == [Ignoring] Value type (lineConnectionStatus.DateDisconnected) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AutoProvisionReference(AutoProvisionReference autoProvisionReference, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(autoProvisionReference)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (autoProvisionReference.IdPhone) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.IdPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdPhone", value: autoProvisionReference.IdPhone);
//            }
//        }
//        // == String type (autoProvisionReference.Ip) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: autoProvisionReference.Ip);
//            }
//        }
//        // == String type (autoProvisionReference.UserAgent) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.UserAgent, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: autoProvisionReference.UserAgent);
//            }
//        }
//        // == String type (autoProvisionReference.Password) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Password, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: autoProvisionReference.Password);
//            }
//        }
//        // == String type (autoProvisionReference.AdminPassword) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.AdminPassword, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.AdminPassword", value: autoProvisionReference.AdminPassword);
//            }
//        }
//        // == String type (autoProvisionReference.IdUserThatAllowedAutoprovision) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.IdUserThatAllowedAutoprovision, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUserThatAllowedAutoprovision", value: autoProvisionReference.IdUserThatAllowedAutoprovision);
//            }
//        }
//        // == [Ignoring] Value type (autoProvisionReference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (autoProvisionReference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (autoProvisionReference.Id) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: autoProvisionReference.Id);
//            }
//        }
//        // == Value type (autoProvisionReference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: autoProvisionReference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: autoProvisionReference.DateCreated);
//            }            
//        }
//        // == Value type (autoProvisionReference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: autoProvisionReference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: autoProvisionReference.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_BlackListPhoneNumber(BlackListPhoneNumber blackListPhoneNumber, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(blackListPhoneNumber)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (blackListPhoneNumber.SearchIndex) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.SearchIndex, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.SearchIndex", value: blackListPhoneNumber.SearchIndex);
//            }
//        }
//        // == String type (blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudioToPlayIfCallIsBlocked", value: blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked);
//            }
//        }
//        // == String type (blackListPhoneNumber.Number) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: blackListPhoneNumber.Number);
//            }
//        }
//        // == String type (blackListPhoneNumber.FriendlyName) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: blackListPhoneNumber.FriendlyName);
//            }
//        }
//// == IList type (blackListPhoneNumber.IdsTags) ==
//{
//    if(blackListPhoneNumber.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < blackListPhoneNumber.IdsTags.Count; i++)
//        {
//                    // == String type (blackListPhoneNumber.IdsTags) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: blackListPhoneNumber.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (blackListPhoneNumber.IdAccount) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: blackListPhoneNumber.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (blackListPhoneNumber.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (blackListPhoneNumber.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (blackListPhoneNumber.Id) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: blackListPhoneNumber.Id);
//            }
//        }
//        // == Value type (blackListPhoneNumber.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: blackListPhoneNumber.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: blackListPhoneNumber.DateCreated);
//            }            
//        }
//        // == Value type (blackListPhoneNumber.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: blackListPhoneNumber.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: blackListPhoneNumber.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallerIdMask(CallerIdMask callerIdMask, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callerIdMask)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callerIdMask.RandomVerificationCode) == 
//        {
//            var err = Validate_String(value: callerIdMask.RandomVerificationCode, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RandomVerificationCode", value: callerIdMask.RandomVerificationCode);
//            }
//        }
//        // == String type (callerIdMask.PhoneNumber) == 
//        {
//            var err = Validate_String(value: callerIdMask.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: callerIdMask.PhoneNumber);
//            }
//        }
//        // == String type (callerIdMask.FriendlyName) == 
//        {
//            var err = Validate_String(value: callerIdMask.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: callerIdMask.FriendlyName);
//            }
//        }
//// == IList type (callerIdMask.IdsTags) ==
//{
//    if(callerIdMask.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callerIdMask.IdsTags.Count; i++)
//        {
//                    // == String type (callerIdMask.IdsTags) == 
//        {
//            var err = Validate_String(value: callerIdMask.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callerIdMask.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callerIdMask.IdAccount) == 
//        {
//            var err = Validate_String(value: callerIdMask.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callerIdMask.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callerIdMask.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callerIdMask.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callerIdMask.Id) == 
//        {
//            var err = Validate_String(value: callerIdMask.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callerIdMask.Id);
//            }
//        }
//        // == Value type (callerIdMask.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callerIdMask.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callerIdMask.DateCreated);
//            }            
//        }
//        // == Value type (callerIdMask.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callerIdMask.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callerIdMask.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallFlowLogic(CallFlowLogic callFlowLogic, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callFlowLogic)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callFlowLogic.FriendlyName) == 
//        {
//            var err = Validate_String(value: callFlowLogic.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: callFlowLogic.FriendlyName);
//            }
//        }
//        // == String type (callFlowLogic.Description) == 
//        {
//            var err = Validate_String(value: callFlowLogic.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: callFlowLogic.Description);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callFlowLogic.Tree;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Tree", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Tree");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callFlowLogic.IdsTags) ==
//{
//    if(callFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (callFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: callFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: callFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: callFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callFlowLogic.Id);
//            }
//        }
//        // == Value type (callFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (callFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callFlowLogic.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_FlowNode(FlowNode flowNode, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(flowNode)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (flowNode is NodeAnyTime nodeAnyTime)
//{
//            // == Value type (nodeAnyTime.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeAnyTime.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeAnyTime.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeAnyTime.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeAPI nodeAPI)
//{
//            // == Value type (nodeAPI.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeAPI.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeAPI.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeAPI.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeLineOffline nodeLineOffline)
//{
//            // == Value type (nodeLineOffline.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeLineOffline.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeLineOffline.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeLineOffline.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeLineOnline nodeLineOnline)
//{
//            // == Value type (nodeLineOnline.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeLineOnline.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeLineOnline.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeLineOnline.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeIfLineOffline nodeIfLineOffline)
//{
//            // == Value type (nodeIfLineOffline.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeIfLineOffline.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeIfLineOffline.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (nodeIfLineOffline.Children) ==
//{
//    if(nodeIfLineOffline.Children is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < nodeIfLineOffline.Children.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = nodeIfLineOffline.Children[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Children[{i}]");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}


//}
//else if (flowNode is NodeIfTime nodeIfTime)
//{
//            // == Value type (nodeIfTime.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeIfTime.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeIfTime.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (nodeIfTime.Children) ==
//{
//    if(nodeIfTime.Children is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < nodeIfTime.Children.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = nodeIfTime.Children[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Children[{i}]");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}


//}
//else if (flowNode is NodeAnyDigits nodeAnyDigits)
//{
//            // == Value type (nodeAnyDigits.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeAnyDigits.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeAnyDigits.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeAnyDigits.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeIfDigits nodeIfDigits)
//{
//            // == Value type (nodeIfDigits.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeIfDigits.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeIfDigits.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (nodeIfDigits.Children) ==
//{
//    if(nodeIfDigits.Children is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < nodeIfDigits.Children.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = nodeIfDigits.Children[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Children[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Children[{i}]");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}


//}
//else if (flowNode is NodeTime nodeTime)
//{
//            // == String type (nodeTime.StartTime) == 
//        {
//            var err = Validate_String(value: nodeTime.StartTime, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.StartTime", value: nodeTime.StartTime);
//            }
//        }
//        // == String type (nodeTime.EndTime) == 
//        {
//            var err = Validate_String(value: nodeTime.EndTime, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.EndTime", value: nodeTime.EndTime);
//            }
//        }
//        // == Value type (nodeTime.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeTime.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeTime.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeTime.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeCallBackAPI nodeCallBackAPI)
//{
//            // == Value type (nodeCallBackAPI.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeCallBackAPI.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeCallBackAPI.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeCallBackAPI.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeSay nodeSay)
//{
//            // == String type (nodeSay.Voice) == 
//        {
//            var err = Validate_String(value: nodeSay.Voice, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Voice", value: nodeSay.Voice);
//            }
//        }
//        // == String type (nodeSay.Text) == 
//        {
//            var err = Validate_String(value: nodeSay.Text, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Text", value: nodeSay.Text);
//            }
//        }
//        // == [Ignoring] Value type (nodeSay.CollectDigits) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (nodeSay.MaxNumberOfDigits) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (nodeSay.Timeout) because it is not required. (nothing to validate) == 
//        // == Value type (nodeSay.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeSay.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeSay.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeSay.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodePause nodePause)
//{
//            // == [Ignoring] Value type (nodePause.Seconds) because it is not required. (nothing to validate) == 
//        // == Value type (nodePause.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodePause.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodePause.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodePause.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeGoTo nodeGoTo)
//{
//            // == String type (nodeGoTo.Bookmark) == 
//        {
//            var err = Validate_String(value: nodeGoTo.Bookmark, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Bookmark", value: nodeGoTo.Bookmark);
//            }
//        }
//        // == Value type (nodeGoTo.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeGoTo.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeGoTo.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeGoTo.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeExtension nodeExtension)
//{
//            // == String type (nodeExtension.IdExtensionOrNumber) == 
//        {
//            var err = Validate_String(value: nodeExtension.IdExtensionOrNumber, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtensionOrNumber", value: nodeExtension.IdExtensionOrNumber);
//            }
//        }
//        // == Value type (nodeExtension.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeExtension.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeExtension.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeExtension.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeDynamicExtension nodeDynamicExtension)
//{
//            // == String type (nodeDynamicExtension.IdExtensionDefault) == 
//        {
//            var err = Validate_String(value: nodeDynamicExtension.IdExtensionDefault, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtensionDefault", value: nodeDynamicExtension.IdExtensionDefault);
//            }
//        }
//// == IList type (nodeDynamicExtension.IdsExtensionsToExclude) ==
//{
//    if(nodeDynamicExtension.IdsExtensionsToExclude is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsExtensionsToExclude", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < nodeDynamicExtension.IdsExtensionsToExclude.Count; i++)
//        {
//                    // == String type (nodeDynamicExtension.IdsExtensionsToExclude) == 
//        {
//            var err = Validate_String(value: nodeDynamicExtension.IdsExtensionsToExclude[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsExtensionsToExclude[{i}]", value: nodeDynamicExtension.IdsExtensionsToExclude[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (nodeDynamicExtension.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeDynamicExtension.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeDynamicExtension.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeDynamicExtension.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeDigits nodeDigits)
//{
//            // == String type (nodeDigits.IsDigits) == 
//        {
//            var err = Validate_String(value: nodeDigits.IsDigits, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IsDigits", value: nodeDigits.IsDigits);
//            }
//        }
//        // == String type (nodeDigits.IsGreaterThanDigits) == 
//        {
//            var err = Validate_String(value: nodeDigits.IsGreaterThanDigits, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IsGreaterThanDigits", value: nodeDigits.IsGreaterThanDigits);
//            }
//        }
//        // == String type (nodeDigits.IsLessThanDigits) == 
//        {
//            var err = Validate_String(value: nodeDigits.IsLessThanDigits, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IsLessThanDigits", value: nodeDigits.IsLessThanDigits);
//            }
//        }
//        // == Value type (nodeDigits.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeDigits.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeDigits.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeDigits.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeComment nodeComment)
//{
//            // == String type (nodeComment.Comment) == 
//        {
//            var err = Validate_String(value: nodeComment.Comment, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Comment", value: nodeComment.Comment);
//            }
//        }
//        // == Value type (nodeComment.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeComment.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeComment.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeComment.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeCall nodeCall)
//{
//            // == String type (nodeCall.PhoneNumber) == 
//        {
//            var err = Validate_String(value: nodeCall.PhoneNumber, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: nodeCall.PhoneNumber);
//            }
//        }
//        // == Value type (nodeCall.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeCall.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeCall.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeCall.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeBookmark nodeBookmark)
//{
//            // == String type (nodeBookmark.Name) == 
//        {
//            var err = Validate_String(value: nodeBookmark.Name, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: nodeBookmark.Name);
//            }
//        }
//        // == Value type (nodeBookmark.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeBookmark.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeBookmark.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeBookmark.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodePlay nodePlay)
//{
//            // == String type (nodePlay.IdAudio) == 
//        {
//            var err = Validate_String(value: nodePlay.IdAudio, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudio", value: nodePlay.IdAudio);
//            }
//        }
//        // == [Ignoring] Value type (nodePlay.CollectDigits) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (nodePlay.MaxNumberOfDigits) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (nodePlay.Timeout) because it is not required. (nothing to validate) == 
//        // == Value type (nodePlay.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodePlay.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodePlay.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodePlay.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else if (flowNode is NodeHangup nodeHangup)
//{
//            // == Value type (nodeHangup.FlowNodeType) == 
//        {
//            int err1 = Validate_EnumType<FlowNodeType>(value: nodeHangup.FlowNodeType, typeOfEnum: typeof(FlowNodeType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FlowNodeType", value: nodeHangup.FlowNodeType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = nodeHangup.Child;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Child");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }


//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallIncomingToCallFlowLogic(CallIncomingToCallFlowLogic callIncomingToCallFlowLogic, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callIncomingToCallFlowLogic)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callIncomingToCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: callIncomingToCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToCallFlowLogic.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToCallFlowLogic.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToCallFlowLogic.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToCallFlowLogic.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToCallFlowLogic.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToCallFlowLogic.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToCallFlowLogic.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToCallFlowLogic.ChannelsTo) ==
//{
//    if(callIncomingToCallFlowLogic.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToCallFlowLogic.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToCallFlowLogic.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToCallFlowLogic.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToCallFlowLogic.IdContact);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToCallFlowLogic.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToCallFlowLogic.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.ChildCalls) ==
//{
//    if(callIncomingToCallFlowLogic.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToCallFlowLogic.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.From) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToCallFlowLogic.From);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToCallFlowLogic.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToCallFlowLogic.To) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToCallFlowLogic.To);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToCallFlowLogic.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.DigitsSent) ==
//{
//    if(callIncomingToCallFlowLogic.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToCallFlowLogic.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToCallFlowLogic.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToCallFlowLogic.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToCallFlowLogic.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.IdsParticipantLines) ==
//{
//    if(callIncomingToCallFlowLogic.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToCallFlowLogic.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToCallFlowLogic.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToCallFlowLogic.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToCallFlowLogic.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToCallFlowLogic.IdsTags) ==
//{
//    if(callIncomingToCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToCallFlowLogic.Id);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToCallFlowLogic.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ChannelVariables(ChannelVariables channelVariables, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(channelVariables)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (channelVariables.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: channelVariables.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: channelVariables.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: channelVariables.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: channelVariables.Language);
//            }            
//        }
//        // == String type (channelVariables.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: channelVariables.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: channelVariables.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (channelVariables.CallerIdName) == 
//        {
//            var err = Validate_String(value: channelVariables.CallerIdName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallerIdName", value: channelVariables.CallerIdName);
//            }
//        }
//        // == String type (channelVariables.CallerIdNumber) == 
//        {
//            var err = Validate_String(value: channelVariables.CallerIdNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallerIdNumber", value: channelVariables.CallerIdNumber);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ChildCall(ChildCall childCall, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(childCall)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (childCall is ChildCallAttendantTransferToExtension childCallAttendantTransferToExtension)
//{
//            // == String type (childCallAttendantTransferToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: childCallAttendantTransferToExtension.IdExtension);
//            }
//        }
//        // == Value type (childCallAttendantTransferToExtension.ChildCallType) == 
//        {
//            int err1 = Validate_EnumType<ChildCallType>(value: childCallAttendantTransferToExtension.ChildCallType, typeOfEnum: typeof(ChildCallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ChildCallType", value: childCallAttendantTransferToExtension.ChildCallType);
//            }
//            int err3 = Validate_ValueTypeRequired<ChildCallType>(value: childCallAttendantTransferToExtension.ChildCallType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ChildCallType", value: childCallAttendantTransferToExtension.ChildCallType);
//            }            
//        }
//        // == String type (childCallAttendantTransferToExtension.IdCallAttendantTransfer) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.IdCallAttendantTransfer, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallAttendantTransfer", value: childCallAttendantTransferToExtension.IdCallAttendantTransfer);
//            }
//        }
//        // == String type (childCallAttendantTransferToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.ChannelFrom, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: childCallAttendantTransferToExtension.ChannelFrom);
//            }
//        }
//// == IList type (childCallAttendantTransferToExtension.ChannelsTo) ==
//{
//    if(childCallAttendantTransferToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallAttendantTransferToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (childCallAttendantTransferToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: childCallAttendantTransferToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallAttendantTransferToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: childCallAttendantTransferToExtension.ChannelToAnswer);
//            }
//        }
//        // == [Ignoring] Value type (childCallAttendantTransferToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallAttendantTransferToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: childCallAttendantTransferToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (childCallAttendantTransferToExtension.DateCreated) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (childCallAttendantTransferToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallAttendantTransferToExtension.From) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: childCallAttendantTransferToExtension.From);
//            }
//        }
//        // == Value type (childCallAttendantTransferToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallAttendantTransferToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: childCallAttendantTransferToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallAttendantTransferToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: childCallAttendantTransferToExtension.FromCountry);
//            }            
//        }
//        // == String type (childCallAttendantTransferToExtension.To) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: childCallAttendantTransferToExtension.To);
//            }
//        }
//        // == Value type (childCallAttendantTransferToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallAttendantTransferToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: childCallAttendantTransferToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallAttendantTransferToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: childCallAttendantTransferToExtension.ToCountry);
//            }            
//        }
//        // == Value type (childCallAttendantTransferToExtension.IsInternational) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: childCallAttendantTransferToExtension.IsInternational, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsInternational", value: childCallAttendantTransferToExtension.IsInternational);
//            }            
//        }

//}
//else if (childCall is ChildCallAttendantTransferToPSTN childCallAttendantTransferToPSTN)
//{
//            // == String type (childCallAttendantTransferToPSTN.PhoneNumber) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: childCallAttendantTransferToPSTN.PhoneNumber);
//            }
//        }
//        // == Value type (childCallAttendantTransferToPSTN.ChildCallType) == 
//        {
//            int err1 = Validate_EnumType<ChildCallType>(value: childCallAttendantTransferToPSTN.ChildCallType, typeOfEnum: typeof(ChildCallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ChildCallType", value: childCallAttendantTransferToPSTN.ChildCallType);
//            }
//            int err3 = Validate_ValueTypeRequired<ChildCallType>(value: childCallAttendantTransferToPSTN.ChildCallType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ChildCallType", value: childCallAttendantTransferToPSTN.ChildCallType);
//            }            
//        }
//        // == String type (childCallAttendantTransferToPSTN.IdCallAttendantTransfer) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.IdCallAttendantTransfer, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallAttendantTransfer", value: childCallAttendantTransferToPSTN.IdCallAttendantTransfer);
//            }
//        }
//        // == String type (childCallAttendantTransferToPSTN.IdContact) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: childCallAttendantTransferToPSTN.IdContact);
//            }
//        }
//        // == String type (childCallAttendantTransferToPSTN.ContactFullName) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: childCallAttendantTransferToPSTN.ContactFullName);
//            }
//        }
//        // == String type (childCallAttendantTransferToPSTN.ChannelFrom) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.ChannelFrom, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: childCallAttendantTransferToPSTN.ChannelFrom);
//            }
//        }
//// == IList type (childCallAttendantTransferToPSTN.ChannelsTo) ==
//{
//    if(childCallAttendantTransferToPSTN.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallAttendantTransferToPSTN.ChannelsTo.Count; i++)
//        {
//                    // == String type (childCallAttendantTransferToPSTN.ChannelsTo) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: childCallAttendantTransferToPSTN.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallAttendantTransferToPSTN.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: childCallAttendantTransferToPSTN.ChannelToAnswer);
//            }
//        }
//        // == [Ignoring] Value type (childCallAttendantTransferToPSTN.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallAttendantTransferToPSTN.DialStatus) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: childCallAttendantTransferToPSTN.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (childCallAttendantTransferToPSTN.DateCreated) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (childCallAttendantTransferToPSTN.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallAttendantTransferToPSTN.From) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: childCallAttendantTransferToPSTN.From);
//            }
//        }
//        // == Value type (childCallAttendantTransferToPSTN.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallAttendantTransferToPSTN.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: childCallAttendantTransferToPSTN.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallAttendantTransferToPSTN.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: childCallAttendantTransferToPSTN.FromCountry);
//            }            
//        }
//        // == String type (childCallAttendantTransferToPSTN.To) == 
//        {
//            var err = Validate_String(value: childCallAttendantTransferToPSTN.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: childCallAttendantTransferToPSTN.To);
//            }
//        }
//        // == Value type (childCallAttendantTransferToPSTN.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallAttendantTransferToPSTN.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: childCallAttendantTransferToPSTN.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallAttendantTransferToPSTN.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: childCallAttendantTransferToPSTN.ToCountry);
//            }            
//        }
//        // == Value type (childCallAttendantTransferToPSTN.IsInternational) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: childCallAttendantTransferToPSTN.IsInternational, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsInternational", value: childCallAttendantTransferToPSTN.IsInternational);
//            }            
//        }

//}
//else if (childCall is ChildCallBlindTransferToExtension childCallBlindTransferToExtension)
//{
//            // == String type (childCallBlindTransferToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: childCallBlindTransferToExtension.IdExtension);
//            }
//        }
//        // == Value type (childCallBlindTransferToExtension.ChildCallType) == 
//        {
//            int err1 = Validate_EnumType<ChildCallType>(value: childCallBlindTransferToExtension.ChildCallType, typeOfEnum: typeof(ChildCallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ChildCallType", value: childCallBlindTransferToExtension.ChildCallType);
//            }
//            int err3 = Validate_ValueTypeRequired<ChildCallType>(value: childCallBlindTransferToExtension.ChildCallType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ChildCallType", value: childCallBlindTransferToExtension.ChildCallType);
//            }            
//        }
//        // == String type (childCallBlindTransferToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: childCallBlindTransferToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (childCallBlindTransferToExtension.IdsLinesThatRing) ==
//{
//    if(childCallBlindTransferToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallBlindTransferToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (childCallBlindTransferToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: childCallBlindTransferToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (childCallBlindTransferToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(childCallBlindTransferToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallBlindTransferToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (childCallBlindTransferToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: childCallBlindTransferToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallBlindTransferToExtension.IdCall) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.IdCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCall", value: childCallBlindTransferToExtension.IdCall);
//            }
//        }
//        // == String type (childCallBlindTransferToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.ChannelFrom, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: childCallBlindTransferToExtension.ChannelFrom);
//            }
//        }
//// == IList type (childCallBlindTransferToExtension.ChannelsTo) ==
//{
//    if(childCallBlindTransferToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallBlindTransferToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (childCallBlindTransferToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: childCallBlindTransferToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallBlindTransferToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: childCallBlindTransferToExtension.ChannelToAnswer);
//            }
//        }
//        // == [Ignoring] Value type (childCallBlindTransferToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallBlindTransferToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: childCallBlindTransferToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (childCallBlindTransferToExtension.DateCreated) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (childCallBlindTransferToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallBlindTransferToExtension.From) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: childCallBlindTransferToExtension.From);
//            }
//        }
//        // == Value type (childCallBlindTransferToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallBlindTransferToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: childCallBlindTransferToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallBlindTransferToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: childCallBlindTransferToExtension.FromCountry);
//            }            
//        }
//        // == String type (childCallBlindTransferToExtension.To) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: childCallBlindTransferToExtension.To);
//            }
//        }
//        // == Value type (childCallBlindTransferToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallBlindTransferToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: childCallBlindTransferToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallBlindTransferToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: childCallBlindTransferToExtension.ToCountry);
//            }            
//        }
//        // == Value type (childCallBlindTransferToExtension.IsInternational) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: childCallBlindTransferToExtension.IsInternational, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsInternational", value: childCallBlindTransferToExtension.IsInternational);
//            }            
//        }

//}
//else if (childCall is ChildCallBlindTransferToPSTN childCallBlindTransferToPSTN)
//{
//            // == String type (childCallBlindTransferToPSTN.PhoneNumber) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.PhoneNumber, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: childCallBlindTransferToPSTN.PhoneNumber);
//            }
//        }
//        // == String type (childCallBlindTransferToPSTN.IdTrunkTermination) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.IdTrunkTermination, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkTermination", value: childCallBlindTransferToPSTN.IdTrunkTermination);
//            }
//        }
//        // == Value type (childCallBlindTransferToPSTN.ChildCallType) == 
//        {
//            int err1 = Validate_EnumType<ChildCallType>(value: childCallBlindTransferToPSTN.ChildCallType, typeOfEnum: typeof(ChildCallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ChildCallType", value: childCallBlindTransferToPSTN.ChildCallType);
//            }
//            int err3 = Validate_ValueTypeRequired<ChildCallType>(value: childCallBlindTransferToPSTN.ChildCallType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ChildCallType", value: childCallBlindTransferToPSTN.ChildCallType);
//            }            
//        }
//        // == String type (childCallBlindTransferToPSTN.IdContact) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: childCallBlindTransferToPSTN.IdContact);
//            }
//        }
//        // == String type (childCallBlindTransferToPSTN.ContactFullName) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: childCallBlindTransferToPSTN.ContactFullName);
//            }
//        }
//        // == String type (childCallBlindTransferToPSTN.IdCall) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.IdCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCall", value: childCallBlindTransferToPSTN.IdCall);
//            }
//        }
//        // == String type (childCallBlindTransferToPSTN.ChannelFrom) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.ChannelFrom, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: childCallBlindTransferToPSTN.ChannelFrom);
//            }
//        }
//// == IList type (childCallBlindTransferToPSTN.ChannelsTo) ==
//{
//    if(childCallBlindTransferToPSTN.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallBlindTransferToPSTN.ChannelsTo.Count; i++)
//        {
//                    // == String type (childCallBlindTransferToPSTN.ChannelsTo) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: childCallBlindTransferToPSTN.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallBlindTransferToPSTN.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: childCallBlindTransferToPSTN.ChannelToAnswer);
//            }
//        }
//        // == [Ignoring] Value type (childCallBlindTransferToPSTN.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallBlindTransferToPSTN.DialStatus) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: childCallBlindTransferToPSTN.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (childCallBlindTransferToPSTN.DateCreated) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (childCallBlindTransferToPSTN.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallBlindTransferToPSTN.From) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: childCallBlindTransferToPSTN.From);
//            }
//        }
//        // == Value type (childCallBlindTransferToPSTN.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallBlindTransferToPSTN.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: childCallBlindTransferToPSTN.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallBlindTransferToPSTN.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: childCallBlindTransferToPSTN.FromCountry);
//            }            
//        }
//        // == String type (childCallBlindTransferToPSTN.To) == 
//        {
//            var err = Validate_String(value: childCallBlindTransferToPSTN.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: childCallBlindTransferToPSTN.To);
//            }
//        }
//        // == Value type (childCallBlindTransferToPSTN.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallBlindTransferToPSTN.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: childCallBlindTransferToPSTN.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallBlindTransferToPSTN.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: childCallBlindTransferToPSTN.ToCountry);
//            }            
//        }
//        // == Value type (childCallBlindTransferToPSTN.IsInternational) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: childCallBlindTransferToPSTN.IsInternational, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsInternational", value: childCallBlindTransferToPSTN.IsInternational);
//            }            
//        }

//}
//else if (childCall is ChildCallForwardToExtension childCallForwardToExtension)
//{
//            // == String type (childCallForwardToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: childCallForwardToExtension.IdExtension);
//            }
//        }
//        // == String type (childCallForwardToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: childCallForwardToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (childCallForwardToExtension.IdsLinesThatRing) ==
//{
//    if(childCallForwardToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallForwardToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (childCallForwardToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: childCallForwardToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (childCallForwardToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(childCallForwardToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallForwardToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (childCallForwardToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: childCallForwardToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (childCallForwardToExtension.ChildCallType) == 
//        {
//            int err1 = Validate_EnumType<ChildCallType>(value: childCallForwardToExtension.ChildCallType, typeOfEnum: typeof(ChildCallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ChildCallType", value: childCallForwardToExtension.ChildCallType);
//            }
//            int err3 = Validate_ValueTypeRequired<ChildCallType>(value: childCallForwardToExtension.ChildCallType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ChildCallType", value: childCallForwardToExtension.ChildCallType);
//            }            
//        }
//        // == String type (childCallForwardToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.ChannelFrom, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: childCallForwardToExtension.ChannelFrom);
//            }
//        }
//// == IList type (childCallForwardToExtension.ChannelsTo) ==
//{
//    if(childCallForwardToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < childCallForwardToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (childCallForwardToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: childCallForwardToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (childCallForwardToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: childCallForwardToExtension.ChannelToAnswer);
//            }
//        }
//        // == [Ignoring] Value type (childCallForwardToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallForwardToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: childCallForwardToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (childCallForwardToExtension.DateCreated) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (childCallForwardToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (childCallForwardToExtension.From) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: childCallForwardToExtension.From);
//            }
//        }
//        // == Value type (childCallForwardToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallForwardToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: childCallForwardToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallForwardToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: childCallForwardToExtension.FromCountry);
//            }            
//        }
//        // == String type (childCallForwardToExtension.To) == 
//        {
//            var err = Validate_String(value: childCallForwardToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: childCallForwardToExtension.To);
//            }
//        }
//        // == Value type (childCallForwardToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: childCallForwardToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: childCallForwardToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: childCallForwardToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: childCallForwardToExtension.ToCountry);
//            }            
//        }
//        // == Value type (childCallForwardToExtension.IsInternational) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: childCallForwardToExtension.IsInternational, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsInternational", value: childCallForwardToExtension.IsInternational);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TimeWhenCallPlacedOnHold(TimeWhenCallPlacedOnHold timeWhenCallPlacedOnHold, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(timeWhenCallPlacedOnHold)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (timeWhenCallPlacedOnHold.SecondsElapsedWhenPlacedOnHold) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: timeWhenCallPlacedOnHold.SecondsElapsedWhenPlacedOnHold, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.SecondsElapsedWhenPlacedOnHold", value: timeWhenCallPlacedOnHold.SecondsElapsedWhenPlacedOnHold);
//            }            
//        }
//        // == [Ignoring] Value type (timeWhenCallPlacedOnHold.SecondsElapsedWhenRemovedFromHold) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiAnalysis(AiAnalysis aiAnalysis, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiAnalysis)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//                // == Validate object ==
//                {
//                    var tmp = aiAnalysis.Sentiment;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Sentiment");
//                        foreach(var err in Validate_AiSentiment(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (aiAnalysis.Entities) ==
//{
//    if(aiAnalysis.Entities is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Entities", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiAnalysis.Entities.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = aiAnalysis.Entities[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Entities[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Entities[{i}]");
//                        foreach(var err in Validate_AiEntity(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (aiAnalysis.Topics) ==
//{
//    if(aiAnalysis.Topics is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Topics", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiAnalysis.Topics.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = aiAnalysis.Topics[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Topics[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Topics[{i}]");
//                        foreach(var err in Validate_AiTopic(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (aiAnalysis.ClientIntention) == 
//        {
//            var err = Validate_String(value: aiAnalysis.ClientIntention, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ClientIntention", value: aiAnalysis.ClientIntention);
//            }
//        }
//        // == String type (aiAnalysis.AgentIntention) == 
//        {
//            var err = Validate_String(value: aiAnalysis.AgentIntention, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.AgentIntention", value: aiAnalysis.AgentIntention);
//            }
//        }
//        // == String type (aiAnalysis.Summary) == 
//        {
//            var err = Validate_String(value: aiAnalysis.Summary, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Summary", value: aiAnalysis.Summary);
//            }
//        }
//        // == String type (aiAnalysis.Problem) == 
//        {
//            var err = Validate_String(value: aiAnalysis.Problem, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Problem", value: aiAnalysis.Problem);
//            }
//        }
//        // == [Ignoring] Value type (aiAnalysis.ClientPolite) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiAnalysis.AgentPolite) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiAnalysis.ClientSatisfaction) because it is not required. (nothing to validate) == 
//        // == String type (aiAnalysis.Language) == 
//        {
//            var err = Validate_String(value: aiAnalysis.Language, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Language", value: aiAnalysis.Language);
//            }
//        }
//        // == String type (aiAnalysis.Model) == 
//        {
//            var err = Validate_String(value: aiAnalysis.Model, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Model", value: aiAnalysis.Model);
//            }
//        }
//        // == String type (aiAnalysis.ActionAgentShouldTakeNext) == 
//        {
//            var err = Validate_String(value: aiAnalysis.ActionAgentShouldTakeNext, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ActionAgentShouldTakeNext", value: aiAnalysis.ActionAgentShouldTakeNext);
//            }
//        }
//        // == [Ignoring] Value type (aiAnalysis.ClientInterestInProduct) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiSentiment(AiSentiment aiSentiment, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiSentiment)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == [Ignoring] Value type (aiSentiment.Positive) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiSentiment.Negative) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiSentiment.Neutral) because it is not required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiEntity(AiEntity aiEntity, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiEntity)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (aiEntity.EntityType) == 
//        {
//            var err = Validate_String(value: aiEntity.EntityType, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.EntityType", value: aiEntity.EntityType);
//            }
//        }
//        // == String type (aiEntity.EntityName) == 
//        {
//            var err = Validate_String(value: aiEntity.EntityName, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.EntityName", value: aiEntity.EntityName);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiTopic(AiTopic aiTopic, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiTopic)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (aiTopic.Name) == 
//        {
//            var err = Validate_String(value: aiTopic.Name, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: aiTopic.Name);
//            }
//        }
//        // == [Ignoring] Value type (aiTopic.Weight) because it is not required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallIncomingToExtension(CallIncomingToExtension callIncomingToExtension, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callIncomingToExtension)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callIncomingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callIncomingToExtension.IdExtension);
//            }
//        }
//        // == String type (callIncomingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callIncomingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callIncomingToExtension.IdsLinesThatRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callIncomingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callIncomingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callIncomingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callIncomingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToExtension.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToExtension.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToExtension.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToExtension.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToExtension.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToExtension.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToExtension.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToExtension.ChannelsTo) ==
//{
//    if(callIncomingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToExtension.IdContact);
//            }
//        }
//        // == String type (callIncomingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.ChildCalls) ==
//{
//    if(callIncomingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.From) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToExtension.From);
//            }
//        }
//        // == String type (callIncomingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToExtension.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToExtension.To) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToExtension.To);
//            }
//        }
//        // == String type (callIncomingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToExtension.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.DigitsSent) ==
//{
//    if(callIncomingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.IdsParticipantLines) ==
//{
//    if(callIncomingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToExtension.IdsTags) ==
//{
//    if(callIncomingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToExtension.Id);
//            }
//        }
//        // == Value type (callIncomingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToExtension.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallOutgoingToExtension(CallOutgoingToExtension callOutgoingToExtension, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callOutgoingToExtension)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callOutgoingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callOutgoingToExtension.IdExtension);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callOutgoingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callOutgoingToExtension.IdsLinesThatRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callOutgoingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callOutgoingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callOutgoingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callOutgoingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToExtension.ToCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToExtension.FromCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToExtension.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToExtension.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToExtension.ChannelsTo) ==
//{
//    if(callOutgoingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToExtension.IdContact);
//            }
//        }
//        // == String type (callOutgoingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.ChildCalls) ==
//{
//    if(callOutgoingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToExtension.From);
//            }
//        }
//        // == String type (callOutgoingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToExtension.FromReversed);
//            }
//        }
//        // == String type (callOutgoingToExtension.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToExtension.To);
//            }
//        }
//        // == String type (callOutgoingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToExtension.ToReversed);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.DigitsSent) ==
//{
//    if(callOutgoingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.IdsParticipantLines) ==
//{
//    if(callOutgoingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToExtension.IdsTags) ==
//{
//    if(callOutgoingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToExtension.Id);
//            }
//        }
//        // == Value type (callOutgoingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToExtension.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CallOutgoingToPSTN(CallOutgoingToPSTN callOutgoingToPSTN, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(callOutgoingToPSTN)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (callOutgoingToPSTN.IdTrunkTermination) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdTrunkTermination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkTermination", value: callOutgoingToPSTN.IdTrunkTermination);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToPSTN.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToPSTN.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToPSTN.ToInternationalFormat) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToInternationalFormat", value: callOutgoingToPSTN.ToInternationalFormat);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToPSTN.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToPSTN.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToPSTN.ChannelsTo) ==
//{
//    if(callOutgoingToPSTN.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToPSTN.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToPSTN.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToPSTN.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToPSTN.IdContact);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToPSTN.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToPSTN.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.ChildCalls) ==
//{
//    if(callOutgoingToPSTN.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToPSTN.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToPSTN.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToPSTN.From);
//            }
//        }
//        // == String type (callOutgoingToPSTN.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToPSTN.FromReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }            
//        }
//        // == String type (callOutgoingToPSTN.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToPSTN.To);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToPSTN.ToReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToPSTN.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.DigitsSent) ==
//{
//    if(callOutgoingToPSTN.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToPSTN.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToPSTN.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToPSTN.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToPSTN.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.IdsParticipantLines) ==
//{
//    if(callOutgoingToPSTN.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToPSTN.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToPSTN.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToPSTN.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToPSTN.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToPSTN.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToPSTN.IdsTags) ==
//{
//    if(callOutgoingToPSTN.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToPSTN.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToPSTN.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToPSTN.Id);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToPSTN.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToPSTN.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToPSTN.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CloudServicePbx(CloudServicePbx cloudServicePbx, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(cloudServicePbx)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (cloudServicePbx.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdCloudServicePbxFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: cloudServicePbx.IdCloudServicePbxFailover);
//            }
//        }
//        // == Value type (cloudServicePbx.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServicePbx.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServicePbx.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.DisableMonitoring) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.HttpListenPort) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServicePbx.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServicePbx.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServicePbx.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServicePbx.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }            
//        }
//        // == String type (cloudServicePbx.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServicePbx.IdUser);
//            }
//        }
//        // == Value type (cloudServicePbx.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServicePbx.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServicePbx.Localnet);
//            }
//        }
//        // == String type (cloudServicePbx.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServicePbx.ExternalIp);
//            }
//        }
//        // == Value type (cloudServicePbx.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServicePbx.IsFailover);
//            }            
//        }
//        // == Value type (cloudServicePbx.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServicePbx.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServicePbx.InstanceId);
//            }
//        }
//        // == Value type (cloudServicePbx.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServicePbx.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServicePbx.Id) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServicePbx.Id);
//            }
//        }
//        // == Value type (cloudServicePbx.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServicePbx.DateCreated);
//            }            
//        }
//        // == Value type (cloudServicePbx.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServicePbx.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CloudServiceWebApp(CloudServiceWebApp cloudServiceWebApp, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(cloudServiceWebApp)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (cloudServiceWebApp.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdCloudServiceWebAppFailover) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdCloudServiceWebAppFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServiceWebAppFailover", value: cloudServiceWebApp.IdCloudServiceWebAppFailover);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebApp.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebApp.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebApp.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebApp.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebApp.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebApp.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebApp.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebApp.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebApp.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebApp.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebApp.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebApp.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebApp.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebApp.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebApp.Id);
//            }
//        }
//        // == Value type (cloudServiceWebApp.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebApp.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebApp.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CloudServiceWebHost(CloudServiceWebHost cloudServiceWebHost, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(cloudServiceWebHost)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (cloudServiceWebHost.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebHost.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebHost.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebHost.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebHost.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebHost.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebHost.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebHost.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebHost.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebHost.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebHost.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebHost.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebHost.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebHost.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebHost.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebHost.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebHost.Id);
//            }
//        }
//        // == Value type (cloudServiceWebHost.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebHost.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebHost.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Contact(Contact contact, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(contact)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (contact.IdUserOwner) == 
//        {
//            var err = Validate_String(value: contact.IdUserOwner, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUserOwner", value: contact.IdUserOwner);
//            }
//        }
//// == IList type (contact.ContactNumbers) ==
//{
//    if(contact.ContactNumbers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactNumbers", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.ContactNumbers.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.ContactNumbers[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactNumbers[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ContactNumbers[{i}]");
//                        foreach(var err in Validate_ContactNumber(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.ContactEmails) ==
//{
//    if(contact.ContactEmails is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactEmails", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.ContactEmails.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.ContactEmails[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactEmails[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ContactEmails[{i}]");
//                        foreach(var err in Validate_ContactEmail(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.MailingAddresses) ==
//{
//    if(contact.MailingAddresses is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddresses", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.MailingAddresses.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.MailingAddresses[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddresses[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddresses[{i}]");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (contact.FirstName) == 
//        {
//            var err = Validate_String(value: contact.FirstName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FirstName", value: contact.FirstName);
//            }
//        }
//        // == String type (contact.LastName) == 
//        {
//            var err = Validate_String(value: contact.LastName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.LastName", value: contact.LastName);
//            }
//        }
//        // == String type (contact.JobTitle) == 
//        {
//            var err = Validate_String(value: contact.JobTitle, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.JobTitle", value: contact.JobTitle);
//            }
//        }
//        // == String type (contact.Company) == 
//        {
//            var err = Validate_String(value: contact.Company, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Company", value: contact.Company);
//            }
//        }
//        // == String type (contact.Notes) == 
//        {
//            var err = Validate_String(value: contact.Notes, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Notes", value: contact.Notes);
//            }
//        }
//// == IList type (contact.Variables) ==
//{
//    if(contact.Variables is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Variables", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.Variables.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.Variables[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Variables[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Variables[{i}]");
//                        foreach(var err in Validate_Variable(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.IdsTags) ==
//{
//    if(contact.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.IdsTags.Count; i++)
//        {
//                    // == String type (contact.IdsTags) == 
//        {
//            var err = Validate_String(value: contact.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: contact.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (contact.IdAccount) == 
//        {
//            var err = Validate_String(value: contact.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: contact.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (contact.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (contact.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (contact.Id) == 
//        {
//            var err = Validate_String(value: contact.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: contact.Id);
//            }
//        }
//        // == Value type (contact.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: contact.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: contact.DateCreated);
//            }            
//        }
//        // == Value type (contact.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: contact.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: contact.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ContactNumber(ContactNumber contactNumber, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(contactNumber)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (contactNumber.SearchIndex) == 
//        {
//            var err = Validate_String(value: contactNumber.SearchIndex, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.SearchIndex", value: contactNumber.SearchIndex);
//            }
//        }
//        // == String type (contactNumber.Number) == 
//        {
//            var err = Validate_String(value: contactNumber.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: contactNumber.Number);
//            }
//        }
//        // == String type (contactNumber.NumberInternationalFormat) == 
//        {
//            var err = Validate_String(value: contactNumber.NumberInternationalFormat, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.NumberInternationalFormat", value: contactNumber.NumberInternationalFormat);
//            }
//        }
//        // == Value type (contactNumber.Label) == 
//        {
//            int err1 = Validate_EnumType<LabelNumberType>(value: contactNumber.Label, typeOfEnum: typeof(LabelNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Label", value: contactNumber.Label);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ContactEmail(ContactEmail contactEmail, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(contactEmail)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (contactEmail.SearchIndex) == 
//        {
//            var err = Validate_String(value: contactEmail.SearchIndex, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.SearchIndex", value: contactEmail.SearchIndex);
//            }
//        }
//        // == String type (contactEmail.Email) == 
//        {
//            var err = Validate_String(value: contactEmail.Email, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Email", value: contactEmail.Email);
//            }
//        }
//        // == Value type (contactEmail.Label) == 
//        {
//            int err1 = Validate_EnumType<LabelEmailType>(value: contactEmail.Label, typeOfEnum: typeof(LabelEmailType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Label", value: contactEmail.Label);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Variable(Variable variable, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(variable)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (variable.Name) == 
//        {
//            var err = Validate_String(value: variable.Name, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: variable.Name);
//            }
//        }
//        // == String type (variable.Value) == 
//        {
//            var err = Validate_String(value: variable.Value, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Value", value: variable.Value);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CustomerInfo(CustomerInfo customerInfo, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(customerInfo)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//                // == Validate object ==
//                {
//                    var tmp = customerInfo.MailingAddress;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddress", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddress");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = customerInfo.AirNetworksCustomerInfo;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AirNetworksCustomerInfo");
//                        foreach(var err in Validate_AirNetworksCustomerInfo(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (customerInfo.FullName) == 
//        {
//            var err = Validate_String(value: customerInfo.FullName, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FullName", value: customerInfo.FullName);
//            }
//        }
//// == IList type (customerInfo.IdsTags) ==
//{
//    if(customerInfo.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < customerInfo.IdsTags.Count; i++)
//        {
//                    // == String type (customerInfo.IdsTags) == 
//        {
//            var err = Validate_String(value: customerInfo.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: customerInfo.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (customerInfo.IdAccount) == 
//        {
//            var err = Validate_String(value: customerInfo.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: customerInfo.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (customerInfo.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (customerInfo.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (customerInfo.Id) == 
//        {
//            var err = Validate_String(value: customerInfo.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: customerInfo.Id);
//            }
//        }
//        // == Value type (customerInfo.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: customerInfo.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: customerInfo.DateCreated);
//            }            
//        }
//        // == Value type (customerInfo.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: customerInfo.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: customerInfo.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AirNetworksCustomerInfo(AirNetworksCustomerInfo airNetworksCustomerInfo, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(airNetworksCustomerInfo)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (airNetworksCustomerInfo.IdNumber) == 
//        {
//            var err = Validate_String(value: airNetworksCustomerInfo.IdNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdNumber", value: airNetworksCustomerInfo.IdNumber);
//            }
//        }
//        // == String type (airNetworksCustomerInfo.IdType) == 
//        {
//            var err = Validate_String(value: airNetworksCustomerInfo.IdType, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdType", value: airNetworksCustomerInfo.IdType);
//            }
//        }
//        // == String type (airNetworksCustomerInfo.Province) == 
//        {
//            var err = Validate_String(value: airNetworksCustomerInfo.Province, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Province", value: airNetworksCustomerInfo.Province);
//            }
//        }
//        // == String type (airNetworksCustomerInfo.IdAirNetworksProvince) == 
//        {
//            var err = Validate_String(value: airNetworksCustomerInfo.IdAirNetworksProvince, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAirNetworksProvince", value: airNetworksCustomerInfo.IdAirNetworksProvince);
//            }
//        }
//        // == String type (airNetworksCustomerInfo.Population) == 
//        {
//            var err = Validate_String(value: airNetworksCustomerInfo.Population, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Population", value: airNetworksCustomerInfo.Population);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ExtensionCallFlowLogic(ExtensionCallFlowLogic extensionCallFlowLogic, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extensionCallFlowLogic)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (extensionCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: extensionCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == String type (extensionCallFlowLogic.CallFlowLabel) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.CallFlowLabel, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallFlowLabel", value: extensionCallFlowLogic.CallFlowLabel);
//            }
//        }
//        // == String type (extensionCallFlowLogic.TimeZone) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.TimeZone, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: extensionCallFlowLogic.TimeZone);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }            
//        }
//        // == String type (extensionCallFlowLogic.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionCallFlowLogic.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionCallFlowLogic.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionCallFlowLogic.FriendlyName);
//            }
//        }
//        // == String type (extensionCallFlowLogic.Number) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionCallFlowLogic.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionCallFlowLogic.IdsTags) ==
//{
//    if(extensionCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (extensionCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionCallFlowLogic.Id);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (extensionCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionCallFlowLogic.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ExtensionConference(ExtensionConference extensionConference, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extensionConference)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (extensionConference.IdsAudiosWhenOneParticipant) ==
//{
//    if(extensionConference.IdsAudiosWhenOneParticipant is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudiosWhenOneParticipant", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsAudiosWhenOneParticipant.Count; i++)
//        {
//                    // == String type (extensionConference.IdsAudiosWhenOneParticipant) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsAudiosWhenOneParticipant[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudiosWhenOneParticipant[{i}]", value: extensionConference.IdsAudiosWhenOneParticipant[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (extensionConference.AnnounceParticipants) because it is not required. (nothing to validate) == 
//        // == String type (extensionConference.Pin) == 
//        {
//            var err = Validate_String(value: extensionConference.Pin, isNullable: true, isRequired: false, minLength: 0, maxLength: 20);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Pin", value: extensionConference.Pin);
//            }
//        }
//        // == Value type (extensionConference.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionConference.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionConference.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }            
//        }
//        // == String type (extensionConference.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionConference.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionConference.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionConference.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionConference.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionConference.FriendlyName);
//            }
//        }
//        // == String type (extensionConference.Number) == 
//        {
//            var err = Validate_String(value: extensionConference.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionConference.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionConference.IdsTags) ==
//{
//    if(extensionConference.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsTags.Count; i++)
//        {
//                    // == String type (extensionConference.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionConference.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionConference.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionConference.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionConference.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionConference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionConference.Id) == 
//        {
//            var err = Validate_String(value: extensionConference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionConference.Id);
//            }
//        }
//        // == Value type (extensionConference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionConference.DateCreated);
//            }            
//        }
//        // == Value type (extensionConference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionConference.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ExtensionDial(ExtensionDial extensionDial, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extensionDial)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (extensionDial is ExtensionQueue extensionQueue)
//{
//    // == IList type (extensionQueue.IdsAudios) ==
//{
//    if(extensionQueue.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsAudios.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsAudios) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsAudios[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: extensionQueue.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfItTakesToLongToBeAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfItTakesToLongToBeAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfItTakesToLongToBeAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (extensionQueue.RingInUse) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.QueueTimeoutInMinutes) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.QueueTimeoutInMinutes, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.QueueTimeoutInMinutes", value: extensionQueue.QueueTimeoutInMinutes);
//            }            
//        }
//        // == [Ignoring] Value type (extensionQueue.AnnouncePosition) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceHoldTime) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceFrequency) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.RetryFrequency) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RetryFrequency, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RetryFrequency", value: extensionQueue.RetryFrequency);
//            }            
//        }
//        // == Value type (extensionQueue.RingStrategy) == 
//        {
//            int err1 = Validate_EnumType<QueueRingStrategy>(value: extensionQueue.RingStrategy, typeOfEnum: typeof(QueueRingStrategy));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.RingStrategy", value: extensionQueue.RingStrategy);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (extensionQueue.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionQueue.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionQueue.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }            
//        }
//// == IList type (extensionQueue.IdsLines) ==
//{
//    if(extensionQueue.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionQueue.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionQueue.IdsLines.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionQueue.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionQueue.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionQueue.RingTimeInSeconds);
//            }            
//        }
//        // == String type (extensionQueue.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionQueue.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionQueue.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionQueue.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionQueue.FriendlyName);
//            }
//        }
//        // == String type (extensionQueue.Number) == 
//        {
//            var err = Validate_String(value: extensionQueue.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionQueue.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionQueue.IdsTags) ==
//{
//    if(extensionQueue.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsTags.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionQueue.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionQueue.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionQueue.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionQueue.Id) == 
//        {
//            var err = Validate_String(value: extensionQueue.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionQueue.Id);
//            }
//        }
//        // == Value type (extensionQueue.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionQueue.DateCreated);
//            }            
//        }
//        // == Value type (extensionQueue.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionQueue.DateUpdated);
//            }            
//        }

//}
//else if (extensionDial is ExtensionDial)
//{
//    // == IList type (extensionDial.IdsLines) ==
//{
//    if(extensionDial.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionDial.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionDial.IdsLines.Count; i++)
//        {
//                    // == String type (extensionDial.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionDial.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionDial.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionDial.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionDial.RingTimeInSeconds);
//            }            
//        }
//        // == Value type (extensionDial.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionDial.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionDial.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }            
//        }
//        // == String type (extensionDial.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionDial.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionDial.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionDial.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionDial.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionDial.FriendlyName);
//            }
//        }
//        // == String type (extensionDial.Number) == 
//        {
//            var err = Validate_String(value: extensionDial.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionDial.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionDial.IdsTags) ==
//{
//    if(extensionDial.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionDial.IdsTags.Count; i++)
//        {
//                    // == String type (extensionDial.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionDial.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionDial.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionDial.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionDial.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionDial.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionDial.Id) == 
//        {
//            var err = Validate_String(value: extensionDial.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionDial.Id);
//            }
//        }
//        // == Value type (extensionDial.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionDial.DateCreated);
//            }            
//        }
//        // == Value type (extensionDial.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionDial.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_SendEmailNotificationIfItTakesToLongToBeAnswered(SendEmailNotificationIfItTakesToLongToBeAnswered sendEmailNotificationIfItTakesToLongToBeAnswered, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(sendEmailNotificationIfItTakesToLongToBeAnswered)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (sendEmailNotificationIfItTakesToLongToBeAnswered.TimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: sendEmailNotificationIfItTakesToLongToBeAnswered.TimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TimeInSeconds", value: sendEmailNotificationIfItTakesToLongToBeAnswered.TimeInSeconds);
//            }            
//        }
//// == IList type (sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails) ==
//{
//    if(sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsEmails", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsEmails", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails.Count; i++)
//        {
//                    // == String type (sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails) == 
//        {
//            var err = Validate_String(value: sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsEmails[{i}]", value: sendEmailNotificationIfItTakesToLongToBeAnswered.IdsEmails[i]);
//            }
//        }
//        }
//    }
//}



//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_EventAction(EventAction eventAction, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(eventAction)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (eventAction is EventActionForwardToExtension eventActionForwardToExtension)
//{
//            // == Value type (eventActionForwardToExtension.EventActionType) == 
//        {
//            int err1 = Validate_EnumType<EventActionType>(value: eventActionForwardToExtension.EventActionType, typeOfEnum: typeof(EventActionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.EventActionType", value: eventActionForwardToExtension.EventActionType);
//            }
//            int err3 = Validate_ValueTypeRequired<EventActionType>(value: eventActionForwardToExtension.EventActionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.EventActionType", value: eventActionForwardToExtension.EventActionType);
//            }            
//        }
//        // == String type (eventActionForwardToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: eventActionForwardToExtension.IdExtension, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: eventActionForwardToExtension.IdExtension);
//            }
//        }

//}
//else if (eventAction is EventActionForwardToPhoneNumber eventActionForwardToPhoneNumber)
//{
//            // == Value type (eventActionForwardToPhoneNumber.EventActionType) == 
//        {
//            int err1 = Validate_EnumType<EventActionType>(value: eventActionForwardToPhoneNumber.EventActionType, typeOfEnum: typeof(EventActionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.EventActionType", value: eventActionForwardToPhoneNumber.EventActionType);
//            }
//            int err3 = Validate_ValueTypeRequired<EventActionType>(value: eventActionForwardToPhoneNumber.EventActionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.EventActionType", value: eventActionForwardToPhoneNumber.EventActionType);
//            }            
//        }
//        // == String type (eventActionForwardToPhoneNumber.PhoneNumber) == 
//        {
//            var err = Validate_String(value: eventActionForwardToPhoneNumber.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: eventActionForwardToPhoneNumber.PhoneNumber);
//            }
//        }

//}
//else if (eventAction is EventActionLeaveVoicemail eventActionLeaveVoicemail)
//{
//            // == Value type (eventActionLeaveVoicemail.EventActionType) == 
//        {
//            int err1 = Validate_EnumType<EventActionType>(value: eventActionLeaveVoicemail.EventActionType, typeOfEnum: typeof(EventActionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.EventActionType", value: eventActionLeaveVoicemail.EventActionType);
//            }
//            int err3 = Validate_ValueTypeRequired<EventActionType>(value: eventActionLeaveVoicemail.EventActionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.EventActionType", value: eventActionLeaveVoicemail.EventActionType);
//            }            
//        }
//        // == String type (eventActionLeaveVoicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: eventActionLeaveVoicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: eventActionLeaveVoicemail.IdEmail);
//            }
//        }
//        // == String type (eventActionLeaveVoicemail.IdAudio) == 
//        {
//            var err = Validate_String(value: eventActionLeaveVoicemail.IdAudio, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudio", value: eventActionLeaveVoicemail.IdAudio);
//            }
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_SendEmailNotificationIfNotAnswered(SendEmailNotificationIfNotAnswered sendEmailNotificationIfNotAnswered, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(sendEmailNotificationIfNotAnswered)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (sendEmailNotificationIfNotAnswered.IdsEmails) ==
//{
//    if(sendEmailNotificationIfNotAnswered.IdsEmails is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsEmails", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(sendEmailNotificationIfNotAnswered.IdsEmails.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsEmails", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < sendEmailNotificationIfNotAnswered.IdsEmails.Count; i++)
//        {
//                    // == String type (sendEmailNotificationIfNotAnswered.IdsEmails) == 
//        {
//            var err = Validate_String(value: sendEmailNotificationIfNotAnswered.IdsEmails[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsEmails[{i}]", value: sendEmailNotificationIfNotAnswered.IdsEmails[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (sendEmailNotificationIfNotAnswered.PreventSendingNotificationIfLastLessThanNSeconds) because it is not required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ExtensionQueue(ExtensionQueue extensionQueue, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extensionQueue)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (extensionQueue.IdsAudios) ==
//{
//    if(extensionQueue.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsAudios.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsAudios) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsAudios[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: extensionQueue.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfItTakesToLongToBeAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfItTakesToLongToBeAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfItTakesToLongToBeAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (extensionQueue.RingInUse) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.QueueTimeoutInMinutes) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.QueueTimeoutInMinutes, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.QueueTimeoutInMinutes", value: extensionQueue.QueueTimeoutInMinutes);
//            }            
//        }
//        // == [Ignoring] Value type (extensionQueue.AnnouncePosition) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceHoldTime) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceFrequency) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.RetryFrequency) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RetryFrequency, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RetryFrequency", value: extensionQueue.RetryFrequency);
//            }            
//        }
//        // == Value type (extensionQueue.RingStrategy) == 
//        {
//            int err1 = Validate_EnumType<QueueRingStrategy>(value: extensionQueue.RingStrategy, typeOfEnum: typeof(QueueRingStrategy));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.RingStrategy", value: extensionQueue.RingStrategy);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (extensionQueue.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionQueue.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionQueue.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }            
//        }
//// == IList type (extensionQueue.IdsLines) ==
//{
//    if(extensionQueue.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionQueue.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionQueue.IdsLines.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionQueue.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionQueue.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionQueue.RingTimeInSeconds);
//            }            
//        }
//        // == String type (extensionQueue.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionQueue.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionQueue.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionQueue.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionQueue.FriendlyName);
//            }
//        }
//        // == String type (extensionQueue.Number) == 
//        {
//            var err = Validate_String(value: extensionQueue.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionQueue.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionQueue.IdsTags) ==
//{
//    if(extensionQueue.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsTags.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionQueue.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionQueue.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionQueue.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionQueue.Id) == 
//        {
//            var err = Validate_String(value: extensionQueue.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionQueue.Id);
//            }
//        }
//        // == Value type (extensionQueue.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionQueue.DateCreated);
//            }            
//        }
//        // == Value type (extensionQueue.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionQueue.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_ExtensionVoicemail(ExtensionVoicemail extensionVoicemail, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extensionVoicemail)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (extensionVoicemail.IdAudio) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAudio, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudio", value: extensionVoicemail.IdAudio);
//            }
//        }
//// == IList type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(extensionVoicemail.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: extensionVoicemail.IdEmail);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeech) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeech, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeech", value: extensionVoicemail.TextToSpeech);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeechVoiceId) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeechVoiceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeechVoiceId", value: extensionVoicemail.TextToSpeechVoiceId);
//            }
//        }
//        // == Value type (extensionVoicemail.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionVoicemail.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionVoicemail.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }            
//        }
//        // == String type (extensionVoicemail.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionVoicemail.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionVoicemail.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionVoicemail.FriendlyName);
//            }
//        }
//        // == String type (extensionVoicemail.Number) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionVoicemail.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionVoicemail.IdsTags) ==
//{
//    if(extensionVoicemail.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsTags.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionVoicemail.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionVoicemail.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionVoicemail.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionVoicemail.Id) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionVoicemail.Id);
//            }
//        }
//        // == Value type (extensionVoicemail.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionVoicemail.DateCreated);
//            }            
//        }
//        // == Value type (extensionVoicemail.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionVoicemail.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_FaxIncoming(FaxIncoming faxIncoming, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(faxIncoming)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (faxIncoming.IdVoipNumberFax) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdVoipNumberFax, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberFax", value: faxIncoming.IdVoipNumberFax);
//            }
//        }
//        // == String type (faxIncoming.IdContact) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: faxIncoming.IdContact);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = faxIncoming.Pdf;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Pdf");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (faxIncoming.NumPages) because it is not required. (nothing to validate) == 
//        // == String type (faxIncoming.FaxStatus) == 
//        {
//            var err = Validate_String(value: faxIncoming.FaxStatus, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FaxStatus", value: faxIncoming.FaxStatus);
//            }
//        }
//        // == String type (faxIncoming.From) == 
//        {
//            var err = Validate_String(value: faxIncoming.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: faxIncoming.From);
//            }
//        }
//        // == String type (faxIncoming.To) == 
//        {
//            var err = Validate_String(value: faxIncoming.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: faxIncoming.To);
//            }
//        }
//        // == String type (faxIncoming.ErrorMessage) == 
//        {
//            var err = Validate_String(value: faxIncoming.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: faxIncoming.ErrorMessage);
//            }
//        }
//// == IList type (faxIncoming.IdsTags) ==
//{
//    if(faxIncoming.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < faxIncoming.IdsTags.Count; i++)
//        {
//                    // == String type (faxIncoming.IdsTags) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: faxIncoming.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (faxIncoming.IdAccount) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: faxIncoming.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (faxIncoming.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (faxIncoming.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (faxIncoming.Id) == 
//        {
//            var err = Validate_String(value: faxIncoming.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: faxIncoming.Id);
//            }
//        }
//        // == Value type (faxIncoming.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxIncoming.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: faxIncoming.DateCreated);
//            }            
//        }
//        // == Value type (faxIncoming.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxIncoming.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: faxIncoming.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_FaxOutgoingGroup(FaxOutgoingGroup faxOutgoingGroup, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(faxOutgoingGroup)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (faxOutgoingGroup.IdVoipNumberFax) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdVoipNumberFax, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberFax", value: faxOutgoingGroup.IdVoipNumberFax);
//            }
//        }
//// == IList type (faxOutgoingGroup.FaxesOutgoing) ==
//{
//    if(faxOutgoingGroup.FaxesOutgoing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.FaxesOutgoing", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(faxOutgoingGroup.FaxesOutgoing.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.FaxesOutgoing", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < faxOutgoingGroup.FaxesOutgoing.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = faxOutgoingGroup.FaxesOutgoing[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.FaxesOutgoing[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"FaxesOutgoing[{i}]");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (faxOutgoingGroup.From) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: faxOutgoingGroup.From);
//            }
//        }
//// == IList type (faxOutgoingGroup.IdsEmailsSendConfirmation) ==
//{
//    if(faxOutgoingGroup.IdsEmailsSendConfirmation is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsEmailsSendConfirmation", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(faxOutgoingGroup.IdsEmailsSendConfirmation.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsEmailsSendConfirmation", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < faxOutgoingGroup.IdsEmailsSendConfirmation.Count; i++)
//        {
//                    // == String type (faxOutgoingGroup.IdsEmailsSendConfirmation) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdsEmailsSendConfirmation[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsEmailsSendConfirmation[{i}]", value: faxOutgoingGroup.IdsEmailsSendConfirmation[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (faxOutgoingGroup.ContainsError) because it is not required. (nothing to validate) == 
//// == IList type (faxOutgoingGroup.IdsTags) ==
//{
//    if(faxOutgoingGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < faxOutgoingGroup.IdsTags.Count; i++)
//        {
//                    // == String type (faxOutgoingGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: faxOutgoingGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (faxOutgoingGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: faxOutgoingGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (faxOutgoingGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (faxOutgoingGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (faxOutgoingGroup.Id) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: faxOutgoingGroup.Id);
//            }
//        }
//        // == Value type (faxOutgoingGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxOutgoingGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: faxOutgoingGroup.DateCreated);
//            }            
//        }
//        // == Value type (faxOutgoingGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxOutgoingGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: faxOutgoingGroup.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_User(User user, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(user)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (user.IdEmail) == 
//        {
//            var err = Validate_String(value: user.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: user.IdEmail);
//            }
//        }
//// == IList type (user.UbluxRoles) ==
//{
//    if(user.UbluxRoles is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(user.UbluxRoles.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < user.UbluxRoles.Count; i++)
//        {
//                    // == Value type (user.UbluxRoles) == 
//        {
//            int err1 = Validate_EnumType<UbluxRole>(value: user.UbluxRoles[i], typeOfEnum: typeof(UbluxRole));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxRoles[{i}]", value: user.UbluxRoles[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxRole>(value: user.UbluxRoles[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxRoles[{i}]", value: user.UbluxRoles[i]);
//            }            
//        }
//        }
//    }
//}

//        // == Value type (user.UserType) == 
//        {
//            int err1 = Validate_EnumType<UserType>(value: user.UserType, typeOfEnum: typeof(UserType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UserType", value: user.UserType);
//            }
//            int err3 = Validate_ValueTypeRequired<UserType>(value: user.UserType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UserType", value: user.UserType);
//            }            
//        }
//        // == String type (user.Username) == 
//        {
//            var err = Validate_String(value: user.Username, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Username", value: user.Username);
//            }
//        }
//        // == String type (user.Password) == 
//        {
//            var err = Validate_String(value: user.Password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: user.Password);
//            }
//        }
//        // == String type (user.IpAddressWhereAuthenticated) == 
//        {
//            var err = Validate_String(value: user.IpAddressWhereAuthenticated, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpAddressWhereAuthenticated", value: user.IpAddressWhereAuthenticated);
//            }
//        }
//        // == [Ignoring] Value type (user.DateAuthenticated) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (user.IdsTags) ==
//{
//    if(user.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < user.IdsTags.Count; i++)
//        {
//                    // == String type (user.IdsTags) == 
//        {
//            var err = Validate_String(value: user.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: user.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (user.IdAccount) == 
//        {
//            var err = Validate_String(value: user.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: user.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (user.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (user.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (user.Id) == 
//        {
//            var err = Validate_String(value: user.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: user.Id);
//            }
//        }
//        // == Value type (user.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: user.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: user.DateCreated);
//            }            
//        }
//        // == Value type (user.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: user.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: user.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_LineKeyGroup(LineKeyGroup lineKeyGroup, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(lineKeyGroup)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (lineKeyGroup.LineKeys) ==
//{
//    if(lineKeyGroup.LineKeys is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineKeys", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < lineKeyGroup.LineKeys.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = lineKeyGroup.LineKeys[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineKeys[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineKeys[{i}]");
//                        foreach(var err in Validate_LineKey(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (lineKeyGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: lineKeyGroup.FriendlyName);
//            }
//        }
//        // == String type (lineKeyGroup.Description) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: lineKeyGroup.Description);
//            }
//        }
//// == IList type (lineKeyGroup.IdsTags) ==
//{
//    if(lineKeyGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < lineKeyGroup.IdsTags.Count; i++)
//        {
//                    // == String type (lineKeyGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: lineKeyGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (lineKeyGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: lineKeyGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (lineKeyGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (lineKeyGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (lineKeyGroup.Id) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: lineKeyGroup.Id);
//            }
//        }
//        // == Value type (lineKeyGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: lineKeyGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: lineKeyGroup.DateCreated);
//            }            
//        }
//        // == Value type (lineKeyGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: lineKeyGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: lineKeyGroup.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_LineKey(LineKey lineKey, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(lineKey)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (lineKey.LineKeyType) == 
//        {
//            int err1 = Validate_EnumType<LineKeyType>(value: lineKey.LineKeyType, typeOfEnum: typeof(LineKeyType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.LineKeyType", value: lineKey.LineKeyType);
//            }
//            int err3 = Validate_ValueTypeRequired<LineKeyType>(value: lineKey.LineKeyType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.LineKeyType", value: lineKey.LineKeyType);
//            }            
//        }
//        // == String type (lineKey.Value) == 
//        {
//            var err = Validate_String(value: lineKey.Value, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Value", value: lineKey.Value);
//            }
//        }
//        // == String type (lineKey.Label) == 
//        {
//            var err = Validate_String(value: lineKey.Label, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Label", value: lineKey.Label);
//            }
//        }
//        // == String type (lineKey.IdExtension) == 
//        {
//            var err = Validate_String(value: lineKey.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: lineKey.IdExtension);
//            }
//        }
//        // == [Ignoring] Value type (lineKey.LineKeyIndex) because it is not required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_LogWebServiceRequest(LogWebServiceRequest logWebServiceRequest, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(logWebServiceRequest)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == [Ignoring] Value type (logWebServiceRequest.SaveRequestBody) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.SaveResponseBody) because it is not required. (nothing to validate) == 
//                // == Validate object ==
//                {
//                    var tmp = logWebServiceRequest.UbluxSession;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"UbluxSession");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (logWebServiceRequest.ConcurrentRequests) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.Charge) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.CurrentPenalty) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.TotalPenalty) because it is not required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.HttpMethod) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.HttpMethod, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.HttpMethod", value: logWebServiceRequest.HttpMethod);
//            }
//        }
//        // == String type (logWebServiceRequest.UserAgent) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.UserAgent, isNullable: true, isRequired: false, minLength: 0, maxLength: 200);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: logWebServiceRequest.UserAgent);
//            }
//        }
//        // == String type (logWebServiceRequest.Ip) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: logWebServiceRequest.Ip);
//            }
//        }
//        // == String type (logWebServiceRequest.RequestUrl) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.RequestUrl, isNullable: false, isRequired: true, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RequestUrl", value: logWebServiceRequest.RequestUrl);
//            }
//        }
//        // == [Ignoring] Value type (logWebServiceRequest.SaveQueryString) because it is not required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.QueryString) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.QueryString, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.QueryString", value: logWebServiceRequest.QueryString);
//            }
//        }
//        // == String type (logWebServiceRequest.RequestBody) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.RequestBody, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RequestBody", value: logWebServiceRequest.RequestBody);
//            }
//        }
//        // == String type (logWebServiceRequest.ResponseBody) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.ResponseBody, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ResponseBody", value: logWebServiceRequest.ResponseBody);
//            }
//        }
//        // == Value type (logWebServiceRequest.HttpResponseStatusCode) == 
//        {
//            int err1 = Validate_EnumType<HttpResponseStatusCode>(value: logWebServiceRequest.HttpResponseStatusCode, typeOfEnum: typeof(HttpResponseStatusCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.HttpResponseStatusCode", value: logWebServiceRequest.HttpResponseStatusCode);
//            }
//            int err3 = Validate_ValueTypeRequired<HttpResponseStatusCode>(value: logWebServiceRequest.HttpResponseStatusCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.HttpResponseStatusCode", value: logWebServiceRequest.HttpResponseStatusCode);
//            }            
//        }
//        // == Value type (logWebServiceRequest.ResponseTime) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: logWebServiceRequest.ResponseTime, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ResponseTime", value: logWebServiceRequest.ResponseTime);
//            }            
//        }
//        // == [Ignoring] Value type (logWebServiceRequest.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.Id) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: logWebServiceRequest.Id);
//            }
//        }
//        // == Value type (logWebServiceRequest.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: logWebServiceRequest.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: logWebServiceRequest.DateCreated);
//            }            
//        }
//        // == Value type (logWebServiceRequest.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: logWebServiceRequest.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: logWebServiceRequest.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_MusicOnHoldGroup(MusicOnHoldGroup musicOnHoldGroup, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(musicOnHoldGroup)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (musicOnHoldGroup.IdsAudios) ==
//{
//    if(musicOnHoldGroup.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(musicOnHoldGroup.IdsAudios.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsAudios", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < musicOnHoldGroup.IdsAudios.Count; i++)
//        {
//                    // == String type (musicOnHoldGroup.IdsAudios) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdsAudios[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: musicOnHoldGroup.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (musicOnHoldGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: musicOnHoldGroup.FriendlyName);
//            }
//        }
//        // == String type (musicOnHoldGroup.Description) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: musicOnHoldGroup.Description);
//            }
//        }
//// == IList type (musicOnHoldGroup.IdsTags) ==
//{
//    if(musicOnHoldGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < musicOnHoldGroup.IdsTags.Count; i++)
//        {
//                    // == String type (musicOnHoldGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: musicOnHoldGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (musicOnHoldGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: musicOnHoldGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (musicOnHoldGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (musicOnHoldGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (musicOnHoldGroup.Id) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: musicOnHoldGroup.Id);
//            }
//        }
//        // == Value type (musicOnHoldGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: musicOnHoldGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: musicOnHoldGroup.DateCreated);
//            }            
//        }
//        // == Value type (musicOnHoldGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: musicOnHoldGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: musicOnHoldGroup.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Phone(Phone phone, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(phone)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (phone.Password) == 
//        {
//            var err = Validate_String(value: phone.Password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: phone.Password);
//            }
//        }
//        // == String type (phone.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: phone.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: phone.IdCloudServicePbx);
//            }
//        }
//        // == String type (phone.IdPhoneConfiguration) == 
//        {
//            var err = Validate_String(value: phone.IdPhoneConfiguration, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdPhoneConfiguration", value: phone.IdPhoneConfiguration);
//            }
//        }
//        // == String type (phone.IdUser) == 
//        {
//            var err = Validate_String(value: phone.IdUser, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: phone.IdUser);
//            }
//        }
//// == IList type (phone.Lines) ==
//{
//    if(phone.Lines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Lines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(phone.Lines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.Lines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < phone.Lines.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = phone.Lines[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Lines[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Lines[{i}]");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (phone.FriendlyName) == 
//        {
//            var err = Validate_String(value: phone.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: phone.FriendlyName);
//            }
//        }
//        // == Value type (phone.PhoneType) == 
//        {
//            int err1 = Validate_EnumType<PhoneType>(value: phone.PhoneType, typeOfEnum: typeof(PhoneType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PhoneType", value: phone.PhoneType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (phone.DisableEncryption) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: phone.DisableEncryption, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DisableEncryption", value: phone.DisableEncryption);
//            }            
//        }
//        // == [Ignoring] Value type (phone.DateAutoProvision) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phone.MacAddress) == 
//        {
//            var err = Validate_String(value: phone.MacAddress, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.MacAddress", value: phone.MacAddress);
//            }
//        }
//        // == String type (phone.UserAgent) == 
//        {
//            var err = Validate_String(value: phone.UserAgent, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: phone.UserAgent);
//            }
//        }
//        // == String type (phone.Pin) == 
//        {
//            var err = Validate_String(value: phone.Pin, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Pin", value: phone.Pin);
//            }
//        }
//// == IList type (phone.IdsTags) ==
//{
//    if(phone.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < phone.IdsTags.Count; i++)
//        {
//                    // == String type (phone.IdsTags) == 
//        {
//            var err = Validate_String(value: phone.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: phone.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (phone.IdAccount) == 
//        {
//            var err = Validate_String(value: phone.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: phone.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (phone.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (phone.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phone.Id) == 
//        {
//            var err = Validate_String(value: phone.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: phone.Id);
//            }
//        }
//        // == Value type (phone.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phone.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: phone.DateCreated);
//            }            
//        }
//        // == Value type (phone.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phone.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: phone.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_PhoneConfiguration(PhoneConfiguration phoneConfiguration, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(phoneConfiguration)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (phoneConfiguration.IdLineKeyGroup) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdLineKeyGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineKeyGroup", value: phoneConfiguration.IdLineKeyGroup);
//            }
//        }
//        // == String type (phoneConfiguration.FrienlyName) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.FrienlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FrienlyName", value: phoneConfiguration.FrienlyName);
//            }
//        }
//        // == String type (phoneConfiguration.Description) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: phoneConfiguration.Description);
//            }
//        }
//// == IList type (phoneConfiguration.IdsTags) ==
//{
//    if(phoneConfiguration.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < phoneConfiguration.IdsTags.Count; i++)
//        {
//                    // == String type (phoneConfiguration.IdsTags) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: phoneConfiguration.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (phoneConfiguration.IdAccount) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: phoneConfiguration.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (phoneConfiguration.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (phoneConfiguration.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phoneConfiguration.Id) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: phoneConfiguration.Id);
//            }
//        }
//        // == Value type (phoneConfiguration.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phoneConfiguration.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: phoneConfiguration.DateCreated);
//            }            
//        }
//        // == Value type (phoneConfiguration.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phoneConfiguration.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: phoneConfiguration.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_PowerDialerGroup(PowerDialerGroup powerDialerGroup, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(powerDialerGroup)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (powerDialerGroup.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdVoipNumberPhone, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: powerDialerGroup.IdVoipNumberPhone);
//            }
//        }
//        // == String type (powerDialerGroup.IdCallerIdMask) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdCallerIdMask, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallerIdMask", value: powerDialerGroup.IdCallerIdMask);
//            }
//        }
//        // == String type (powerDialerGroup.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdCallFlowLogic, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: powerDialerGroup.IdCallFlowLogic);
//            }
//        }
//        // == String type (powerDialerGroup.IdExtension) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: powerDialerGroup.IdExtension);
//            }
//        }
//// == IList type (powerDialerGroup.PowerDialers) ==
//{
//    if(powerDialerGroup.PowerDialers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.PowerDialers", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(powerDialerGroup.PowerDialers.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.PowerDialers", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < powerDialerGroup.PowerDialers.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = powerDialerGroup.PowerDialers[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.PowerDialers[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"PowerDialers[{i}]");
//                        foreach(var err in Validate_PowerDialer(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (powerDialerGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: powerDialerGroup.FriendlyName);
//            }
//        }
//        // == String type (powerDialerGroup.Description) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: powerDialerGroup.Description);
//            }
//        }
//        // == Value type (powerDialerGroup.PowerDialerGroupStatus) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerGroupStatus>(value: powerDialerGroup.PowerDialerGroupStatus, typeOfEnum: typeof(PowerDialerGroupStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerGroupStatus", value: powerDialerGroup.PowerDialerGroupStatus);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerGroupStatus>(value: powerDialerGroup.PowerDialerGroupStatus, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerGroupStatus", value: powerDialerGroup.PowerDialerGroupStatus);
//            }            
//        }
//        // == String type (powerDialerGroup.ErrorMessage) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: powerDialerGroup.ErrorMessage);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerGroup.PowerDialerExecutingRecordIndex) because it is not required. (nothing to validate) == 
//        // == Value type (powerDialerGroup.NumberOfConcurrentCalls) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: powerDialerGroup.NumberOfConcurrentCalls, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumberOfConcurrentCalls", value: powerDialerGroup.NumberOfConcurrentCalls);
//            }            
//        }
//// == IList type (powerDialerGroup.IdsTags) ==
//{
//    if(powerDialerGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < powerDialerGroup.IdsTags.Count; i++)
//        {
//                    // == String type (powerDialerGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: powerDialerGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (powerDialerGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: powerDialerGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (powerDialerGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (powerDialerGroup.Id) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: powerDialerGroup.Id);
//            }
//        }
//        // == Value type (powerDialerGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: powerDialerGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: powerDialerGroup.DateCreated);
//            }            
//        }
//        // == Value type (powerDialerGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: powerDialerGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: powerDialerGroup.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_PowerDialer(PowerDialer powerDialer, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(powerDialer)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (powerDialer is PowerDialerAdvance powerDialerAdvance)
//{
//            // == String type (powerDialerAdvance.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: powerDialerAdvance.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: powerDialerAdvance.IdCallFlowLogic);
//            }
//        }
//        // == Value type (powerDialerAdvance.PowerDialerType) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerType>(value: powerDialerAdvance.PowerDialerType, typeOfEnum: typeof(PowerDialerType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerType", value: powerDialerAdvance.PowerDialerType);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerType>(value: powerDialerAdvance.PowerDialerType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerType", value: powerDialerAdvance.PowerDialerType);
//            }            
//        }
//        // == String type (powerDialerAdvance.PhoneNumber) == 
//        {
//            var err = Validate_String(value: powerDialerAdvance.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: powerDialerAdvance.PhoneNumber);
//            }
//        }
//        // == Value type (powerDialerAdvance.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: powerDialerAdvance.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: powerDialerAdvance.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: powerDialerAdvance.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: powerDialerAdvance.CountryIsoCode);
//            }            
//        }
//        // == String type (powerDialerAdvance.IdContact) == 
//        {
//            var err = Validate_String(value: powerDialerAdvance.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: powerDialerAdvance.IdContact);
//            }
//        }
//        // == Value type (powerDialerAdvance.PowerDialerStatus) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerStatus>(value: powerDialerAdvance.PowerDialerStatus, typeOfEnum: typeof(PowerDialerStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerStatus", value: powerDialerAdvance.PowerDialerStatus);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerStatus>(value: powerDialerAdvance.PowerDialerStatus, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerStatus", value: powerDialerAdvance.PowerDialerStatus);
//            }            
//        }
//        // == String type (powerDialerAdvance.ErrorMessage) == 
//        {
//            var err = Validate_String(value: powerDialerAdvance.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: powerDialerAdvance.ErrorMessage);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerAdvance.NumberOfAttempts) because it is not required. (nothing to validate) == 
//        // == String type (powerDialerAdvance.ContactName) == 
//        {
//            var err = Validate_String(value: powerDialerAdvance.ContactName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactName", value: powerDialerAdvance.ContactName);
//            }
//        }

//}
//else if (powerDialer is PowerDialerSimple powerDialerSimple)
//{
//            // == String type (powerDialerSimple.IdLine) == 
//        {
//            var err = Validate_String(value: powerDialerSimple.IdLine, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLine", value: powerDialerSimple.IdLine);
//            }
//        }
//        // == Value type (powerDialerSimple.PowerDialerType) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerType>(value: powerDialerSimple.PowerDialerType, typeOfEnum: typeof(PowerDialerType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerType", value: powerDialerSimple.PowerDialerType);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerType>(value: powerDialerSimple.PowerDialerType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerType", value: powerDialerSimple.PowerDialerType);
//            }            
//        }
//        // == String type (powerDialerSimple.PhoneNumber) == 
//        {
//            var err = Validate_String(value: powerDialerSimple.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: powerDialerSimple.PhoneNumber);
//            }
//        }
//        // == Value type (powerDialerSimple.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: powerDialerSimple.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: powerDialerSimple.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: powerDialerSimple.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: powerDialerSimple.CountryIsoCode);
//            }            
//        }
//        // == String type (powerDialerSimple.IdContact) == 
//        {
//            var err = Validate_String(value: powerDialerSimple.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: powerDialerSimple.IdContact);
//            }
//        }
//        // == Value type (powerDialerSimple.PowerDialerStatus) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerStatus>(value: powerDialerSimple.PowerDialerStatus, typeOfEnum: typeof(PowerDialerStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerStatus", value: powerDialerSimple.PowerDialerStatus);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerStatus>(value: powerDialerSimple.PowerDialerStatus, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerStatus", value: powerDialerSimple.PowerDialerStatus);
//            }            
//        }
//        // == String type (powerDialerSimple.ErrorMessage) == 
//        {
//            var err = Validate_String(value: powerDialerSimple.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: powerDialerSimple.ErrorMessage);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerSimple.NumberOfAttempts) because it is not required. (nothing to validate) == 
//        // == String type (powerDialerSimple.ContactName) == 
//        {
//            var err = Validate_String(value: powerDialerSimple.ContactName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactName", value: powerDialerSimple.ContactName);
//            }
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_SMS(SMS sMS, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(sMS)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (sMS.IdVoipNumber) == 
//        {
//            var err = Validate_String(value: sMS.IdVoipNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumber", value: sMS.IdVoipNumber);
//            }
//        }
//        // == String type (sMS.IdContact) == 
//        {
//            var err = Validate_String(value: sMS.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: sMS.IdContact);
//            }
//        }
//        // == [Ignoring] Value type (sMS.IsIncoming) because it is not required. (nothing to validate) == 
//        // == String type (sMS.Body) == 
//        {
//            var err = Validate_String(value: sMS.Body, isNullable: false, isRequired: true, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Body", value: sMS.Body);
//            }
//        }
//        // == Value type (sMS.NumSegments) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: sMS.NumSegments, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumSegments", value: sMS.NumSegments);
//            }            
//        }
//        // == String type (sMS.Status) == 
//        {
//            var err = Validate_String(value: sMS.Status, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Status", value: sMS.Status);
//            }
//        }
//        // == String type (sMS.From) == 
//        {
//            var err = Validate_String(value: sMS.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: sMS.From);
//            }
//        }
//        // == String type (sMS.To) == 
//        {
//            var err = Validate_String(value: sMS.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: sMS.To);
//            }
//        }
//// == IList type (sMS.IdsTags) ==
//{
//    if(sMS.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < sMS.IdsTags.Count; i++)
//        {
//                    // == String type (sMS.IdsTags) == 
//        {
//            var err = Validate_String(value: sMS.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: sMS.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (sMS.IdAccount) == 
//        {
//            var err = Validate_String(value: sMS.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: sMS.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (sMS.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (sMS.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (sMS.Id) == 
//        {
//            var err = Validate_String(value: sMS.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: sMS.Id);
//            }
//        }
//        // == Value type (sMS.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: sMS.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: sMS.DateCreated);
//            }            
//        }
//        // == Value type (sMS.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: sMS.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: sMS.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkOriginationForward(TrunkOriginationForward trunkOriginationForward, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkOriginationForward)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (trunkOriginationForward.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationForward.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationForward.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationForward.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationForward.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationForward.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationForward.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationForward.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationForward.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationForward.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationForward.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationForward.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationForward.Id);
//            }
//        }
//        // == Value type (trunkOriginationForward.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationForward.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationForward.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationForward.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkOriginationRegister(TrunkOriginationRegister trunkOriginationRegister, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkOriginationRegister)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (trunkOriginationRegister.Reg_username) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_username, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_username", value: trunkOriginationRegister.Reg_username);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_password) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_password", value: trunkOriginationRegister.Reg_password);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_host) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_host, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_host", value: trunkOriginationRegister.Reg_host);
//            }
//        }
//        // == Value type (trunkOriginationRegister.Reg_port) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: trunkOriginationRegister.Reg_port, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Reg_port", value: trunkOriginationRegister.Reg_port);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationRegister.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationRegister.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationRegister.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationRegister.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationRegister.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationRegister.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationRegister.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationRegister.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationRegister.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationRegister.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationRegister.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationRegister.Id);
//            }
//        }
//        // == Value type (trunkOriginationRegister.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationRegister.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationRegister.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkTermination(TrunkTermination trunkTermination, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkTermination)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (trunkTermination.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkTermination.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkTermination.IdVoipProvider);
//            }
//        }
//        // == String type (trunkTermination.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkTermination.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkTermination.ProviderId);
//            }
//        }
//        // == String type (trunkTermination.TerminationUri) == 
//        {
//            var err = Validate_String(value: trunkTermination.TerminationUri, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TerminationUri", value: trunkTermination.TerminationUri);
//            }
//        }
//        // == String type (trunkTermination.Username) == 
//        {
//            var err = Validate_String(value: trunkTermination.Username, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Username", value: trunkTermination.Username);
//            }
//        }
//        // == String type (trunkTermination.Password) == 
//        {
//            var err = Validate_String(value: trunkTermination.Password, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: trunkTermination.Password);
//            }
//        }
//// == IList type (trunkTermination.CountryIsoCodesThatCanCall) ==
//{
//    if(trunkTermination.CountryIsoCodesThatCanCall is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountryIsoCodesThatCanCall", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(trunkTermination.CountryIsoCodesThatCanCall.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.CountryIsoCodesThatCanCall", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < trunkTermination.CountryIsoCodesThatCanCall.Count; i++)
//        {
//                    // == Value type (trunkTermination.CountryIsoCodesThatCanCall) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: trunkTermination.CountryIsoCodesThatCanCall[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCodesThatCanCall[{i}]", value: trunkTermination.CountryIsoCodesThatCanCall[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: trunkTermination.CountryIsoCodesThatCanCall[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCodesThatCanCall[{i}]", value: trunkTermination.CountryIsoCodesThatCanCall[i]);
//            }            
//        }
//        }
//    }
//}

//        // == String type (trunkTermination.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkTermination.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkTermination.FriendlyName);
//            }
//        }
//        // == Value type (trunkTermination.VoipCompany) == 
//        {
//            int err1 = Validate_EnumType<VoipCompany>(value: trunkTermination.VoipCompany, typeOfEnum: typeof(VoipCompany));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipCompany", value: trunkTermination.VoipCompany);
//            }
//            int err3 = Validate_ValueTypeRequired<VoipCompany>(value: trunkTermination.VoipCompany, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.VoipCompany", value: trunkTermination.VoipCompany);
//            }            
//        }
//        // == [Ignoring] Value type (trunkTermination.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkTermination.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkTermination.Id) == 
//        {
//            var err = Validate_String(value: trunkTermination.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkTermination.Id);
//            }
//        }
//        // == Value type (trunkTermination.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTermination.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkTermination.DateCreated);
//            }            
//        }
//        // == Value type (trunkTermination.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTermination.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkTermination.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkTerminationGroup(TrunkTerminationGroup trunkTerminationGroup, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkTerminationGroup)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority) ==
//{
//    if(trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TrunkTerminationRulesOrderedByPriority[{i}]");
//                        foreach(var err in Validate_TrunkTerminationRule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == [Ignoring] Value type (trunkTerminationGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkTerminationGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkTerminationGroup.Id) == 
//        {
//            var err = Validate_String(value: trunkTerminationGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkTerminationGroup.Id);
//            }
//        }
//        // == Value type (trunkTerminationGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTerminationGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkTerminationGroup.DateCreated);
//            }            
//        }
//        // == Value type (trunkTerminationGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTerminationGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkTerminationGroup.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkTerminationRule(TrunkTerminationRule trunkTerminationRule, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkTerminationRule)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (trunkTerminationRule.IdTrunkTermination) == 
//        {
//            var err = Validate_String(value: trunkTerminationRule.IdTrunkTermination, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkTermination", value: trunkTerminationRule.IdTrunkTermination);
//            }
//        }
//// == IList type (trunkTerminationRule.CountriesThatCanCall) ==
//{
//    if(trunkTerminationRule.CountriesThatCanCall is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountriesThatCanCall", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(trunkTerminationRule.CountriesThatCanCall.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.CountriesThatCanCall", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < trunkTerminationRule.CountriesThatCanCall.Count; i++)
//        {
//                    // == Value type (trunkTerminationRule.CountriesThatCanCall) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: trunkTerminationRule.CountriesThatCanCall[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountriesThatCanCall[{i}]", value: trunkTerminationRule.CountriesThatCanCall[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: trunkTerminationRule.CountriesThatCanCall[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountriesThatCanCall[{i}]", value: trunkTerminationRule.CountriesThatCanCall[i]);
//            }            
//        }
//        }
//    }
//}



//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Voicemail(Voicemail voicemail, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voicemail)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (voicemail is VoicemailForwarded voicemailForwarded)
//{
//                    // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.LineThatForwardedVoicemail;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineThatForwardedVoicemail", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineThatForwardedVoicemail");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.ExtensionForwarded;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ExtensionForwarded");
//                        foreach(var err in Validate_UbluxDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(voicemailForwarded.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdEmail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: voicemailForwarded.IdEmail);
//            }
//        }
//        // == Value type (voicemailForwarded.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: voicemailForwarded.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: voicemailForwarded.DurationInSeconds);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (voicemailForwarded.ErrorMessage) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: voicemailForwarded.ErrorMessage);
//            }
//        }
//// == IList type (voicemailForwarded.IdsTags) ==
//{
//    if(voicemailForwarded.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsTags.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsTags) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voicemailForwarded.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdAccount) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voicemailForwarded.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voicemailForwarded.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voicemailForwarded.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voicemailForwarded.Id) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voicemailForwarded.Id);
//            }
//        }
//        // == Value type (voicemailForwarded.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voicemailForwarded.DateCreated);
//            }            
//        }
//        // == Value type (voicemailForwarded.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voicemailForwarded.DateUpdated);
//            }            
//        }

//}
//else if (voicemail is Voicemail)
//{
//    // == IList type (voicemail.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(voicemail.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemail.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (voicemail.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: voicemail.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: voicemail.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: voicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: voicemail.IdEmail);
//            }
//        }
//        // == Value type (voicemail.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: voicemail.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: voicemail.DurationInSeconds);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = voicemail.VoicemailWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemail.VoicemailMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (voicemail.ErrorMessage) == 
//        {
//            var err = Validate_String(value: voicemail.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: voicemail.ErrorMessage);
//            }
//        }
//// == IList type (voicemail.IdsTags) ==
//{
//    if(voicemail.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemail.IdsTags.Count; i++)
//        {
//                    // == String type (voicemail.IdsTags) == 
//        {
//            var err = Validate_String(value: voicemail.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voicemail.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemail.IdAccount) == 
//        {
//            var err = Validate_String(value: voicemail.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voicemail.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voicemail.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voicemail.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voicemail.Id) == 
//        {
//            var err = Validate_String(value: voicemail.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voicemail.Id);
//            }
//        }
//        // == Value type (voicemail.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemail.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voicemail.DateCreated);
//            }            
//        }
//        // == Value type (voicemail.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemail.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voicemail.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_UbluxDocument(UbluxDocument ubluxDocument, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(ubluxDocument)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (ubluxDocument is ApiKey apiKey)
//{
//            // == String type (apiKey.IdUser) == 
//        {
//            var err = Validate_String(value: apiKey.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: apiKey.IdUser);
//            }
//        }
//// == IList type (apiKey.UbluxRoles) ==
//{
//    if(apiKey.UbluxRoles is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(apiKey.UbluxRoles.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < apiKey.UbluxRoles.Count; i++)
//        {
//                    // == Value type (apiKey.UbluxRoles) == 
//        {
//            int err1 = Validate_EnumType<UbluxRole>(value: apiKey.UbluxRoles[i], typeOfEnum: typeof(UbluxRole));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxRoles[{i}]", value: apiKey.UbluxRoles[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxRole>(value: apiKey.UbluxRoles[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxRoles[{i}]", value: apiKey.UbluxRoles[i]);
//            }            
//        }
//        }
//    }
//}

//        // == String type (apiKey.Key) == 
//        {
//            var err = Validate_String(value: apiKey.Key, isNullable: false, isRequired: true, minLength: 0, maxLength: 300);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Key", value: apiKey.Key);
//            }
//        }
//        // == [Ignoring] Value type (apiKey.DateExpire) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == [Ignoring] Value type (apiKey.DateLastUsed) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (apiKey.Description) == 
//        {
//            var err = Validate_String(value: apiKey.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: apiKey.Description);
//            }
//        }
//// == IList type (apiKey.IdsTags) ==
//{
//    if(apiKey.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < apiKey.IdsTags.Count; i++)
//        {
//                    // == String type (apiKey.IdsTags) == 
//        {
//            var err = Validate_String(value: apiKey.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: apiKey.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (apiKey.IdAccount) == 
//        {
//            var err = Validate_String(value: apiKey.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: apiKey.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (apiKey.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (apiKey.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (apiKey.Id) == 
//        {
//            var err = Validate_String(value: apiKey.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: apiKey.Id);
//            }
//        }
//        // == Value type (apiKey.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: apiKey.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: apiKey.DateCreated);
//            }            
//        }
//        // == Value type (apiKey.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: apiKey.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: apiKey.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is User user)
//{
//            // == String type (user.IdEmail) == 
//        {
//            var err = Validate_String(value: user.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: user.IdEmail);
//            }
//        }
//// == IList type (user.UbluxRoles) ==
//{
//    if(user.UbluxRoles is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(user.UbluxRoles.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.UbluxRoles", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < user.UbluxRoles.Count; i++)
//        {
//                    // == Value type (user.UbluxRoles) == 
//        {
//            int err1 = Validate_EnumType<UbluxRole>(value: user.UbluxRoles[i], typeOfEnum: typeof(UbluxRole));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxRoles[{i}]", value: user.UbluxRoles[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxRole>(value: user.UbluxRoles[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxRoles[{i}]", value: user.UbluxRoles[i]);
//            }            
//        }
//        }
//    }
//}

//        // == Value type (user.UserType) == 
//        {
//            int err1 = Validate_EnumType<UserType>(value: user.UserType, typeOfEnum: typeof(UserType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UserType", value: user.UserType);
//            }
//            int err3 = Validate_ValueTypeRequired<UserType>(value: user.UserType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UserType", value: user.UserType);
//            }            
//        }
//        // == String type (user.Username) == 
//        {
//            var err = Validate_String(value: user.Username, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Username", value: user.Username);
//            }
//        }
//        // == String type (user.Password) == 
//        {
//            var err = Validate_String(value: user.Password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: user.Password);
//            }
//        }
//        // == String type (user.IpAddressWhereAuthenticated) == 
//        {
//            var err = Validate_String(value: user.IpAddressWhereAuthenticated, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpAddressWhereAuthenticated", value: user.IpAddressWhereAuthenticated);
//            }
//        }
//        // == [Ignoring] Value type (user.DateAuthenticated) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (user.IdsTags) ==
//{
//    if(user.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < user.IdsTags.Count; i++)
//        {
//                    // == String type (user.IdsTags) == 
//        {
//            var err = Validate_String(value: user.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: user.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (user.IdAccount) == 
//        {
//            var err = Validate_String(value: user.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: user.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (user.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (user.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (user.Id) == 
//        {
//            var err = Validate_String(value: user.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: user.Id);
//            }
//        }
//        // == Value type (user.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: user.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: user.DateCreated);
//            }            
//        }
//        // == Value type (user.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: user.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: user.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is LineKeyGroup lineKeyGroup)
//{
//    // == IList type (lineKeyGroup.LineKeys) ==
//{
//    if(lineKeyGroup.LineKeys is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineKeys", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < lineKeyGroup.LineKeys.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = lineKeyGroup.LineKeys[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineKeys[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineKeys[{i}]");
//                        foreach(var err in Validate_LineKey(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (lineKeyGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: lineKeyGroup.FriendlyName);
//            }
//        }
//        // == String type (lineKeyGroup.Description) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: lineKeyGroup.Description);
//            }
//        }
//// == IList type (lineKeyGroup.IdsTags) ==
//{
//    if(lineKeyGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < lineKeyGroup.IdsTags.Count; i++)
//        {
//                    // == String type (lineKeyGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: lineKeyGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (lineKeyGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: lineKeyGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (lineKeyGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (lineKeyGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (lineKeyGroup.Id) == 
//        {
//            var err = Validate_String(value: lineKeyGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: lineKeyGroup.Id);
//            }
//        }
//        // == Value type (lineKeyGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: lineKeyGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: lineKeyGroup.DateCreated);
//            }            
//        }
//        // == Value type (lineKeyGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: lineKeyGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: lineKeyGroup.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is LogWebServiceRequest logWebServiceRequest)
//{
//            // == [Ignoring] Value type (logWebServiceRequest.SaveRequestBody) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.SaveResponseBody) because it is not required. (nothing to validate) == 
//                // == Validate object ==
//                {
//                    var tmp = logWebServiceRequest.UbluxSession;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"UbluxSession");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (logWebServiceRequest.ConcurrentRequests) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.Charge) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.CurrentPenalty) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.TotalPenalty) because it is not required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.HttpMethod) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.HttpMethod, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.HttpMethod", value: logWebServiceRequest.HttpMethod);
//            }
//        }
//        // == String type (logWebServiceRequest.UserAgent) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.UserAgent, isNullable: true, isRequired: false, minLength: 0, maxLength: 200);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: logWebServiceRequest.UserAgent);
//            }
//        }
//        // == String type (logWebServiceRequest.Ip) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: logWebServiceRequest.Ip);
//            }
//        }
//        // == String type (logWebServiceRequest.RequestUrl) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.RequestUrl, isNullable: false, isRequired: true, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RequestUrl", value: logWebServiceRequest.RequestUrl);
//            }
//        }
//        // == [Ignoring] Value type (logWebServiceRequest.SaveQueryString) because it is not required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.QueryString) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.QueryString, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.QueryString", value: logWebServiceRequest.QueryString);
//            }
//        }
//        // == String type (logWebServiceRequest.RequestBody) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.RequestBody, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RequestBody", value: logWebServiceRequest.RequestBody);
//            }
//        }
//        // == String type (logWebServiceRequest.ResponseBody) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.ResponseBody, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ResponseBody", value: logWebServiceRequest.ResponseBody);
//            }
//        }
//        // == Value type (logWebServiceRequest.HttpResponseStatusCode) == 
//        {
//            int err1 = Validate_EnumType<HttpResponseStatusCode>(value: logWebServiceRequest.HttpResponseStatusCode, typeOfEnum: typeof(HttpResponseStatusCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.HttpResponseStatusCode", value: logWebServiceRequest.HttpResponseStatusCode);
//            }
//            int err3 = Validate_ValueTypeRequired<HttpResponseStatusCode>(value: logWebServiceRequest.HttpResponseStatusCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.HttpResponseStatusCode", value: logWebServiceRequest.HttpResponseStatusCode);
//            }            
//        }
//        // == Value type (logWebServiceRequest.ResponseTime) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: logWebServiceRequest.ResponseTime, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ResponseTime", value: logWebServiceRequest.ResponseTime);
//            }            
//        }
//        // == [Ignoring] Value type (logWebServiceRequest.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (logWebServiceRequest.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (logWebServiceRequest.Id) == 
//        {
//            var err = Validate_String(value: logWebServiceRequest.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: logWebServiceRequest.Id);
//            }
//        }
//        // == Value type (logWebServiceRequest.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: logWebServiceRequest.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: logWebServiceRequest.DateCreated);
//            }            
//        }
//        // == Value type (logWebServiceRequest.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: logWebServiceRequest.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: logWebServiceRequest.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is MusicOnHoldGroup musicOnHoldGroup)
//{
//    // == IList type (musicOnHoldGroup.IdsAudios) ==
//{
//    if(musicOnHoldGroup.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(musicOnHoldGroup.IdsAudios.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsAudios", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < musicOnHoldGroup.IdsAudios.Count; i++)
//        {
//                    // == String type (musicOnHoldGroup.IdsAudios) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdsAudios[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: musicOnHoldGroup.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (musicOnHoldGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: musicOnHoldGroup.FriendlyName);
//            }
//        }
//        // == String type (musicOnHoldGroup.Description) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: musicOnHoldGroup.Description);
//            }
//        }
//// == IList type (musicOnHoldGroup.IdsTags) ==
//{
//    if(musicOnHoldGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < musicOnHoldGroup.IdsTags.Count; i++)
//        {
//                    // == String type (musicOnHoldGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: musicOnHoldGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (musicOnHoldGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: musicOnHoldGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (musicOnHoldGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (musicOnHoldGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (musicOnHoldGroup.Id) == 
//        {
//            var err = Validate_String(value: musicOnHoldGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: musicOnHoldGroup.Id);
//            }
//        }
//        // == Value type (musicOnHoldGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: musicOnHoldGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: musicOnHoldGroup.DateCreated);
//            }            
//        }
//        // == Value type (musicOnHoldGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: musicOnHoldGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: musicOnHoldGroup.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Phone phone)
//{
//            // == String type (phone.Password) == 
//        {
//            var err = Validate_String(value: phone.Password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: phone.Password);
//            }
//        }
//        // == String type (phone.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: phone.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: phone.IdCloudServicePbx);
//            }
//        }
//        // == String type (phone.IdPhoneConfiguration) == 
//        {
//            var err = Validate_String(value: phone.IdPhoneConfiguration, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdPhoneConfiguration", value: phone.IdPhoneConfiguration);
//            }
//        }
//        // == String type (phone.IdUser) == 
//        {
//            var err = Validate_String(value: phone.IdUser, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: phone.IdUser);
//            }
//        }
//// == IList type (phone.Lines) ==
//{
//    if(phone.Lines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Lines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(phone.Lines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.Lines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < phone.Lines.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = phone.Lines[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Lines[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Lines[{i}]");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (phone.FriendlyName) == 
//        {
//            var err = Validate_String(value: phone.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: phone.FriendlyName);
//            }
//        }
//        // == Value type (phone.PhoneType) == 
//        {
//            int err1 = Validate_EnumType<PhoneType>(value: phone.PhoneType, typeOfEnum: typeof(PhoneType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PhoneType", value: phone.PhoneType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (phone.DisableEncryption) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: phone.DisableEncryption, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DisableEncryption", value: phone.DisableEncryption);
//            }            
//        }
//        // == [Ignoring] Value type (phone.DateAutoProvision) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phone.MacAddress) == 
//        {
//            var err = Validate_String(value: phone.MacAddress, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.MacAddress", value: phone.MacAddress);
//            }
//        }
//        // == String type (phone.UserAgent) == 
//        {
//            var err = Validate_String(value: phone.UserAgent, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: phone.UserAgent);
//            }
//        }
//        // == String type (phone.Pin) == 
//        {
//            var err = Validate_String(value: phone.Pin, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Pin", value: phone.Pin);
//            }
//        }
//// == IList type (phone.IdsTags) ==
//{
//    if(phone.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < phone.IdsTags.Count; i++)
//        {
//                    // == String type (phone.IdsTags) == 
//        {
//            var err = Validate_String(value: phone.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: phone.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (phone.IdAccount) == 
//        {
//            var err = Validate_String(value: phone.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: phone.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (phone.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (phone.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phone.Id) == 
//        {
//            var err = Validate_String(value: phone.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: phone.Id);
//            }
//        }
//        // == Value type (phone.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phone.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: phone.DateCreated);
//            }            
//        }
//        // == Value type (phone.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phone.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: phone.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is PhoneConfiguration phoneConfiguration)
//{
//            // == String type (phoneConfiguration.IdLineKeyGroup) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdLineKeyGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineKeyGroup", value: phoneConfiguration.IdLineKeyGroup);
//            }
//        }
//        // == String type (phoneConfiguration.FrienlyName) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.FrienlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FrienlyName", value: phoneConfiguration.FrienlyName);
//            }
//        }
//        // == String type (phoneConfiguration.Description) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: phoneConfiguration.Description);
//            }
//        }
//// == IList type (phoneConfiguration.IdsTags) ==
//{
//    if(phoneConfiguration.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < phoneConfiguration.IdsTags.Count; i++)
//        {
//                    // == String type (phoneConfiguration.IdsTags) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: phoneConfiguration.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (phoneConfiguration.IdAccount) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: phoneConfiguration.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (phoneConfiguration.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (phoneConfiguration.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (phoneConfiguration.Id) == 
//        {
//            var err = Validate_String(value: phoneConfiguration.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: phoneConfiguration.Id);
//            }
//        }
//        // == Value type (phoneConfiguration.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phoneConfiguration.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: phoneConfiguration.DateCreated);
//            }            
//        }
//        // == Value type (phoneConfiguration.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: phoneConfiguration.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: phoneConfiguration.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is PowerDialerGroup powerDialerGroup)
//{
//            // == String type (powerDialerGroup.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdVoipNumberPhone, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: powerDialerGroup.IdVoipNumberPhone);
//            }
//        }
//        // == String type (powerDialerGroup.IdCallerIdMask) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdCallerIdMask, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallerIdMask", value: powerDialerGroup.IdCallerIdMask);
//            }
//        }
//        // == String type (powerDialerGroup.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdCallFlowLogic, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: powerDialerGroup.IdCallFlowLogic);
//            }
//        }
//        // == String type (powerDialerGroup.IdExtension) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: powerDialerGroup.IdExtension);
//            }
//        }
//// == IList type (powerDialerGroup.PowerDialers) ==
//{
//    if(powerDialerGroup.PowerDialers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.PowerDialers", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(powerDialerGroup.PowerDialers.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.PowerDialers", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < powerDialerGroup.PowerDialers.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = powerDialerGroup.PowerDialers[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.PowerDialers[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"PowerDialers[{i}]");
//                        foreach(var err in Validate_PowerDialer(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (powerDialerGroup.FriendlyName) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: powerDialerGroup.FriendlyName);
//            }
//        }
//        // == String type (powerDialerGroup.Description) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: powerDialerGroup.Description);
//            }
//        }
//        // == Value type (powerDialerGroup.PowerDialerGroupStatus) == 
//        {
//            int err1 = Validate_EnumType<PowerDialerGroupStatus>(value: powerDialerGroup.PowerDialerGroupStatus, typeOfEnum: typeof(PowerDialerGroupStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.PowerDialerGroupStatus", value: powerDialerGroup.PowerDialerGroupStatus);
//            }
//            int err3 = Validate_ValueTypeRequired<PowerDialerGroupStatus>(value: powerDialerGroup.PowerDialerGroupStatus, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.PowerDialerGroupStatus", value: powerDialerGroup.PowerDialerGroupStatus);
//            }            
//        }
//        // == String type (powerDialerGroup.ErrorMessage) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: powerDialerGroup.ErrorMessage);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerGroup.PowerDialerExecutingRecordIndex) because it is not required. (nothing to validate) == 
//        // == Value type (powerDialerGroup.NumberOfConcurrentCalls) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: powerDialerGroup.NumberOfConcurrentCalls, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumberOfConcurrentCalls", value: powerDialerGroup.NumberOfConcurrentCalls);
//            }            
//        }
//// == IList type (powerDialerGroup.IdsTags) ==
//{
//    if(powerDialerGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < powerDialerGroup.IdsTags.Count; i++)
//        {
//                    // == String type (powerDialerGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: powerDialerGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (powerDialerGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: powerDialerGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (powerDialerGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (powerDialerGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (powerDialerGroup.Id) == 
//        {
//            var err = Validate_String(value: powerDialerGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: powerDialerGroup.Id);
//            }
//        }
//        // == Value type (powerDialerGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: powerDialerGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: powerDialerGroup.DateCreated);
//            }            
//        }
//        // == Value type (powerDialerGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: powerDialerGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: powerDialerGroup.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is SMS sMS)
//{
//            // == String type (sMS.IdVoipNumber) == 
//        {
//            var err = Validate_String(value: sMS.IdVoipNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumber", value: sMS.IdVoipNumber);
//            }
//        }
//        // == String type (sMS.IdContact) == 
//        {
//            var err = Validate_String(value: sMS.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: sMS.IdContact);
//            }
//        }
//        // == [Ignoring] Value type (sMS.IsIncoming) because it is not required. (nothing to validate) == 
//        // == String type (sMS.Body) == 
//        {
//            var err = Validate_String(value: sMS.Body, isNullable: false, isRequired: true, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Body", value: sMS.Body);
//            }
//        }
//        // == Value type (sMS.NumSegments) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: sMS.NumSegments, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.NumSegments", value: sMS.NumSegments);
//            }            
//        }
//        // == String type (sMS.Status) == 
//        {
//            var err = Validate_String(value: sMS.Status, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Status", value: sMS.Status);
//            }
//        }
//        // == String type (sMS.From) == 
//        {
//            var err = Validate_String(value: sMS.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: sMS.From);
//            }
//        }
//        // == String type (sMS.To) == 
//        {
//            var err = Validate_String(value: sMS.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: sMS.To);
//            }
//        }
//// == IList type (sMS.IdsTags) ==
//{
//    if(sMS.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < sMS.IdsTags.Count; i++)
//        {
//                    // == String type (sMS.IdsTags) == 
//        {
//            var err = Validate_String(value: sMS.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: sMS.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (sMS.IdAccount) == 
//        {
//            var err = Validate_String(value: sMS.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: sMS.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (sMS.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (sMS.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (sMS.Id) == 
//        {
//            var err = Validate_String(value: sMS.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: sMS.Id);
//            }
//        }
//        // == Value type (sMS.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: sMS.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: sMS.DateCreated);
//            }            
//        }
//        // == Value type (sMS.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: sMS.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: sMS.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is TrunkOriginationForward trunkOriginationForward)
//{
//            // == Value type (trunkOriginationForward.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationForward.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationForward.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationForward.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationForward.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationForward.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationForward.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationForward.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationForward.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationForward.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationForward.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationForward.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationForward.Id);
//            }
//        }
//        // == Value type (trunkOriginationForward.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationForward.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationForward.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationForward.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is FaxOutgoingGroup faxOutgoingGroup)
//{
//            // == String type (faxOutgoingGroup.IdVoipNumberFax) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdVoipNumberFax, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberFax", value: faxOutgoingGroup.IdVoipNumberFax);
//            }
//        }
//// == IList type (faxOutgoingGroup.FaxesOutgoing) ==
//{
//    if(faxOutgoingGroup.FaxesOutgoing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.FaxesOutgoing", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(faxOutgoingGroup.FaxesOutgoing.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.FaxesOutgoing", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < faxOutgoingGroup.FaxesOutgoing.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = faxOutgoingGroup.FaxesOutgoing[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.FaxesOutgoing[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"FaxesOutgoing[{i}]");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (faxOutgoingGroup.From) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: faxOutgoingGroup.From);
//            }
//        }
//// == IList type (faxOutgoingGroup.IdsEmailsSendConfirmation) ==
//{
//    if(faxOutgoingGroup.IdsEmailsSendConfirmation is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsEmailsSendConfirmation", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(faxOutgoingGroup.IdsEmailsSendConfirmation.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsEmailsSendConfirmation", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < faxOutgoingGroup.IdsEmailsSendConfirmation.Count; i++)
//        {
//                    // == String type (faxOutgoingGroup.IdsEmailsSendConfirmation) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdsEmailsSendConfirmation[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsEmailsSendConfirmation[{i}]", value: faxOutgoingGroup.IdsEmailsSendConfirmation[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (faxOutgoingGroup.ContainsError) because it is not required. (nothing to validate) == 
//// == IList type (faxOutgoingGroup.IdsTags) ==
//{
//    if(faxOutgoingGroup.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < faxOutgoingGroup.IdsTags.Count; i++)
//        {
//                    // == String type (faxOutgoingGroup.IdsTags) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: faxOutgoingGroup.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (faxOutgoingGroup.IdAccount) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: faxOutgoingGroup.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (faxOutgoingGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (faxOutgoingGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (faxOutgoingGroup.Id) == 
//        {
//            var err = Validate_String(value: faxOutgoingGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: faxOutgoingGroup.Id);
//            }
//        }
//        // == Value type (faxOutgoingGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxOutgoingGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: faxOutgoingGroup.DateCreated);
//            }            
//        }
//        // == Value type (faxOutgoingGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxOutgoingGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: faxOutgoingGroup.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is TrunkOriginationRegister trunkOriginationRegister)
//{
//            // == String type (trunkOriginationRegister.Reg_username) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_username, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_username", value: trunkOriginationRegister.Reg_username);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_password) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_password", value: trunkOriginationRegister.Reg_password);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_host) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_host, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_host", value: trunkOriginationRegister.Reg_host);
//            }
//        }
//        // == Value type (trunkOriginationRegister.Reg_port) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: trunkOriginationRegister.Reg_port, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Reg_port", value: trunkOriginationRegister.Reg_port);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationRegister.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationRegister.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationRegister.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationRegister.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationRegister.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationRegister.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationRegister.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationRegister.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationRegister.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationRegister.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationRegister.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationRegister.Id);
//            }
//        }
//        // == Value type (trunkOriginationRegister.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationRegister.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationRegister.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is TrunkTerminationGroup trunkTerminationGroup)
//{
//    // == IList type (trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority) ==
//{
//    if(trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = trunkTerminationGroup.TrunkTerminationRulesOrderedByPriority[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TrunkTerminationRulesOrderedByPriority[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TrunkTerminationRulesOrderedByPriority[{i}]");
//                        foreach(var err in Validate_TrunkTerminationRule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == [Ignoring] Value type (trunkTerminationGroup.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkTerminationGroup.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkTerminationGroup.Id) == 
//        {
//            var err = Validate_String(value: trunkTerminationGroup.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkTerminationGroup.Id);
//            }
//        }
//        // == Value type (trunkTerminationGroup.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTerminationGroup.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkTerminationGroup.DateCreated);
//            }            
//        }
//        // == Value type (trunkTerminationGroup.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTerminationGroup.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkTerminationGroup.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is VoicemailForwarded voicemailForwarded)
//{
//                    // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.LineThatForwardedVoicemail;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineThatForwardedVoicemail", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineThatForwardedVoicemail");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.ExtensionForwarded;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ExtensionForwarded");
//                        foreach(var err in Validate_UbluxDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(voicemailForwarded.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdEmail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: voicemailForwarded.IdEmail);
//            }
//        }
//        // == Value type (voicemailForwarded.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: voicemailForwarded.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: voicemailForwarded.DurationInSeconds);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (voicemailForwarded.ErrorMessage) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: voicemailForwarded.ErrorMessage);
//            }
//        }
//// == IList type (voicemailForwarded.IdsTags) ==
//{
//    if(voicemailForwarded.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsTags.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsTags) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voicemailForwarded.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdAccount) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voicemailForwarded.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voicemailForwarded.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voicemailForwarded.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voicemailForwarded.Id) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voicemailForwarded.Id);
//            }
//        }
//        // == Value type (voicemailForwarded.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voicemailForwarded.DateCreated);
//            }            
//        }
//        // == Value type (voicemailForwarded.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voicemailForwarded.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Voicemail voicemail)
//{
//    // == IList type (voicemail.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(voicemail.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemail.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (voicemail.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: voicemail.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: voicemail.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: voicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: voicemail.IdEmail);
//            }
//        }
//        // == Value type (voicemail.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: voicemail.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: voicemail.DurationInSeconds);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = voicemail.VoicemailWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemail.VoicemailMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (voicemail.ErrorMessage) == 
//        {
//            var err = Validate_String(value: voicemail.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: voicemail.ErrorMessage);
//            }
//        }
//// == IList type (voicemail.IdsTags) ==
//{
//    if(voicemail.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemail.IdsTags.Count; i++)
//        {
//                    // == String type (voicemail.IdsTags) == 
//        {
//            var err = Validate_String(value: voicemail.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voicemail.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemail.IdAccount) == 
//        {
//            var err = Validate_String(value: voicemail.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voicemail.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voicemail.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voicemail.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voicemail.Id) == 
//        {
//            var err = Validate_String(value: voicemail.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voicemail.Id);
//            }
//        }
//        // == Value type (voicemail.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemail.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voicemail.DateCreated);
//            }            
//        }
//        // == Value type (voicemail.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemail.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voicemail.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is VoipNumberAvailableForPurchase voipNumberAvailableForPurchase)
//{
//    // == IList type (voipNumberAvailableForPurchase.RulesPhone) ==
//{
//    if(voipNumberAvailableForPurchase.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesSms) ==
//{
//    if(voipNumberAvailableForPurchase.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesFax) ==
//{
//    if(voipNumberAvailableForPurchase.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RequiresCustomerInfo) because it is not required. (nothing to validate) == 
//        // == Value type (voipNumberAvailableForPurchase.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberAvailableForPurchase.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberAvailableForPurchase.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberAvailableForPurchase.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberAvailableForPurchase.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberAvailableForPurchase.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberAvailableForPurchase.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberAvailableForPurchase.ProviderId);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Number) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberAvailableForPurchase.Number);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberAvailableForPurchase.FriendlyName);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.Description) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberAvailableForPurchase.Description);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberAvailableForPurchase.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberAvailableForPurchase.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.City) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberAvailableForPurchase.City);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.State) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberAvailableForPurchase.State);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberAvailableForPurchase.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberAvailableForPurchase.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberAvailableForPurchase.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberAvailableForPurchase.TimeZone);
//            }
//        }
//// == IList type (voipNumberAvailableForPurchase.IdsTags) ==
//{
//    if(voipNumberAvailableForPurchase.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberAvailableForPurchase.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberAvailableForPurchase.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberAvailableForPurchase.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberAvailableForPurchase.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Id) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberAvailableForPurchase.Id);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberAvailableForPurchase.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberAvailableForPurchase.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is VoipNumberFax voipNumberFax)
//{
//    // == IList type (voipNumberFax.RulesPhone) ==
//{
//    if(voipNumberFax.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesSms) ==
//{
//    if(voipNumberFax.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesFax) ==
//{
//    if(voipNumberFax.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberFax.RulesFax.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesFax", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberFax.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberFax.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberFax.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberFax.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberFax.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberFax.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberFax.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberFax.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberFax.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberFax.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberFax.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberFax.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberFax.ProviderId);
//            }
//        }
//        // == String type (voipNumberFax.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberFax.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberFax.Number) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberFax.Number);
//            }
//        }
//        // == String type (voipNumberFax.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberFax.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberFax.FriendlyName);
//            }
//        }
//        // == String type (voipNumberFax.Description) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberFax.Description);
//            }
//        }
//        // == Value type (voipNumberFax.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberFax.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberFax.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }            
//        }
//        // == String type (voipNumberFax.City) == 
//        {
//            var err = Validate_String(value: voipNumberFax.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberFax.City);
//            }
//        }
//        // == String type (voipNumberFax.State) == 
//        {
//            var err = Validate_String(value: voipNumberFax.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberFax.State);
//            }
//        }
//        // == Value type (voipNumberFax.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberFax.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberFax.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberFax.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberFax.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberFax.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberFax.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberFax.TimeZone);
//            }
//        }
//// == IList type (voipNumberFax.IdsTags) ==
//{
//    if(voipNumberFax.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberFax.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberFax.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberFax.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberFax.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberFax.Id) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberFax.Id);
//            }
//        }
//        // == Value type (voipNumberFax.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberFax.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberFax.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberFax.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is VoipNumberPhone voipNumberPhone)
//{
//    // == IList type (voipNumberPhone.RulesPhone) ==
//{
//    if(voipNumberPhone.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberPhone.RulesPhone.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesPhone", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberPhone.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesSms) ==
//{
//    if(voipNumberPhone.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesFax) ==
//{
//    if(voipNumberPhone.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberPhone.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberPhone.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberPhone.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberPhone.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberPhone.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberPhone.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberPhone.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberPhone.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberPhone.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberPhone.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberPhone.ProviderId);
//            }
//        }
//        // == String type (voipNumberPhone.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberPhone.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Number) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberPhone.Number);
//            }
//        }
//        // == String type (voipNumberPhone.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberPhone.FriendlyName);
//            }
//        }
//        // == String type (voipNumberPhone.Description) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberPhone.Description);
//            }
//        }
//        // == Value type (voipNumberPhone.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberPhone.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberPhone.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }            
//        }
//        // == String type (voipNumberPhone.City) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberPhone.City);
//            }
//        }
//        // == String type (voipNumberPhone.State) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberPhone.State);
//            }
//        }
//        // == Value type (voipNumberPhone.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberPhone.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberPhone.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberPhone.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberPhone.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberPhone.TimeZone);
//            }
//        }
//// == IList type (voipNumberPhone.IdsTags) ==
//{
//    if(voipNumberPhone.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberPhone.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberPhone.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberPhone.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberPhone.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Id) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberPhone.Id);
//            }
//        }
//        // == Value type (voipNumberPhone.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberPhone.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberPhone.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberPhone.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is VoipProvider voipProvider)
//{
//            // == String type (voipProvider.ProviderAccountId) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderAccountId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderAccountId", value: voipProvider.ProviderAccountId);
//            }
//        }
//        // == String type (voipProvider.ProviderOwnerAccountId) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderOwnerAccountId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderOwnerAccountId", value: voipProvider.ProviderOwnerAccountId);
//            }
//        }
//        // == String type (voipProvider.ProviderAccessToken) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderAccessToken, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderAccessToken", value: voipProvider.ProviderAccessToken);
//            }
//        }
//        // == Value type (voipProvider.UbluxPartner) == 
//        {
//            int err1 = Validate_EnumType<UbluxPartner>(value: voipProvider.UbluxPartner, typeOfEnum: typeof(UbluxPartner));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxPartner", value: voipProvider.UbluxPartner);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxPartner>(value: voipProvider.UbluxPartner, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxPartner", value: voipProvider.UbluxPartner);
//            }            
//        }
//        // == String type (voipProvider.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipProvider.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipProvider.FriendlyName);
//            }
//        }
//        // == String type (voipProvider.Status) == 
//        {
//            var err = Validate_String(value: voipProvider.Status, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Status", value: voipProvider.Status);
//            }
//        }
//        // == Value type (voipProvider.Country) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipProvider.Country, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Country", value: voipProvider.Country);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipProvider.Country, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Country", value: voipProvider.Country);
//            }            
//        }
//        // == Value type (voipProvider.VoipCompany) == 
//        {
//            int err1 = Validate_EnumType<VoipCompany>(value: voipProvider.VoipCompany, typeOfEnum: typeof(VoipCompany));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipCompany", value: voipProvider.VoipCompany);
//            }
//            int err3 = Validate_ValueTypeRequired<VoipCompany>(value: voipProvider.VoipCompany, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.VoipCompany", value: voipProvider.VoipCompany);
//            }            
//        }
//        // == [Ignoring] Value type (voipProvider.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipProvider.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipProvider.Id) == 
//        {
//            var err = Validate_String(value: voipProvider.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipProvider.Id);
//            }
//        }
//        // == Value type (voipProvider.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipProvider.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipProvider.DateCreated);
//            }            
//        }
//        // == Value type (voipProvider.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipProvider.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipProvider.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is WebHook webHook)
//{
//            // == Value type (webHook.EventTrigger) == 
//        {
//            int err1 = Validate_EnumType<EventTrigger>(value: webHook.EventTrigger, typeOfEnum: typeof(EventTrigger));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.EventTrigger", value: webHook.EventTrigger);
//            }
//            int err3 = Validate_ValueTypeRequired<EventTrigger>(value: webHook.EventTrigger, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.EventTrigger", value: webHook.EventTrigger);
//            }            
//        }
//        // == String type (webHook.Url) == 
//        {
//            var err = Validate_String(value: webHook.Url, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Url", value: webHook.Url);
//            }
//        }
//// == IList type (webHook.Headers) ==
//{
//    if(webHook.Headers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Headers", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < webHook.Headers.Count; i++)
//        {
//                    // == String type (webHook.Headers) == 
//        {
//            var err = Validate_String(value: webHook.Headers[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Headers[{i}]", value: webHook.Headers[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (webHook.IdsTags) ==
//{
//    if(webHook.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < webHook.IdsTags.Count; i++)
//        {
//                    // == String type (webHook.IdsTags) == 
//        {
//            var err = Validate_String(value: webHook.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: webHook.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (webHook.IdAccount) == 
//        {
//            var err = Validate_String(value: webHook.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: webHook.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (webHook.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (webHook.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (webHook.Id) == 
//        {
//            var err = Validate_String(value: webHook.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: webHook.Id);
//            }
//        }
//        // == Value type (webHook.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: webHook.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: webHook.DateCreated);
//            }            
//        }
//        // == Value type (webHook.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: webHook.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: webHook.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is StoredFileReference storedFileReference)
//{
//            // == String type (storedFileReference.IdDocument) == 
//        {
//            var err = Validate_String(value: storedFileReference.IdDocument, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdDocument", value: storedFileReference.IdDocument);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = storedFileReference.StoredFile;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.StoredFile", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"StoredFile");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (storedFileReference.IsBackup) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (storedFileReference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (storedFileReference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (storedFileReference.Id) == 
//        {
//            var err = Validate_String(value: storedFileReference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: storedFileReference.Id);
//            }
//        }
//        // == Value type (storedFileReference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: storedFileReference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: storedFileReference.DateCreated);
//            }            
//        }
//        // == Value type (storedFileReference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: storedFileReference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: storedFileReference.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is TrunkTermination trunkTermination)
//{
//            // == String type (trunkTermination.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkTermination.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkTermination.IdVoipProvider);
//            }
//        }
//        // == String type (trunkTermination.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkTermination.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkTermination.ProviderId);
//            }
//        }
//        // == String type (trunkTermination.TerminationUri) == 
//        {
//            var err = Validate_String(value: trunkTermination.TerminationUri, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TerminationUri", value: trunkTermination.TerminationUri);
//            }
//        }
//        // == String type (trunkTermination.Username) == 
//        {
//            var err = Validate_String(value: trunkTermination.Username, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Username", value: trunkTermination.Username);
//            }
//        }
//        // == String type (trunkTermination.Password) == 
//        {
//            var err = Validate_String(value: trunkTermination.Password, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: trunkTermination.Password);
//            }
//        }
//// == IList type (trunkTermination.CountryIsoCodesThatCanCall) ==
//{
//    if(trunkTermination.CountryIsoCodesThatCanCall is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountryIsoCodesThatCanCall", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(trunkTermination.CountryIsoCodesThatCanCall.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.CountryIsoCodesThatCanCall", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < trunkTermination.CountryIsoCodesThatCanCall.Count; i++)
//        {
//                    // == Value type (trunkTermination.CountryIsoCodesThatCanCall) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: trunkTermination.CountryIsoCodesThatCanCall[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCodesThatCanCall[{i}]", value: trunkTermination.CountryIsoCodesThatCanCall[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: trunkTermination.CountryIsoCodesThatCanCall[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCodesThatCanCall[{i}]", value: trunkTermination.CountryIsoCodesThatCanCall[i]);
//            }            
//        }
//        }
//    }
//}

//        // == String type (trunkTermination.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkTermination.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkTermination.FriendlyName);
//            }
//        }
//        // == Value type (trunkTermination.VoipCompany) == 
//        {
//            int err1 = Validate_EnumType<VoipCompany>(value: trunkTermination.VoipCompany, typeOfEnum: typeof(VoipCompany));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipCompany", value: trunkTermination.VoipCompany);
//            }
//            int err3 = Validate_ValueTypeRequired<VoipCompany>(value: trunkTermination.VoipCompany, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.VoipCompany", value: trunkTermination.VoipCompany);
//            }            
//        }
//        // == [Ignoring] Value type (trunkTermination.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkTermination.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkTermination.Id) == 
//        {
//            var err = Validate_String(value: trunkTermination.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkTermination.Id);
//            }
//        }
//        // == Value type (trunkTermination.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTermination.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkTermination.DateCreated);
//            }            
//        }
//        // == Value type (trunkTermination.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkTermination.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkTermination.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is FaxIncoming faxIncoming)
//{
//            // == String type (faxIncoming.IdVoipNumberFax) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdVoipNumberFax, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberFax", value: faxIncoming.IdVoipNumberFax);
//            }
//        }
//        // == String type (faxIncoming.IdContact) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: faxIncoming.IdContact);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = faxIncoming.Pdf;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Pdf");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (faxIncoming.NumPages) because it is not required. (nothing to validate) == 
//        // == String type (faxIncoming.FaxStatus) == 
//        {
//            var err = Validate_String(value: faxIncoming.FaxStatus, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FaxStatus", value: faxIncoming.FaxStatus);
//            }
//        }
//        // == String type (faxIncoming.From) == 
//        {
//            var err = Validate_String(value: faxIncoming.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: faxIncoming.From);
//            }
//        }
//        // == String type (faxIncoming.To) == 
//        {
//            var err = Validate_String(value: faxIncoming.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: faxIncoming.To);
//            }
//        }
//        // == String type (faxIncoming.ErrorMessage) == 
//        {
//            var err = Validate_String(value: faxIncoming.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: faxIncoming.ErrorMessage);
//            }
//        }
//// == IList type (faxIncoming.IdsTags) ==
//{
//    if(faxIncoming.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < faxIncoming.IdsTags.Count; i++)
//        {
//                    // == String type (faxIncoming.IdsTags) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: faxIncoming.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (faxIncoming.IdAccount) == 
//        {
//            var err = Validate_String(value: faxIncoming.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: faxIncoming.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (faxIncoming.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (faxIncoming.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (faxIncoming.Id) == 
//        {
//            var err = Validate_String(value: faxIncoming.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: faxIncoming.Id);
//            }
//        }
//        // == Value type (faxIncoming.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxIncoming.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: faxIncoming.DateCreated);
//            }            
//        }
//        // == Value type (faxIncoming.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: faxIncoming.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: faxIncoming.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is ExtensionVoicemail extensionVoicemail)
//{
//            // == String type (extensionVoicemail.IdAudio) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAudio, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudio", value: extensionVoicemail.IdAudio);
//            }
//        }
//// == IList type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(extensionVoicemail.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: extensionVoicemail.IdEmail);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeech) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeech, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeech", value: extensionVoicemail.TextToSpeech);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeechVoiceId) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeechVoiceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeechVoiceId", value: extensionVoicemail.TextToSpeechVoiceId);
//            }
//        }
//        // == Value type (extensionVoicemail.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionVoicemail.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionVoicemail.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }            
//        }
//        // == String type (extensionVoicemail.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionVoicemail.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionVoicemail.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionVoicemail.FriendlyName);
//            }
//        }
//        // == String type (extensionVoicemail.Number) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionVoicemail.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionVoicemail.IdsTags) ==
//{
//    if(extensionVoicemail.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsTags.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionVoicemail.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionVoicemail.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionVoicemail.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionVoicemail.Id) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionVoicemail.Id);
//            }
//        }
//        // == Value type (extensionVoicemail.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionVoicemail.DateCreated);
//            }            
//        }
//        // == Value type (extensionVoicemail.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionVoicemail.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is ExtensionQueue extensionQueue)
//{
//    // == IList type (extensionQueue.IdsAudios) ==
//{
//    if(extensionQueue.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsAudios.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsAudios) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsAudios[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: extensionQueue.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfItTakesToLongToBeAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfItTakesToLongToBeAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfItTakesToLongToBeAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (extensionQueue.RingInUse) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.QueueTimeoutInMinutes) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.QueueTimeoutInMinutes, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.QueueTimeoutInMinutes", value: extensionQueue.QueueTimeoutInMinutes);
//            }            
//        }
//        // == [Ignoring] Value type (extensionQueue.AnnouncePosition) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceHoldTime) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceFrequency) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.RetryFrequency) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RetryFrequency, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RetryFrequency", value: extensionQueue.RetryFrequency);
//            }            
//        }
//        // == Value type (extensionQueue.RingStrategy) == 
//        {
//            int err1 = Validate_EnumType<QueueRingStrategy>(value: extensionQueue.RingStrategy, typeOfEnum: typeof(QueueRingStrategy));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.RingStrategy", value: extensionQueue.RingStrategy);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (extensionQueue.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionQueue.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionQueue.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }            
//        }
//// == IList type (extensionQueue.IdsLines) ==
//{
//    if(extensionQueue.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionQueue.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionQueue.IdsLines.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionQueue.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionQueue.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionQueue.RingTimeInSeconds);
//            }            
//        }
//        // == String type (extensionQueue.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionQueue.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionQueue.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionQueue.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionQueue.FriendlyName);
//            }
//        }
//        // == String type (extensionQueue.Number) == 
//        {
//            var err = Validate_String(value: extensionQueue.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionQueue.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionQueue.IdsTags) ==
//{
//    if(extensionQueue.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsTags.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionQueue.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionQueue.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionQueue.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionQueue.Id) == 
//        {
//            var err = Validate_String(value: extensionQueue.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionQueue.Id);
//            }
//        }
//        // == Value type (extensionQueue.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionQueue.DateCreated);
//            }            
//        }
//        // == Value type (extensionQueue.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionQueue.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Account account)
//{
//            // == String type (account.IdGTrunkTerminationGroup) == 
//        {
//            var err = Validate_String(value: account.IdGTrunkTerminationGroup, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdGTrunkTerminationGroup", value: account.IdGTrunkTerminationGroup);
//            }
//        }
//// == IList type (account.ReserveAccountsOnPhone) ==
//{
//    if(account.ReserveAccountsOnPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ReserveAccountsOnPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < account.ReserveAccountsOnPhone.Count; i++)
//        {
//                    // == [Ignoring] Value type (account.ReserveAccountsOnPhone) because it is not required. (nothing to validate) == 
//        }
//    }
//}

//        // == Value type (account.UbluxPartner) == 
//        {
//            int err1 = Validate_EnumType<UbluxPartner>(value: account.UbluxPartner, typeOfEnum: typeof(UbluxPartner));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxPartner", value: account.UbluxPartner);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxPartner>(value: account.UbluxPartner, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxPartner", value: account.UbluxPartner);
//            }            
//        }
//// == IList type (account.IdsCloudServicePbxs) ==
//{
//    if(account.IdsCloudServicePbxs is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsCloudServicePbxs", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(account.IdsCloudServicePbxs.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsCloudServicePbxs", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < account.IdsCloudServicePbxs.Count; i++)
//        {
//                    // == String type (account.IdsCloudServicePbxs) == 
//        {
//            var err = Validate_String(value: account.IdsCloudServicePbxs[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsCloudServicePbxs[{i}]", value: account.IdsCloudServicePbxs[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = account.MailingAddress;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddress");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = account.AccountSecrets;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.AccountSecrets", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AccountSecrets");
//                        foreach(var err in Validate_AccountSecrets(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (account.CompanyName) == 
//        {
//            var err = Validate_String(value: account.CompanyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CompanyName", value: account.CompanyName);
//            }
//        }
//        // == [Ignoring] Value type (account.HasGrantedSupportAccess) because it is not required. (nothing to validate) == 
//// == IList type (account.CountriesThatCanCallLocally) ==
//{
//    if(account.CountriesThatCanCallLocally is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountriesThatCanCallLocally", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(account.CountriesThatCanCallLocally.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.CountriesThatCanCallLocally", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < account.CountriesThatCanCallLocally.Count; i++)
//        {
//                    // == Value type (account.CountriesThatCanCallLocally) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: account.CountriesThatCanCallLocally[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountriesThatCanCallLocally[{i}]", value: account.CountriesThatCanCallLocally[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: account.CountriesThatCanCallLocally[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountriesThatCanCallLocally[{i}]", value: account.CountriesThatCanCallLocally[i]);
//            }            
//        }
//        }
//    }
//}

//// == IList type (account.CountriesThatCanCallInternationally) ==
//{
//    if(account.CountriesThatCanCallInternationally is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.CountriesThatCanCallInternationally", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < account.CountriesThatCanCallInternationally.Count; i++)
//        {
//                    // == Value type (account.CountriesThatCanCallInternationally) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: account.CountriesThatCanCallInternationally[i], typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountriesThatCanCallInternationally[{i}]", value: account.CountriesThatCanCallInternationally[i]);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        }
//    }
//}

//        // == Value type (account.Industry) == 
//        {
//            int err1 = Validate_EnumType<Industry>(value: account.Industry, typeOfEnum: typeof(Industry));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Industry", value: account.Industry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == [Ignoring] Value type (account.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (account.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (account.Id) == 
//        {
//            var err = Validate_String(value: account.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: account.Id);
//            }
//        }
//        // == Value type (account.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: account.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: account.DateCreated);
//            }            
//        }
//        // == Value type (account.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: account.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: account.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Email email)
//{
//            // == String type (email.Address) == 
//        {
//            var err = Validate_String(value: email.Address, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Address", value: email.Address);
//            }
//        }
//        // == [Ignoring] Value type (email.DateVerified) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//                // == Validate object ==
//                {
//                    var tmp = email.SessionWhenVerified;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SessionWhenVerified");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (email.IpAddress) == 
//        {
//            var err = Validate_String(value: email.IpAddress, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IpAddress", value: email.IpAddress);
//            }
//        }
//// == IList type (email.IdsTags) ==
//{
//    if(email.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < email.IdsTags.Count; i++)
//        {
//                    // == String type (email.IdsTags) == 
//        {
//            var err = Validate_String(value: email.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: email.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (email.IdAccount) == 
//        {
//            var err = Validate_String(value: email.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: email.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (email.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (email.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (email.Id) == 
//        {
//            var err = Validate_String(value: email.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: email.Id);
//            }
//        }
//        // == Value type (email.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: email.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: email.DateCreated);
//            }            
//        }
//        // == Value type (email.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: email.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: email.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is AgreementToTermsAndConditions agreementToTermsAndConditions)
//{
//                    // == Validate object ==
//                {
//                    var tmp = agreementToTermsAndConditions.UbluxSession;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.UbluxSession", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"UbluxSession");
//                        foreach(var err in Validate_UbluxSession(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (agreementToTermsAndConditions.Ip) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: agreementToTermsAndConditions.Ip);
//            }
//        }
//        // == String type (agreementToTermsAndConditions.HttpRequestHeaders) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.HttpRequestHeaders, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.HttpRequestHeaders", value: agreementToTermsAndConditions.HttpRequestHeaders);
//            }
//        }
//        // == Value type (agreementToTermsAndConditions.TermsAndConditionsCategory) == 
//        {
//            int err1 = Validate_EnumType<TermsAndConditionsCategory>(value: agreementToTermsAndConditions.TermsAndConditionsCategory, typeOfEnum: typeof(TermsAndConditionsCategory));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TermsAndConditionsCategory", value: agreementToTermsAndConditions.TermsAndConditionsCategory);
//            }
//            int err3 = Validate_ValueTypeRequired<TermsAndConditionsCategory>(value: agreementToTermsAndConditions.TermsAndConditionsCategory, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TermsAndConditionsCategory", value: agreementToTermsAndConditions.TermsAndConditionsCategory);
//            }            
//        }
//        // == [Ignoring] Value type (agreementToTermsAndConditions.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (agreementToTermsAndConditions.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (agreementToTermsAndConditions.Id) == 
//        {
//            var err = Validate_String(value: agreementToTermsAndConditions.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: agreementToTermsAndConditions.Id);
//            }
//        }
//        // == Value type (agreementToTermsAndConditions.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: agreementToTermsAndConditions.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: agreementToTermsAndConditions.DateCreated);
//            }            
//        }
//        // == Value type (agreementToTermsAndConditions.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: agreementToTermsAndConditions.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: agreementToTermsAndConditions.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is AirNetworksProvince airNetworksProvince)
//{
//            // == String type (airNetworksProvince.Name) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Name, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Name", value: airNetworksProvince.Name);
//            }
//        }
//// == IList type (airNetworksProvince.Populations) ==
//{
//    if(airNetworksProvince.Populations is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Populations", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(airNetworksProvince.Populations.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.Populations", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < airNetworksProvince.Populations.Count; i++)
//        {
//                    // == String type (airNetworksProvince.Populations) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Populations[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Populations[{i}]", value: airNetworksProvince.Populations[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (airNetworksProvince.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (airNetworksProvince.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (airNetworksProvince.Id) == 
//        {
//            var err = Validate_String(value: airNetworksProvince.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: airNetworksProvince.Id);
//            }
//        }
//        // == Value type (airNetworksProvince.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: airNetworksProvince.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: airNetworksProvince.DateCreated);
//            }            
//        }
//        // == Value type (airNetworksProvince.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: airNetworksProvince.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: airNetworksProvince.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Audio audio)
//{
//                    // == Validate object ==
//                {
//                    var tmp = audio.AudioSln;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.AudioSln", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioSln");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = audio.AudioMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = audio.AudioWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AudioWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (audio.FriendlyName) == 
//        {
//            var err = Validate_String(value: audio.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: audio.FriendlyName);
//            }
//        }
//        // == Value type (audio.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: audio.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: audio.DurationInSeconds);
//            }            
//        }
//        // == String type (audio.Description) == 
//        {
//            var err = Validate_String(value: audio.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: audio.Description);
//            }
//        }
//// == IList type (audio.IdsTags) ==
//{
//    if(audio.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < audio.IdsTags.Count; i++)
//        {
//                    // == String type (audio.IdsTags) == 
//        {
//            var err = Validate_String(value: audio.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: audio.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (audio.IdAccount) == 
//        {
//            var err = Validate_String(value: audio.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: audio.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (audio.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (audio.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (audio.Id) == 
//        {
//            var err = Validate_String(value: audio.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: audio.Id);
//            }
//        }
//        // == Value type (audio.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: audio.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: audio.DateCreated);
//            }            
//        }
//        // == Value type (audio.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: audio.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: audio.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is AutoProvisionReference autoProvisionReference)
//{
//            // == String type (autoProvisionReference.IdPhone) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.IdPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdPhone", value: autoProvisionReference.IdPhone);
//            }
//        }
//        // == String type (autoProvisionReference.Ip) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Ip, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Ip", value: autoProvisionReference.Ip);
//            }
//        }
//        // == String type (autoProvisionReference.UserAgent) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.UserAgent, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.UserAgent", value: autoProvisionReference.UserAgent);
//            }
//        }
//        // == String type (autoProvisionReference.Password) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Password, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Password", value: autoProvisionReference.Password);
//            }
//        }
//        // == String type (autoProvisionReference.AdminPassword) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.AdminPassword, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.AdminPassword", value: autoProvisionReference.AdminPassword);
//            }
//        }
//        // == String type (autoProvisionReference.IdUserThatAllowedAutoprovision) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.IdUserThatAllowedAutoprovision, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUserThatAllowedAutoprovision", value: autoProvisionReference.IdUserThatAllowedAutoprovision);
//            }
//        }
//        // == [Ignoring] Value type (autoProvisionReference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (autoProvisionReference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (autoProvisionReference.Id) == 
//        {
//            var err = Validate_String(value: autoProvisionReference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: autoProvisionReference.Id);
//            }
//        }
//        // == Value type (autoProvisionReference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: autoProvisionReference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: autoProvisionReference.DateCreated);
//            }            
//        }
//        // == Value type (autoProvisionReference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: autoProvisionReference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: autoProvisionReference.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is BlackListPhoneNumber blackListPhoneNumber)
//{
//            // == String type (blackListPhoneNumber.SearchIndex) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.SearchIndex, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.SearchIndex", value: blackListPhoneNumber.SearchIndex);
//            }
//        }
//        // == String type (blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudioToPlayIfCallIsBlocked", value: blackListPhoneNumber.IdAudioToPlayIfCallIsBlocked);
//            }
//        }
//        // == String type (blackListPhoneNumber.Number) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: blackListPhoneNumber.Number);
//            }
//        }
//        // == String type (blackListPhoneNumber.FriendlyName) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: blackListPhoneNumber.FriendlyName);
//            }
//        }
//// == IList type (blackListPhoneNumber.IdsTags) ==
//{
//    if(blackListPhoneNumber.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < blackListPhoneNumber.IdsTags.Count; i++)
//        {
//                    // == String type (blackListPhoneNumber.IdsTags) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: blackListPhoneNumber.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (blackListPhoneNumber.IdAccount) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: blackListPhoneNumber.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (blackListPhoneNumber.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (blackListPhoneNumber.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (blackListPhoneNumber.Id) == 
//        {
//            var err = Validate_String(value: blackListPhoneNumber.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: blackListPhoneNumber.Id);
//            }
//        }
//        // == Value type (blackListPhoneNumber.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: blackListPhoneNumber.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: blackListPhoneNumber.DateCreated);
//            }            
//        }
//        // == Value type (blackListPhoneNumber.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: blackListPhoneNumber.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: blackListPhoneNumber.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallerIdMask callerIdMask)
//{
//            // == String type (callerIdMask.RandomVerificationCode) == 
//        {
//            var err = Validate_String(value: callerIdMask.RandomVerificationCode, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.RandomVerificationCode", value: callerIdMask.RandomVerificationCode);
//            }
//        }
//        // == String type (callerIdMask.PhoneNumber) == 
//        {
//            var err = Validate_String(value: callerIdMask.PhoneNumber, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.PhoneNumber", value: callerIdMask.PhoneNumber);
//            }
//        }
//        // == String type (callerIdMask.FriendlyName) == 
//        {
//            var err = Validate_String(value: callerIdMask.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: callerIdMask.FriendlyName);
//            }
//        }
//// == IList type (callerIdMask.IdsTags) ==
//{
//    if(callerIdMask.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callerIdMask.IdsTags.Count; i++)
//        {
//                    // == String type (callerIdMask.IdsTags) == 
//        {
//            var err = Validate_String(value: callerIdMask.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callerIdMask.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callerIdMask.IdAccount) == 
//        {
//            var err = Validate_String(value: callerIdMask.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callerIdMask.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callerIdMask.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callerIdMask.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callerIdMask.Id) == 
//        {
//            var err = Validate_String(value: callerIdMask.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callerIdMask.Id);
//            }
//        }
//        // == Value type (callerIdMask.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callerIdMask.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callerIdMask.DateCreated);
//            }            
//        }
//        // == Value type (callerIdMask.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callerIdMask.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callerIdMask.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallFlowLogic callFlowLogic)
//{
//            // == String type (callFlowLogic.FriendlyName) == 
//        {
//            var err = Validate_String(value: callFlowLogic.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: callFlowLogic.FriendlyName);
//            }
//        }
//        // == String type (callFlowLogic.Description) == 
//        {
//            var err = Validate_String(value: callFlowLogic.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: callFlowLogic.Description);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callFlowLogic.Tree;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Tree", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Tree");
//                        foreach(var err in Validate_FlowNode(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callFlowLogic.IdsTags) ==
//{
//    if(callFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (callFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: callFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: callFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: callFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callFlowLogic.Id);
//            }
//        }
//        // == Value type (callFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (callFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callFlowLogic.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallIncomingToCallFlowLogic callIncomingToCallFlowLogic)
//{
//            // == String type (callIncomingToCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: callIncomingToCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToCallFlowLogic.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToCallFlowLogic.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToCallFlowLogic.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToCallFlowLogic.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToCallFlowLogic.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToCallFlowLogic.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToCallFlowLogic.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToCallFlowLogic.ChannelsTo) ==
//{
//    if(callIncomingToCallFlowLogic.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToCallFlowLogic.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToCallFlowLogic.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToCallFlowLogic.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToCallFlowLogic.IdContact);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToCallFlowLogic.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToCallFlowLogic.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.ChildCalls) ==
//{
//    if(callIncomingToCallFlowLogic.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToCallFlowLogic.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.From) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToCallFlowLogic.From);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToCallFlowLogic.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToCallFlowLogic.To) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToCallFlowLogic.To);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToCallFlowLogic.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.DigitsSent) ==
//{
//    if(callIncomingToCallFlowLogic.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToCallFlowLogic.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToCallFlowLogic.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToCallFlowLogic.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToCallFlowLogic.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.IdsParticipantLines) ==
//{
//    if(callIncomingToCallFlowLogic.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToCallFlowLogic.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToCallFlowLogic.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToCallFlowLogic.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToCallFlowLogic.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToCallFlowLogic.IdsTags) ==
//{
//    if(callIncomingToCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToCallFlowLogic.Id);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToCallFlowLogic.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallIncomingToExtension callIncomingToExtension)
//{
//            // == String type (callIncomingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callIncomingToExtension.IdExtension);
//            }
//        }
//        // == String type (callIncomingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callIncomingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callIncomingToExtension.IdsLinesThatRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callIncomingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callIncomingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callIncomingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callIncomingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToExtension.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToExtension.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToExtension.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToExtension.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToExtension.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToExtension.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToExtension.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToExtension.ChannelsTo) ==
//{
//    if(callIncomingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToExtension.IdContact);
//            }
//        }
//        // == String type (callIncomingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.ChildCalls) ==
//{
//    if(callIncomingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.From) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToExtension.From);
//            }
//        }
//        // == String type (callIncomingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToExtension.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToExtension.To) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToExtension.To);
//            }
//        }
//        // == String type (callIncomingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToExtension.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.DigitsSent) ==
//{
//    if(callIncomingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.IdsParticipantLines) ==
//{
//    if(callIncomingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToExtension.IdsTags) ==
//{
//    if(callIncomingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToExtension.Id);
//            }
//        }
//        // == Value type (callIncomingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToExtension.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallOutgoingToExtension callOutgoingToExtension)
//{
//            // == String type (callOutgoingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callOutgoingToExtension.IdExtension);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callOutgoingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callOutgoingToExtension.IdsLinesThatRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callOutgoingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callOutgoingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callOutgoingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callOutgoingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToExtension.ToCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToExtension.FromCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToExtension.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToExtension.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToExtension.ChannelsTo) ==
//{
//    if(callOutgoingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToExtension.IdContact);
//            }
//        }
//        // == String type (callOutgoingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.ChildCalls) ==
//{
//    if(callOutgoingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToExtension.From);
//            }
//        }
//        // == String type (callOutgoingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToExtension.FromReversed);
//            }
//        }
//        // == String type (callOutgoingToExtension.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToExtension.To);
//            }
//        }
//        // == String type (callOutgoingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToExtension.ToReversed);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.DigitsSent) ==
//{
//    if(callOutgoingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.IdsParticipantLines) ==
//{
//    if(callOutgoingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToExtension.IdsTags) ==
//{
//    if(callOutgoingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToExtension.Id);
//            }
//        }
//        // == Value type (callOutgoingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToExtension.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CallOutgoingToPSTN callOutgoingToPSTN)
//{
//            // == String type (callOutgoingToPSTN.IdTrunkTermination) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdTrunkTermination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkTermination", value: callOutgoingToPSTN.IdTrunkTermination);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToPSTN.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToPSTN.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToPSTN.ToInternationalFormat) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToInternationalFormat", value: callOutgoingToPSTN.ToInternationalFormat);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToPSTN.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToPSTN.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToPSTN.ChannelsTo) ==
//{
//    if(callOutgoingToPSTN.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToPSTN.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToPSTN.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToPSTN.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToPSTN.IdContact);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToPSTN.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToPSTN.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.ChildCalls) ==
//{
//    if(callOutgoingToPSTN.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToPSTN.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToPSTN.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToPSTN.From);
//            }
//        }
//        // == String type (callOutgoingToPSTN.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToPSTN.FromReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }            
//        }
//        // == String type (callOutgoingToPSTN.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToPSTN.To);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToPSTN.ToReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToPSTN.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.DigitsSent) ==
//{
//    if(callOutgoingToPSTN.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToPSTN.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToPSTN.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToPSTN.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToPSTN.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.IdsParticipantLines) ==
//{
//    if(callOutgoingToPSTN.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToPSTN.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToPSTN.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToPSTN.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToPSTN.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToPSTN.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToPSTN.IdsTags) ==
//{
//    if(callOutgoingToPSTN.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToPSTN.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToPSTN.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToPSTN.Id);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToPSTN.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToPSTN.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToPSTN.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CloudServicePbx cloudServicePbx)
//{
//            // == String type (cloudServicePbx.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdCloudServicePbxFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: cloudServicePbx.IdCloudServicePbxFailover);
//            }
//        }
//        // == Value type (cloudServicePbx.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServicePbx.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServicePbx.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.DisableMonitoring) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.HttpListenPort) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServicePbx.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServicePbx.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServicePbx.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServicePbx.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }            
//        }
//        // == String type (cloudServicePbx.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServicePbx.IdUser);
//            }
//        }
//        // == Value type (cloudServicePbx.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServicePbx.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServicePbx.Localnet);
//            }
//        }
//        // == String type (cloudServicePbx.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServicePbx.ExternalIp);
//            }
//        }
//        // == Value type (cloudServicePbx.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServicePbx.IsFailover);
//            }            
//        }
//        // == Value type (cloudServicePbx.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServicePbx.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServicePbx.InstanceId);
//            }
//        }
//        // == Value type (cloudServicePbx.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServicePbx.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServicePbx.Id) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServicePbx.Id);
//            }
//        }
//        // == Value type (cloudServicePbx.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServicePbx.DateCreated);
//            }            
//        }
//        // == Value type (cloudServicePbx.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServicePbx.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CloudServiceWebApp cloudServiceWebApp)
//{
//            // == Value type (cloudServiceWebApp.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdCloudServiceWebAppFailover) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdCloudServiceWebAppFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServiceWebAppFailover", value: cloudServiceWebApp.IdCloudServiceWebAppFailover);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebApp.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebApp.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebApp.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebApp.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebApp.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebApp.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebApp.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebApp.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebApp.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebApp.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebApp.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebApp.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebApp.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebApp.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebApp.Id);
//            }
//        }
//        // == Value type (cloudServiceWebApp.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebApp.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebApp.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CloudServiceWebHost cloudServiceWebHost)
//{
//            // == Value type (cloudServiceWebHost.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebHost.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebHost.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebHost.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebHost.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebHost.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebHost.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebHost.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebHost.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebHost.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebHost.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebHost.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebHost.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebHost.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebHost.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebHost.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebHost.Id);
//            }
//        }
//        // == Value type (cloudServiceWebHost.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebHost.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebHost.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Contact contact)
//{
//            // == String type (contact.IdUserOwner) == 
//        {
//            var err = Validate_String(value: contact.IdUserOwner, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUserOwner", value: contact.IdUserOwner);
//            }
//        }
//// == IList type (contact.ContactNumbers) ==
//{
//    if(contact.ContactNumbers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactNumbers", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.ContactNumbers.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.ContactNumbers[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactNumbers[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ContactNumbers[{i}]");
//                        foreach(var err in Validate_ContactNumber(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.ContactEmails) ==
//{
//    if(contact.ContactEmails is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactEmails", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.ContactEmails.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.ContactEmails[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ContactEmails[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ContactEmails[{i}]");
//                        foreach(var err in Validate_ContactEmail(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.MailingAddresses) ==
//{
//    if(contact.MailingAddresses is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddresses", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.MailingAddresses.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.MailingAddresses[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddresses[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddresses[{i}]");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (contact.FirstName) == 
//        {
//            var err = Validate_String(value: contact.FirstName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FirstName", value: contact.FirstName);
//            }
//        }
//        // == String type (contact.LastName) == 
//        {
//            var err = Validate_String(value: contact.LastName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.LastName", value: contact.LastName);
//            }
//        }
//        // == String type (contact.JobTitle) == 
//        {
//            var err = Validate_String(value: contact.JobTitle, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.JobTitle", value: contact.JobTitle);
//            }
//        }
//        // == String type (contact.Company) == 
//        {
//            var err = Validate_String(value: contact.Company, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Company", value: contact.Company);
//            }
//        }
//        // == String type (contact.Notes) == 
//        {
//            var err = Validate_String(value: contact.Notes, isNullable: true, isRequired: false, minLength: 0, maxLength: 4000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Notes", value: contact.Notes);
//            }
//        }
//// == IList type (contact.Variables) ==
//{
//    if(contact.Variables is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Variables", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.Variables.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = contact.Variables[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Variables[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Variables[{i}]");
//                        foreach(var err in Validate_Variable(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (contact.IdsTags) ==
//{
//    if(contact.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < contact.IdsTags.Count; i++)
//        {
//                    // == String type (contact.IdsTags) == 
//        {
//            var err = Validate_String(value: contact.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: contact.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (contact.IdAccount) == 
//        {
//            var err = Validate_String(value: contact.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: contact.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (contact.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (contact.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (contact.Id) == 
//        {
//            var err = Validate_String(value: contact.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: contact.Id);
//            }
//        }
//        // == Value type (contact.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: contact.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: contact.DateCreated);
//            }            
//        }
//        // == Value type (contact.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: contact.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: contact.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is CustomerInfo customerInfo)
//{
//                    // == Validate object ==
//                {
//                    var tmp = customerInfo.MailingAddress;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.MailingAddress", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"MailingAddress");
//                        foreach(var err in Validate_MailingAddress(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = customerInfo.AirNetworksCustomerInfo;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"AirNetworksCustomerInfo");
//                        foreach(var err in Validate_AirNetworksCustomerInfo(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (customerInfo.FullName) == 
//        {
//            var err = Validate_String(value: customerInfo.FullName, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FullName", value: customerInfo.FullName);
//            }
//        }
//// == IList type (customerInfo.IdsTags) ==
//{
//    if(customerInfo.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < customerInfo.IdsTags.Count; i++)
//        {
//                    // == String type (customerInfo.IdsTags) == 
//        {
//            var err = Validate_String(value: customerInfo.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: customerInfo.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (customerInfo.IdAccount) == 
//        {
//            var err = Validate_String(value: customerInfo.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: customerInfo.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (customerInfo.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (customerInfo.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (customerInfo.Id) == 
//        {
//            var err = Validate_String(value: customerInfo.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: customerInfo.Id);
//            }
//        }
//        // == Value type (customerInfo.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: customerInfo.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: customerInfo.DateCreated);
//            }            
//        }
//        // == Value type (customerInfo.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: customerInfo.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: customerInfo.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is ExtensionCallFlowLogic extensionCallFlowLogic)
//{
//            // == String type (extensionCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: extensionCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == String type (extensionCallFlowLogic.CallFlowLabel) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.CallFlowLabel, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallFlowLabel", value: extensionCallFlowLogic.CallFlowLabel);
//            }
//        }
//        // == String type (extensionCallFlowLogic.TimeZone) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.TimeZone, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: extensionCallFlowLogic.TimeZone);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }            
//        }
//        // == String type (extensionCallFlowLogic.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionCallFlowLogic.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionCallFlowLogic.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionCallFlowLogic.FriendlyName);
//            }
//        }
//        // == String type (extensionCallFlowLogic.Number) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionCallFlowLogic.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionCallFlowLogic.IdsTags) ==
//{
//    if(extensionCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (extensionCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionCallFlowLogic.Id);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (extensionCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionCallFlowLogic.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is ExtensionConference extensionConference)
//{
//    // == IList type (extensionConference.IdsAudiosWhenOneParticipant) ==
//{
//    if(extensionConference.IdsAudiosWhenOneParticipant is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudiosWhenOneParticipant", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsAudiosWhenOneParticipant.Count; i++)
//        {
//                    // == String type (extensionConference.IdsAudiosWhenOneParticipant) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsAudiosWhenOneParticipant[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudiosWhenOneParticipant[{i}]", value: extensionConference.IdsAudiosWhenOneParticipant[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (extensionConference.AnnounceParticipants) because it is not required. (nothing to validate) == 
//        // == String type (extensionConference.Pin) == 
//        {
//            var err = Validate_String(value: extensionConference.Pin, isNullable: true, isRequired: false, minLength: 0, maxLength: 20);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Pin", value: extensionConference.Pin);
//            }
//        }
//        // == Value type (extensionConference.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionConference.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionConference.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }            
//        }
//        // == String type (extensionConference.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionConference.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionConference.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionConference.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionConference.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionConference.FriendlyName);
//            }
//        }
//        // == String type (extensionConference.Number) == 
//        {
//            var err = Validate_String(value: extensionConference.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionConference.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionConference.IdsTags) ==
//{
//    if(extensionConference.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsTags.Count; i++)
//        {
//                    // == String type (extensionConference.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionConference.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionConference.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionConference.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionConference.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionConference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionConference.Id) == 
//        {
//            var err = Validate_String(value: extensionConference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionConference.Id);
//            }
//        }
//        // == Value type (extensionConference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionConference.DateCreated);
//            }            
//        }
//        // == Value type (extensionConference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionConference.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is ExtensionDial extensionDial)
//{
//    // == IList type (extensionDial.IdsLines) ==
//{
//    if(extensionDial.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionDial.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionDial.IdsLines.Count; i++)
//        {
//                    // == String type (extensionDial.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionDial.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionDial.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionDial.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionDial.RingTimeInSeconds);
//            }            
//        }
//        // == Value type (extensionDial.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionDial.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionDial.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }            
//        }
//        // == String type (extensionDial.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionDial.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionDial.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionDial.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionDial.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionDial.FriendlyName);
//            }
//        }
//        // == String type (extensionDial.Number) == 
//        {
//            var err = Validate_String(value: extensionDial.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionDial.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionDial.IdsTags) ==
//{
//    if(extensionDial.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionDial.IdsTags.Count; i++)
//        {
//                    // == String type (extensionDial.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionDial.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionDial.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionDial.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionDial.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionDial.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionDial.Id) == 
//        {
//            var err = Validate_String(value: extensionDial.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionDial.Id);
//            }
//        }
//        // == Value type (extensionDial.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionDial.DateCreated);
//            }            
//        }
//        // == Value type (extensionDial.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionDial.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is Tag tag)
//{
//            // == String type (tag.FriendlyName) == 
//        {
//            var err = Validate_String(value: tag.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: tag.FriendlyName);
//            }
//        }
//        // == Value type (tag.TagColor) == 
//        {
//            int err1 = Validate_EnumType<TagColor>(value: tag.TagColor, typeOfEnum: typeof(TagColor));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TagColor", value: tag.TagColor);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (tag.IdAccount) == 
//        {
//            var err = Validate_String(value: tag.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: tag.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (tag.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (tag.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (tag.Id) == 
//        {
//            var err = Validate_String(value: tag.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: tag.Id);
//            }
//        }
//        // == Value type (tag.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: tag.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: tag.DateCreated);
//            }            
//        }
//        // == Value type (tag.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: tag.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: tag.DateUpdated);
//            }            
//        }

//}
//else if (ubluxDocument is AiCallTranscription aiCallTranscription)
//{
//            // == String type (aiCallTranscription.IdCall) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCall", value: aiCallTranscription.IdCall);
//            }
//        }
//        // == String type (aiCallTranscription.TranscriptionLanguage) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.TranscriptionLanguage, isNullable: true, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TranscriptionLanguage", value: aiCallTranscription.TranscriptionLanguage);
//            }
//        }
//// == IList type (aiCallTranscription.Transcription) ==
//{
//    if(aiCallTranscription.Transcription is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Transcription", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiCallTranscription.Transcription.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = aiCallTranscription.Transcription[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Transcription[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Transcription[{i}]");
//                        foreach(var err in Validate_AiTranscription(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (aiCallTranscription.ErrorMessage) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: aiCallTranscription.ErrorMessage);
//            }
//        }
//// == IList type (aiCallTranscription.IdsTags) ==
//{
//    if(aiCallTranscription.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiCallTranscription.IdsTags.Count; i++)
//        {
//                    // == String type (aiCallTranscription.IdsTags) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: aiCallTranscription.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (aiCallTranscription.IdAccount) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: aiCallTranscription.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (aiCallTranscription.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiCallTranscription.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (aiCallTranscription.Id) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: aiCallTranscription.Id);
//            }
//        }
//        // == Value type (aiCallTranscription.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: aiCallTranscription.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: aiCallTranscription.DateCreated);
//            }            
//        }
//        // == Value type (aiCallTranscription.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: aiCallTranscription.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: aiCallTranscription.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Rule(Rule rule, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(rule)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (rule is RuleFax ruleFax)
//{
//            // == String type (ruleFax.IdEmail) == 
//        {
//            var err = Validate_String(value: ruleFax.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: ruleFax.IdEmail);
//            }
//        }

//}
//else if (rule is RulePhone rulePhone)
//{
//            // == String type (rulePhone.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: rulePhone.IdCallFlowLogic, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: rulePhone.IdCallFlowLogic);
//            }
//        }
//        // == String type (rulePhone.IdExtension) == 
//        {
//            var err = Validate_String(value: rulePhone.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: rulePhone.IdExtension);
//            }
//        }
//// == IList type (rulePhone.DaysOfWeek) ==
//{
//    if(rulePhone.DaysOfWeek is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DaysOfWeek", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(rulePhone.DaysOfWeek.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.DaysOfWeek", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < rulePhone.DaysOfWeek.Count; i++)
//        {
//                    // == Value type (rulePhone.DaysOfWeek) == 
//        {
//            int err1 = Validate_EnumType<DayOfWeek>(value: rulePhone.DaysOfWeek[i], typeOfEnum: typeof(DayOfWeek));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.DaysOfWeek[{i}]", value: rulePhone.DaysOfWeek[i]);
//            }
//            int err3 = Validate_ValueTypeRequired<DayOfWeek>(value: rulePhone.DaysOfWeek[i], isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DaysOfWeek[{i}]", value: rulePhone.DaysOfWeek[i]);
//            }            
//        }
//        }
//    }
//}


//}
//else if (rule is Rule)
//{
    
//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_RuleSms(RuleSms ruleSms, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(ruleSms)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (ruleSms.IdEmail) == 
//        {
//            var err = Validate_String(value: ruleSms.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: ruleSms.IdEmail);
//            }
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiTranscription(AiTranscription aiTranscription, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiTranscription)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (aiTranscription.Speaker) == 
//        {
//            var err = Validate_String(value: aiTranscription.Speaker, isNullable: false, isRequired: true, minLength: 0, maxLength: 20);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Speaker", value: aiTranscription.Speaker);
//            }
//        }
//        // == String type (aiTranscription.Text) == 
//        {
//            var err = Validate_String(value: aiTranscription.Text, isNullable: false, isRequired: true, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Text", value: aiTranscription.Text);
//            }
//        }
//        // == [Ignoring] Value type (aiTranscription.StartTime) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiTranscription.EndTime) because it is not required. (nothing to validate) == 


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoicemailForwarded(VoicemailForwarded voicemailForwarded, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voicemailForwarded)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.LineThatForwardedVoicemail;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.LineThatForwardedVoicemail", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"LineThatForwardedVoicemail");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.ExtensionForwarded;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ExtensionForwarded");
//                        foreach(var err in Validate_UbluxDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(voicemailForwarded.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: voicemailForwarded.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdEmail) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: voicemailForwarded.IdEmail);
//            }
//        }
//        // == Value type (voicemailForwarded.DurationInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Double>(value: voicemailForwarded.DurationInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DurationInSeconds", value: voicemailForwarded.DurationInSeconds);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailWav;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailWav");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = voicemailForwarded.VoicemailMp3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"VoicemailMp3");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == String type (voicemailForwarded.ErrorMessage) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: voicemailForwarded.ErrorMessage);
//            }
//        }
//// == IList type (voicemailForwarded.IdsTags) ==
//{
//    if(voicemailForwarded.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voicemailForwarded.IdsTags.Count; i++)
//        {
//                    // == String type (voicemailForwarded.IdsTags) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voicemailForwarded.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voicemailForwarded.IdAccount) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voicemailForwarded.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voicemailForwarded.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voicemailForwarded.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voicemailForwarded.Id) == 
//        {
//            var err = Validate_String(value: voicemailForwarded.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voicemailForwarded.Id);
//            }
//        }
//        // == Value type (voicemailForwarded.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voicemailForwarded.DateCreated);
//            }            
//        }
//        // == Value type (voicemailForwarded.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voicemailForwarded.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voicemailForwarded.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoipNumberAvailableForPurchase(VoipNumberAvailableForPurchase voipNumberAvailableForPurchase, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voipNumberAvailableForPurchase)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (voipNumberAvailableForPurchase.RulesPhone) ==
//{
//    if(voipNumberAvailableForPurchase.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesSms) ==
//{
//    if(voipNumberAvailableForPurchase.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesFax) ==
//{
//    if(voipNumberAvailableForPurchase.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RequiresCustomerInfo) because it is not required. (nothing to validate) == 
//        // == Value type (voipNumberAvailableForPurchase.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberAvailableForPurchase.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberAvailableForPurchase.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberAvailableForPurchase.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberAvailableForPurchase.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberAvailableForPurchase.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberAvailableForPurchase.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberAvailableForPurchase.ProviderId);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Number) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberAvailableForPurchase.Number);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberAvailableForPurchase.FriendlyName);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.Description) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberAvailableForPurchase.Description);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberAvailableForPurchase.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberAvailableForPurchase.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.City) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberAvailableForPurchase.City);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.State) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberAvailableForPurchase.State);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberAvailableForPurchase.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberAvailableForPurchase.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberAvailableForPurchase.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberAvailableForPurchase.TimeZone);
//            }
//        }
//// == IList type (voipNumberAvailableForPurchase.IdsTags) ==
//{
//    if(voipNumberAvailableForPurchase.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberAvailableForPurchase.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberAvailableForPurchase.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberAvailableForPurchase.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberAvailableForPurchase.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Id) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberAvailableForPurchase.Id);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberAvailableForPurchase.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberAvailableForPurchase.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoipNumberFax(VoipNumberFax voipNumberFax, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voipNumberFax)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (voipNumberFax.RulesPhone) ==
//{
//    if(voipNumberFax.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesSms) ==
//{
//    if(voipNumberFax.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesFax) ==
//{
//    if(voipNumberFax.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberFax.RulesFax.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesFax", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberFax.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberFax.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberFax.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberFax.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberFax.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberFax.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberFax.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberFax.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberFax.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberFax.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberFax.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberFax.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberFax.ProviderId);
//            }
//        }
//        // == String type (voipNumberFax.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberFax.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberFax.Number) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberFax.Number);
//            }
//        }
//        // == String type (voipNumberFax.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberFax.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberFax.FriendlyName);
//            }
//        }
//        // == String type (voipNumberFax.Description) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberFax.Description);
//            }
//        }
//        // == Value type (voipNumberFax.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberFax.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberFax.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }            
//        }
//        // == String type (voipNumberFax.City) == 
//        {
//            var err = Validate_String(value: voipNumberFax.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberFax.City);
//            }
//        }
//        // == String type (voipNumberFax.State) == 
//        {
//            var err = Validate_String(value: voipNumberFax.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberFax.State);
//            }
//        }
//        // == Value type (voipNumberFax.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberFax.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberFax.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberFax.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberFax.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberFax.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberFax.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberFax.TimeZone);
//            }
//        }
//// == IList type (voipNumberFax.IdsTags) ==
//{
//    if(voipNumberFax.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberFax.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberFax.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberFax.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberFax.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberFax.Id) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberFax.Id);
//            }
//        }
//        // == Value type (voipNumberFax.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberFax.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberFax.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberFax.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoipNumberPhone(VoipNumberPhone voipNumberPhone, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voipNumberPhone)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//// == IList type (voipNumberPhone.RulesPhone) ==
//{
//    if(voipNumberPhone.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberPhone.RulesPhone.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesPhone", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberPhone.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesSms) ==
//{
//    if(voipNumberPhone.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesFax) ==
//{
//    if(voipNumberPhone.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberPhone.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberPhone.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberPhone.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberPhone.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberPhone.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberPhone.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberPhone.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberPhone.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberPhone.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberPhone.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberPhone.ProviderId);
//            }
//        }
//        // == String type (voipNumberPhone.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberPhone.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Number) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberPhone.Number);
//            }
//        }
//        // == String type (voipNumberPhone.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberPhone.FriendlyName);
//            }
//        }
//        // == String type (voipNumberPhone.Description) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberPhone.Description);
//            }
//        }
//        // == Value type (voipNumberPhone.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberPhone.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberPhone.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }            
//        }
//        // == String type (voipNumberPhone.City) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberPhone.City);
//            }
//        }
//        // == String type (voipNumberPhone.State) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberPhone.State);
//            }
//        }
//        // == Value type (voipNumberPhone.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberPhone.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberPhone.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberPhone.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberPhone.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberPhone.TimeZone);
//            }
//        }
//// == IList type (voipNumberPhone.IdsTags) ==
//{
//    if(voipNumberPhone.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberPhone.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberPhone.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberPhone.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberPhone.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Id) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberPhone.Id);
//            }
//        }
//        // == Value type (voipNumberPhone.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberPhone.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberPhone.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberPhone.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoipProvider(VoipProvider voipProvider, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voipProvider)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (voipProvider.ProviderAccountId) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderAccountId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderAccountId", value: voipProvider.ProviderAccountId);
//            }
//        }
//        // == String type (voipProvider.ProviderOwnerAccountId) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderOwnerAccountId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderOwnerAccountId", value: voipProvider.ProviderOwnerAccountId);
//            }
//        }
//        // == String type (voipProvider.ProviderAccessToken) == 
//        {
//            var err = Validate_String(value: voipProvider.ProviderAccessToken, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderAccessToken", value: voipProvider.ProviderAccessToken);
//            }
//        }
//        // == Value type (voipProvider.UbluxPartner) == 
//        {
//            int err1 = Validate_EnumType<UbluxPartner>(value: voipProvider.UbluxPartner, typeOfEnum: typeof(UbluxPartner));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.UbluxPartner", value: voipProvider.UbluxPartner);
//            }
//            int err3 = Validate_ValueTypeRequired<UbluxPartner>(value: voipProvider.UbluxPartner, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.UbluxPartner", value: voipProvider.UbluxPartner);
//            }            
//        }
//        // == String type (voipProvider.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipProvider.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipProvider.FriendlyName);
//            }
//        }
//        // == String type (voipProvider.Status) == 
//        {
//            var err = Validate_String(value: voipProvider.Status, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Status", value: voipProvider.Status);
//            }
//        }
//        // == Value type (voipProvider.Country) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipProvider.Country, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Country", value: voipProvider.Country);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipProvider.Country, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Country", value: voipProvider.Country);
//            }            
//        }
//        // == Value type (voipProvider.VoipCompany) == 
//        {
//            int err1 = Validate_EnumType<VoipCompany>(value: voipProvider.VoipCompany, typeOfEnum: typeof(VoipCompany));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipCompany", value: voipProvider.VoipCompany);
//            }
//            int err3 = Validate_ValueTypeRequired<VoipCompany>(value: voipProvider.VoipCompany, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.VoipCompany", value: voipProvider.VoipCompany);
//            }            
//        }
//        // == [Ignoring] Value type (voipProvider.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipProvider.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipProvider.Id) == 
//        {
//            var err = Validate_String(value: voipProvider.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipProvider.Id);
//            }
//        }
//        // == Value type (voipProvider.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipProvider.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipProvider.DateCreated);
//            }            
//        }
//        // == Value type (voipProvider.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipProvider.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipProvider.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_WebHook(WebHook webHook, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(webHook)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == Value type (webHook.EventTrigger) == 
//        {
//            int err1 = Validate_EnumType<EventTrigger>(value: webHook.EventTrigger, typeOfEnum: typeof(EventTrigger));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.EventTrigger", value: webHook.EventTrigger);
//            }
//            int err3 = Validate_ValueTypeRequired<EventTrigger>(value: webHook.EventTrigger, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.EventTrigger", value: webHook.EventTrigger);
//            }            
//        }
//        // == String type (webHook.Url) == 
//        {
//            var err = Validate_String(value: webHook.Url, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Url", value: webHook.Url);
//            }
//        }
//// == IList type (webHook.Headers) ==
//{
//    if(webHook.Headers is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Headers", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < webHook.Headers.Count; i++)
//        {
//                    // == String type (webHook.Headers) == 
//        {
//            var err = Validate_String(value: webHook.Headers[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Headers[{i}]", value: webHook.Headers[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (webHook.IdsTags) ==
//{
//    if(webHook.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < webHook.IdsTags.Count; i++)
//        {
//                    // == String type (webHook.IdsTags) == 
//        {
//            var err = Validate_String(value: webHook.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: webHook.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (webHook.IdAccount) == 
//        {
//            var err = Validate_String(value: webHook.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: webHook.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (webHook.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (webHook.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (webHook.Id) == 
//        {
//            var err = Validate_String(value: webHook.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: webHook.Id);
//            }
//        }
//        // == Value type (webHook.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: webHook.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: webHook.DateCreated);
//            }            
//        }
//        // == Value type (webHook.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: webHook.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: webHook.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_StoredFileReference(StoredFileReference storedFileReference, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(storedFileReference)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (storedFileReference.IdDocument) == 
//        {
//            var err = Validate_String(value: storedFileReference.IdDocument, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdDocument", value: storedFileReference.IdDocument);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = storedFileReference.StoredFile;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.StoredFile", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"StoredFile");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (storedFileReference.IsBackup) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (storedFileReference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (storedFileReference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (storedFileReference.Id) == 
//        {
//            var err = Validate_String(value: storedFileReference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: storedFileReference.Id);
//            }
//        }
//        // == Value type (storedFileReference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: storedFileReference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: storedFileReference.DateCreated);
//            }            
//        }
//        // == Value type (storedFileReference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: storedFileReference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: storedFileReference.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Tag(Tag tag, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(tag)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (tag.FriendlyName) == 
//        {
//            var err = Validate_String(value: tag.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: tag.FriendlyName);
//            }
//        }
//        // == Value type (tag.TagColor) == 
//        {
//            int err1 = Validate_EnumType<TagColor>(value: tag.TagColor, typeOfEnum: typeof(TagColor));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TagColor", value: tag.TagColor);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (tag.IdAccount) == 
//        {
//            var err = Validate_String(value: tag.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: tag.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (tag.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (tag.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (tag.Id) == 
//        {
//            var err = Validate_String(value: tag.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: tag.Id);
//            }
//        }
//        // == Value type (tag.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: tag.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: tag.DateCreated);
//            }            
//        }
//        // == Value type (tag.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: tag.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: tag.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_AiCallTranscription(AiCallTranscription aiCallTranscription, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(aiCallTranscription)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//        // == String type (aiCallTranscription.IdCall) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCall", value: aiCallTranscription.IdCall);
//            }
//        }
//        // == String type (aiCallTranscription.TranscriptionLanguage) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.TranscriptionLanguage, isNullable: true, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TranscriptionLanguage", value: aiCallTranscription.TranscriptionLanguage);
//            }
//        }
//// == IList type (aiCallTranscription.Transcription) ==
//{
//    if(aiCallTranscription.Transcription is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Transcription", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiCallTranscription.Transcription.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = aiCallTranscription.Transcription[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.Transcription[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Transcription[{i}]");
//                        foreach(var err in Validate_AiTranscription(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (aiCallTranscription.ErrorMessage) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: aiCallTranscription.ErrorMessage);
//            }
//        }
//// == IList type (aiCallTranscription.IdsTags) ==
//{
//    if(aiCallTranscription.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < aiCallTranscription.IdsTags.Count; i++)
//        {
//                    // == String type (aiCallTranscription.IdsTags) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: aiCallTranscription.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (aiCallTranscription.IdAccount) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: aiCallTranscription.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (aiCallTranscription.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (aiCallTranscription.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (aiCallTranscription.Id) == 
//        {
//            var err = Validate_String(value: aiCallTranscription.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: aiCallTranscription.Id);
//            }
//        }
//        // == Value type (aiCallTranscription.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: aiCallTranscription.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: aiCallTranscription.DateCreated);
//            }            
//        }
//        // == Value type (aiCallTranscription.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: aiCallTranscription.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: aiCallTranscription.DateUpdated);
//            }            
//        }


//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_CloudService(CloudService cloudService, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(cloudService)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (cloudService is CloudServicePbx cloudServicePbx)
//{
//            // == String type (cloudServicePbx.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdCloudServicePbxFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: cloudServicePbx.IdCloudServicePbxFailover);
//            }
//        }
//        // == Value type (cloudServicePbx.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServicePbx.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServicePbx.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServicePbx.CloudServiceType);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.DisableMonitoring) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.HttpListenPort) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServicePbx.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServicePbx.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServicePbx.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServicePbx.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServicePbx.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServicePbx.ProviderType);
//            }            
//        }
//        // == String type (cloudServicePbx.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServicePbx.IdUser);
//            }
//        }
//        // == Value type (cloudServicePbx.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServicePbx.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServicePbx.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServicePbx.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServicePbx.Localnet);
//            }
//        }
//        // == String type (cloudServicePbx.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServicePbx.ExternalIp);
//            }
//        }
//        // == Value type (cloudServicePbx.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServicePbx.IsFailover);
//            }            
//        }
//        // == Value type (cloudServicePbx.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServicePbx.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServicePbx.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServicePbx.InstanceId);
//            }
//        }
//        // == Value type (cloudServicePbx.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServicePbx.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServicePbx.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServicePbx.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServicePbx.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServicePbx.Id) == 
//        {
//            var err = Validate_String(value: cloudServicePbx.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServicePbx.Id);
//            }
//        }
//        // == Value type (cloudServicePbx.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServicePbx.DateCreated);
//            }            
//        }
//        // == Value type (cloudServicePbx.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServicePbx.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServicePbx.DateUpdated);
//            }            
//        }

//}
//else if (cloudService is CloudServiceWebApp cloudServiceWebApp)
//{
//            // == Value type (cloudServiceWebApp.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebApp.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebApp.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdCloudServiceWebAppFailover) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdCloudServiceWebAppFailover, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServiceWebAppFailover", value: cloudServiceWebApp.IdCloudServiceWebAppFailover);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebApp.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebApp.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebApp.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebApp.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebApp.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebApp.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebApp.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebApp.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebApp.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebApp.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebApp.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebApp.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebApp.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebApp.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebApp.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebApp.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebApp.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebApp.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebApp.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebApp.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebApp.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebApp.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebApp.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebApp.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebApp.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebApp.Id);
//            }
//        }
//        // == Value type (cloudServiceWebApp.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebApp.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebApp.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebApp.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebApp.DateUpdated);
//            }            
//        }

//}
//else if (cloudService is CloudServiceWebHost cloudServiceWebHost)
//{
//            // == Value type (cloudServiceWebHost.CloudServiceType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, typeOfEnum: typeof(CloudServiceType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceType>(value: cloudServiceWebHost.CloudServiceType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CloudServiceType", value: cloudServiceWebHost.CloudServiceType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.ProviderInstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderInstanceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderInstanceId", value: cloudServiceWebHost.ProviderInstanceId);
//            }
//        }
//        // == String type (cloudServiceWebHost.ProviderRegion) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ProviderRegion, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderRegion", value: cloudServiceWebHost.ProviderRegion);
//            }
//        }
//        // == Value type (cloudServiceWebHost.ProviderType) == 
//        {
//            int err1 = Validate_EnumType<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, typeOfEnum: typeof(CloudServiceProviderType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }
//            int err3 = Validate_ValueTypeRequired<CloudServiceProviderType>(value: cloudServiceWebHost.ProviderType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ProviderType", value: cloudServiceWebHost.ProviderType);
//            }            
//        }
//        // == String type (cloudServiceWebHost.IdUser) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.IdUser, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdUser", value: cloudServiceWebHost.IdUser);
//            }
//        }
//        // == Value type (cloudServiceWebHost.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: cloudServiceWebHost.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: cloudServiceWebHost.CountryIsoCode);
//            }            
//        }
//        // == String type (cloudServiceWebHost.Localnet) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Localnet, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Localnet", value: cloudServiceWebHost.Localnet);
//            }
//        }
//        // == String type (cloudServiceWebHost.ExternalIp) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.ExternalIp, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ExternalIp", value: cloudServiceWebHost.ExternalIp);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsFailover) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsFailover, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsFailover", value: cloudServiceWebHost.IsFailover);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.Nat) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.Nat, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Nat", value: cloudServiceWebHost.Nat);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.IsHealthy) because it is not required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.InstanceId) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.InstanceId, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.InstanceId", value: cloudServiceWebHost.InstanceId);
//            }
//        }
//        // == Value type (cloudServiceWebHost.IsTest) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: cloudServiceWebHost.IsTest, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTest", value: cloudServiceWebHost.IsTest);
//            }            
//        }
//        // == [Ignoring] Value type (cloudServiceWebHost.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (cloudServiceWebHost.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (cloudServiceWebHost.Id) == 
//        {
//            var err = Validate_String(value: cloudServiceWebHost.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: cloudServiceWebHost.Id);
//            }
//        }
//        // == Value type (cloudServiceWebHost.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: cloudServiceWebHost.DateCreated);
//            }            
//        }
//        // == Value type (cloudServiceWebHost.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: cloudServiceWebHost.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: cloudServiceWebHost.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Extension(Extension extension, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(extension)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (extension is ExtensionCallFlowLogic extensionCallFlowLogic)
//{
//            // == String type (extensionCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: extensionCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == String type (extensionCallFlowLogic.CallFlowLabel) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.CallFlowLabel, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.CallFlowLabel", value: extensionCallFlowLogic.CallFlowLabel);
//            }
//        }
//        // == String type (extensionCallFlowLogic.TimeZone) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.TimeZone, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: extensionCallFlowLogic.TimeZone);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionCallFlowLogic.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionCallFlowLogic.ExtensionType);
//            }            
//        }
//        // == String type (extensionCallFlowLogic.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionCallFlowLogic.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionCallFlowLogic.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionCallFlowLogic.FriendlyName);
//            }
//        }
//        // == String type (extensionCallFlowLogic.Number) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionCallFlowLogic.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionCallFlowLogic.IdsTags) ==
//{
//    if(extensionCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (extensionCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: extensionCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionCallFlowLogic.Id);
//            }
//        }
//        // == Value type (extensionCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (extensionCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionCallFlowLogic.DateUpdated);
//            }            
//        }

//}
//else if (extension is ExtensionConference extensionConference)
//{
//    // == IList type (extensionConference.IdsAudiosWhenOneParticipant) ==
//{
//    if(extensionConference.IdsAudiosWhenOneParticipant is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudiosWhenOneParticipant", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsAudiosWhenOneParticipant.Count; i++)
//        {
//                    // == String type (extensionConference.IdsAudiosWhenOneParticipant) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsAudiosWhenOneParticipant[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudiosWhenOneParticipant[{i}]", value: extensionConference.IdsAudiosWhenOneParticipant[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (extensionConference.AnnounceParticipants) because it is not required. (nothing to validate) == 
//        // == String type (extensionConference.Pin) == 
//        {
//            var err = Validate_String(value: extensionConference.Pin, isNullable: true, isRequired: false, minLength: 0, maxLength: 20);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Pin", value: extensionConference.Pin);
//            }
//        }
//        // == Value type (extensionConference.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionConference.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionConference.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionConference.ExtensionType);
//            }            
//        }
//        // == String type (extensionConference.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionConference.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionConference.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionConference.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionConference.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionConference.FriendlyName);
//            }
//        }
//        // == String type (extensionConference.Number) == 
//        {
//            var err = Validate_String(value: extensionConference.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionConference.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionConference.IdsTags) ==
//{
//    if(extensionConference.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionConference.IdsTags.Count; i++)
//        {
//                    // == String type (extensionConference.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionConference.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionConference.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionConference.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionConference.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionConference.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionConference.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionConference.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionConference.Id) == 
//        {
//            var err = Validate_String(value: extensionConference.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionConference.Id);
//            }
//        }
//        // == Value type (extensionConference.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionConference.DateCreated);
//            }            
//        }
//        // == Value type (extensionConference.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionConference.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionConference.DateUpdated);
//            }            
//        }

//}
//else if (extension is ExtensionQueue extensionQueue)
//{
//    // == IList type (extensionQueue.IdsAudios) ==
//{
//    if(extensionQueue.IdsAudios is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsAudios", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsAudios.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsAudios) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsAudios[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsAudios[{i}]", value: extensionQueue.IdsAudios[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfItTakesToLongToBeAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfItTakesToLongToBeAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfItTakesToLongToBeAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (extensionQueue.RingInUse) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.QueueTimeoutInMinutes) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.QueueTimeoutInMinutes, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.QueueTimeoutInMinutes", value: extensionQueue.QueueTimeoutInMinutes);
//            }            
//        }
//        // == [Ignoring] Value type (extensionQueue.AnnouncePosition) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceHoldTime) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.AnnounceFrequency) because it is not required. (nothing to validate) == 
//        // == Value type (extensionQueue.RetryFrequency) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RetryFrequency, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RetryFrequency", value: extensionQueue.RetryFrequency);
//            }            
//        }
//        // == Value type (extensionQueue.RingStrategy) == 
//        {
//            int err1 = Validate_EnumType<QueueRingStrategy>(value: extensionQueue.RingStrategy, typeOfEnum: typeof(QueueRingStrategy));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.RingStrategy", value: extensionQueue.RingStrategy);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (extensionQueue.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionQueue.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionQueue.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionQueue.ExtensionType);
//            }            
//        }
//// == IList type (extensionQueue.IdsLines) ==
//{
//    if(extensionQueue.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionQueue.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionQueue.IdsLines.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionQueue.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionQueue.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionQueue.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionQueue.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionQueue.RingTimeInSeconds);
//            }            
//        }
//        // == String type (extensionQueue.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionQueue.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionQueue.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionQueue.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionQueue.FriendlyName);
//            }
//        }
//        // == String type (extensionQueue.Number) == 
//        {
//            var err = Validate_String(value: extensionQueue.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionQueue.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionQueue.IdsTags) ==
//{
//    if(extensionQueue.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionQueue.IdsTags.Count; i++)
//        {
//                    // == String type (extensionQueue.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionQueue.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionQueue.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionQueue.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionQueue.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionQueue.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionQueue.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionQueue.Id) == 
//        {
//            var err = Validate_String(value: extensionQueue.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionQueue.Id);
//            }
//        }
//        // == Value type (extensionQueue.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionQueue.DateCreated);
//            }            
//        }
//        // == Value type (extensionQueue.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionQueue.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionQueue.DateUpdated);
//            }            
//        }

//}
//else if (extension is ExtensionDial extensionDial)
//{
//    // == IList type (extensionDial.IdsLines) ==
//{
//    if(extensionDial.IdsLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(extensionDial.IdsLines.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.IdsLines", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < extensionDial.IdsLines.Count; i++)
//        {
//                    // == String type (extensionDial.IdsLines) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsLines[i], isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLines[{i}]", value: extensionDial.IdsLines[i]);
//            }
//        }
//        }
//    }
//}

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.EventActionToExecuteIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"EventActionToExecuteIfNotAnswered");
//                        foreach(var err in Validate_EventAction(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = extensionDial.SendEmailNotificationIfNotAnswered;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"SendEmailNotificationIfNotAnswered");
//                        foreach(var err in Validate_SendEmailNotificationIfNotAnswered(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == Value type (extensionDial.RingTimeInSeconds) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: extensionDial.RingTimeInSeconds, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.RingTimeInSeconds", value: extensionDial.RingTimeInSeconds);
//            }            
//        }
//        // == Value type (extensionDial.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionDial.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionDial.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionDial.ExtensionType);
//            }            
//        }
//        // == String type (extensionDial.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionDial.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionDial.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionDial.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionDial.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionDial.FriendlyName);
//            }
//        }
//        // == String type (extensionDial.Number) == 
//        {
//            var err = Validate_String(value: extensionDial.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionDial.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionDial.IdsTags) ==
//{
//    if(extensionDial.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionDial.IdsTags.Count; i++)
//        {
//                    // == String type (extensionDial.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionDial.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionDial.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionDial.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionDial.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionDial.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionDial.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionDial.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionDial.Id) == 
//        {
//            var err = Validate_String(value: extensionDial.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionDial.Id);
//            }
//        }
//        // == Value type (extensionDial.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionDial.DateCreated);
//            }            
//        }
//        // == Value type (extensionDial.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionDial.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionDial.DateUpdated);
//            }            
//        }

//}
//else if (extension is ExtensionVoicemail extensionVoicemail)
//{
//            // == String type (extensionVoicemail.IdAudio) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAudio, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAudio", value: extensionVoicemail.IdAudio);
//            }
//        }
//// == IList type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) ==
//{
//    if(extensionVoicemail.IdsLinesThatCanListenToVoicemail is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsLinesThatCanListenToVoicemail.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsLinesThatCanListenToVoicemail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatCanListenToVoicemail[{i}]", value: extensionVoicemail.IdsLinesThatCanListenToVoicemail[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdEmail) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdEmail, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdEmail", value: extensionVoicemail.IdEmail);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeech) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeech, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeech", value: extensionVoicemail.TextToSpeech);
//            }
//        }
//        // == String type (extensionVoicemail.TextToSpeechVoiceId) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.TextToSpeechVoiceId, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TextToSpeechVoiceId", value: extensionVoicemail.TextToSpeechVoiceId);
//            }
//        }
//        // == Value type (extensionVoicemail.ExtensionType) == 
//        {
//            int err1 = Validate_EnumType<ExtensionType>(value: extensionVoicemail.ExtensionType, typeOfEnum: typeof(ExtensionType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }
//            int err3 = Validate_ValueTypeRequired<ExtensionType>(value: extensionVoicemail.ExtensionType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ExtensionType", value: extensionVoicemail.ExtensionType);
//            }            
//        }
//        // == String type (extensionVoicemail.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: extensionVoicemail.IdMusicOnHoldGroup);
//            }
//        }
//        // == String type (extensionVoicemail.FriendlyName) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: extensionVoicemail.FriendlyName);
//            }
//        }
//        // == String type (extensionVoicemail.Number) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: extensionVoicemail.Number);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.InjectExtensionNameToCallerId) because it is not required. (nothing to validate) == 
//// == IList type (extensionVoicemail.IdsTags) ==
//{
//    if(extensionVoicemail.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < extensionVoicemail.IdsTags.Count; i++)
//        {
//                    // == String type (extensionVoicemail.IdsTags) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: extensionVoicemail.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (extensionVoicemail.IdAccount) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: extensionVoicemail.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (extensionVoicemail.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (extensionVoicemail.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (extensionVoicemail.Id) == 
//        {
//            var err = Validate_String(value: extensionVoicemail.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: extensionVoicemail.Id);
//            }
//        }
//        // == Value type (extensionVoicemail.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: extensionVoicemail.DateCreated);
//            }            
//        }
//        // == Value type (extensionVoicemail.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: extensionVoicemail.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: extensionVoicemail.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_Call(Call call, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(call)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (call is CallIncomingToCallFlowLogic callIncomingToCallFlowLogic)
//{
//            // == String type (callIncomingToCallFlowLogic.IdCallFlowLogic) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallFlowLogic, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallFlowLogic", value: callIncomingToCallFlowLogic.IdCallFlowLogic);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToCallFlowLogic.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToCallFlowLogic.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToCallFlowLogic.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToCallFlowLogic.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToCallFlowLogic.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToCallFlowLogic.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToCallFlowLogic.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToCallFlowLogic.ChannelsTo) ==
//{
//    if(callIncomingToCallFlowLogic.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToCallFlowLogic.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToCallFlowLogic.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToCallFlowLogic.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToCallFlowLogic.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToCallFlowLogic.IdContact);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToCallFlowLogic.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToCallFlowLogic.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.ChildCalls) ==
//{
//    if(callIncomingToCallFlowLogic.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToCallFlowLogic.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.From) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToCallFlowLogic.From);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToCallFlowLogic.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToCallFlowLogic.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToCallFlowLogic.To) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToCallFlowLogic.To);
//            }
//        }
//        // == String type (callIncomingToCallFlowLogic.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToCallFlowLogic.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToCallFlowLogic.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToCallFlowLogic.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToCallFlowLogic.DigitsSent) ==
//{
//    if(callIncomingToCallFlowLogic.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToCallFlowLogic.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToCallFlowLogic.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToCallFlowLogic.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToCallFlowLogic.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToCallFlowLogic.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToCallFlowLogic.IdsParticipantLines) ==
//{
//    if(callIncomingToCallFlowLogic.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToCallFlowLogic.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToCallFlowLogic.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToCallFlowLogic.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToCallFlowLogic.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToCallFlowLogic.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToCallFlowLogic.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToCallFlowLogic.IdsTags) ==
//{
//    if(callIncomingToCallFlowLogic.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToCallFlowLogic.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToCallFlowLogic.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToCallFlowLogic.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToCallFlowLogic.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToCallFlowLogic.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToCallFlowLogic.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToCallFlowLogic.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToCallFlowLogic.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToCallFlowLogic.Id);
//            }
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToCallFlowLogic.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToCallFlowLogic.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToCallFlowLogic.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToCallFlowLogic.DateUpdated);
//            }            
//        }

//}
//else if (call is CallIncomingToExtension callIncomingToExtension)
//{
//            // == String type (callIncomingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callIncomingToExtension.IdExtension);
//            }
//        }
//        // == String type (callIncomingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callIncomingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callIncomingToExtension.IdsLinesThatRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callIncomingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callIncomingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callIncomingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callIncomingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callIncomingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callIncomingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callIncomingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callIncomingToExtension.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: callIncomingToExtension.IdVoipProvider);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoipNumberPhone) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoipNumberPhone, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipNumberPhone", value: callIncomingToExtension.IdVoipNumberPhone);
//            }
//        }
//        // == String type (callIncomingToExtension.FromInternationalFormat) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromInternationalFormat", value: callIncomingToExtension.FromInternationalFormat);
//            }
//        }
//        // == String type (callIncomingToExtension.ForwardedBy) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ForwardedBy, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ForwardedBy", value: callIncomingToExtension.ForwardedBy);
//            }
//        }
//        // == String type (callIncomingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callIncomingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callIncomingToExtension.ChannelsTo) ==
//{
//    if(callIncomingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callIncomingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callIncomingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callIncomingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callIncomingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callIncomingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callIncomingToExtension.IdContact);
//            }
//        }
//        // == String type (callIncomingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callIncomingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callIncomingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callIncomingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.ChildCalls) ==
//{
//    if(callIncomingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callIncomingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callIncomingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callIncomingToExtension.From) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callIncomingToExtension.From);
//            }
//        }
//        // == String type (callIncomingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callIncomingToExtension.FromReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callIncomingToExtension.FromCountry);
//            }            
//        }
//        // == String type (callIncomingToExtension.To) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callIncomingToExtension.To);
//            }
//        }
//        // == String type (callIncomingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callIncomingToExtension.ToReversed);
//            }
//        }
//        // == Value type (callIncomingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callIncomingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callIncomingToExtension.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callIncomingToExtension.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callIncomingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callIncomingToExtension.DigitsSent) ==
//{
//    if(callIncomingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callIncomingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callIncomingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callIncomingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callIncomingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callIncomingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callIncomingToExtension.IdsParticipantLines) ==
//{
//    if(callIncomingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callIncomingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callIncomingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callIncomingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callIncomingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callIncomingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callIncomingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callIncomingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callIncomingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callIncomingToExtension.IdsTags) ==
//{
//    if(callIncomingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callIncomingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callIncomingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callIncomingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callIncomingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callIncomingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callIncomingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callIncomingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callIncomingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callIncomingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callIncomingToExtension.Id);
//            }
//        }
//        // == Value type (callIncomingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callIncomingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callIncomingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callIncomingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callIncomingToExtension.DateUpdated);
//            }            
//        }

//}
//else if (call is CallOutgoingToExtension callOutgoingToExtension)
//{
//            // == String type (callOutgoingToExtension.IdExtension) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdExtension, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdExtension", value: callOutgoingToExtension.IdExtension);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdLineThatAnswered) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatAnswered, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatAnswered", value: callOutgoingToExtension.IdLineThatAnswered);
//            }
//        }
//// == IList type (callOutgoingToExtension.IdsLinesThatRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatRing[{i}]", value: callOutgoingToExtension.IdsLinesThatRing[i]);
//            }
//        }
//        }
//    }
//}

//// == IList type (callOutgoingToExtension.IdsLinesThatDidNotRing) ==
//{
//    if(callOutgoingToExtension.IdsLinesThatDidNotRing is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsLinesThatDidNotRing", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsLinesThatDidNotRing.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsLinesThatDidNotRing) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsLinesThatDidNotRing[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsLinesThatDidNotRing[{i}]", value: callOutgoingToExtension.IdsLinesThatDidNotRing[i]);
//            }
//        }
//        }
//    }
//}

//        // == Value type (callOutgoingToExtension.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToExtension.ToCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToExtension.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToExtension.FromCountry);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToExtension.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToExtension.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToExtension.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToExtension.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToExtension.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToExtension.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToExtension.ChannelsTo) ==
//{
//    if(callOutgoingToExtension.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToExtension.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToExtension.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToExtension.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToExtension.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToExtension.IdContact);
//            }
//        }
//        // == String type (callOutgoingToExtension.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToExtension.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToExtension.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToExtension.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.ChildCalls) ==
//{
//    if(callOutgoingToExtension.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToExtension.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToExtension.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToExtension.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToExtension.From);
//            }
//        }
//        // == String type (callOutgoingToExtension.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToExtension.FromReversed);
//            }
//        }
//        // == String type (callOutgoingToExtension.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToExtension.To);
//            }
//        }
//        // == String type (callOutgoingToExtension.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToExtension.ToReversed);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToExtension.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToExtension.DigitsSent) ==
//{
//    if(callOutgoingToExtension.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToExtension.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToExtension.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToExtension.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToExtension.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToExtension.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToExtension.IdsParticipantLines) ==
//{
//    if(callOutgoingToExtension.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToExtension.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToExtension.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToExtension.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToExtension.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToExtension.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToExtension.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToExtension.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToExtension.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToExtension.IdsTags) ==
//{
//    if(callOutgoingToExtension.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToExtension.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToExtension.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToExtension.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToExtension.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToExtension.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToExtension.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToExtension.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToExtension.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToExtension.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToExtension.Id);
//            }
//        }
//        // == Value type (callOutgoingToExtension.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToExtension.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToExtension.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToExtension.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToExtension.DateUpdated);
//            }            
//        }

//}
//else if (call is CallOutgoingToPSTN callOutgoingToPSTN)
//{
//            // == String type (callOutgoingToPSTN.IdTrunkTermination) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdTrunkTermination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkTermination", value: callOutgoingToPSTN.IdTrunkTermination);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.CallType) == 
//        {
//            int err1 = Validate_EnumType<CallType>(value: callOutgoingToPSTN.CallType, typeOfEnum: typeof(CallType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallType", value: callOutgoingToPSTN.CallType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (callOutgoingToPSTN.ToInternationalFormat) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToInternationalFormat, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToInternationalFormat", value: callOutgoingToPSTN.ToInternationalFormat);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdLineThatInitiatedCall) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdLineThatInitiatedCall, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdLineThatInitiatedCall", value: callOutgoingToPSTN.IdLineThatInitiatedCall);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ChannelFrom) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelFrom, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelFrom", value: callOutgoingToPSTN.ChannelFrom);
//            }
//        }
//// == IList type (callOutgoingToPSTN.ChannelsTo) ==
//{
//    if(callOutgoingToPSTN.ChannelsTo is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelsTo", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChannelsTo.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.ChannelsTo) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelsTo[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelsTo[{i}]", value: callOutgoingToPSTN.ChannelsTo[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.ChannelToAnswer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ChannelToAnswer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ChannelToAnswer", value: callOutgoingToPSTN.ChannelToAnswer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdVoicemail) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdVoicemail, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoicemail", value: callOutgoingToPSTN.IdVoicemail);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCallThatTerminatedThisCallDoToAttendantTransfer", value: callOutgoingToPSTN.IdCallThatTerminatedThisCallDoToAttendantTransfer);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdContact) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdContact, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdContact", value: callOutgoingToPSTN.IdContact);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ContactFullName) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ContactFullName, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ContactFullName", value: callOutgoingToPSTN.ContactFullName);
//            }
//        }
//        // == String type (callOutgoingToPSTN.IdAiCallTranscription) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAiCallTranscription, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAiCallTranscription", value: callOutgoingToPSTN.IdAiCallTranscription);
//            }
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChannelVariables;
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChannelVariables", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChannelVariables");
//                        foreach(var err in Validate_ChannelVariables(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.ChildCalls) ==
//{
//    if(callOutgoingToPSTN.ChildCalls is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.ChildCalls.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.ChildCalls[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.ChildCalls[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"ChildCalls[{i}]");
//                        foreach(var err in Validate_ChildCall(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.DialStatus) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DialStatus, isNullable: false, isRequired: false, minLength: 0, maxLength: 50);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DialStatus", value: callOutgoingToPSTN.DialStatus);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.SecondsItTookToAnswer) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.TimesWhenCallPlacedOnHold) ==
//{
//    if(callOutgoingToPSTN.TimesWhenCallPlacedOnHold is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.TimesWhenCallPlacedOnHold.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.TimesWhenCallPlacedOnHold[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.TimesWhenCallPlacedOnHold[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"TimesWhenCallPlacedOnHold[{i}]");
//                        foreach(var err in Validate_TimeWhenCallPlacedOnHold(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.From) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.From, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.From", value: callOutgoingToPSTN.From);
//            }
//        }
//        // == String type (callOutgoingToPSTN.FromReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.FromReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FromReversed", value: callOutgoingToPSTN.FromReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.FromCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.FromCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.FromCountry", value: callOutgoingToPSTN.FromCountry);
//            }            
//        }
//        // == String type (callOutgoingToPSTN.To) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.To, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.To", value: callOutgoingToPSTN.To);
//            }
//        }
//        // == String type (callOutgoingToPSTN.ToReversed) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ToReversed, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ToReversed", value: callOutgoingToPSTN.ToReversed);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.ToCountry) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: callOutgoingToPSTN.ToCountry, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.ToCountry", value: callOutgoingToPSTN.ToCountry);
//            }            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Recording;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Recording");
//                        foreach(var err in Validate_UbluxSubDocument(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        // == [Ignoring] Value type (callOutgoingToPSTN.DisabledVideo) because it is not required. (nothing to validate) == 
//// == IList type (callOutgoingToPSTN.DigitsSent) ==
//{
//    if(callOutgoingToPSTN.DigitsSent is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.DigitsSent", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.DigitsSent.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.DigitsSent) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.DigitsSent[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.DigitsSent[{i}]", value: callOutgoingToPSTN.DigitsSent[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.IsInternational) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.ContainsInternationalCall) because it is not required. (nothing to validate) == 
//        // == Value type (callOutgoingToPSTN.CallResult) == 
//        {
//            int err1 = Validate_EnumType<CallResult>(value: callOutgoingToPSTN.CallResult, typeOfEnum: typeof(CallResult));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CallResult", value: callOutgoingToPSTN.CallResult);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis2;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis2");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//                // == Validate object ==
//                {
//                    var tmp = callOutgoingToPSTN.Analysis3;
//                    if(tmp is null)
//                    {
//                        // OK for it to be null it is nullable
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"Analysis3");
//                        foreach(var err in Validate_AiAnalysis(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//// == IList type (callOutgoingToPSTN.IdsParticipantLines) ==
//{
//    if(callOutgoingToPSTN.IdsParticipantLines is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsParticipantLines", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsParticipantLines.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsParticipantLines) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsParticipantLines[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsParticipantLines[{i}]", value: callOutgoingToPSTN.IdsParticipantLines[i]);
//            }
//        }
//        }
//    }
//}

//        // == [Ignoring] Value type (callOutgoingToPSTN.DurationInSeconds) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.ErrorMessage) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.ErrorMessage, isNullable: true, isRequired: false, minLength: 0, maxLength: 2000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ErrorMessage", value: callOutgoingToPSTN.ErrorMessage);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.AiTranscriptionStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiTranscriptionStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiTranscriptionStatus", value: callOutgoingToPSTN.AiTranscriptionStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == Value type (callOutgoingToPSTN.AiAnalysisStatus) == 
//        {
//            int err1 = Validate_EnumType<AiProcessStatus>(value: callOutgoingToPSTN.AiAnalysisStatus, typeOfEnum: typeof(AiProcessStatus));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.AiAnalysisStatus", value: callOutgoingToPSTN.AiAnalysisStatus);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//// == IList type (callOutgoingToPSTN.IdsTags) ==
//{
//    if(callOutgoingToPSTN.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < callOutgoingToPSTN.IdsTags.Count; i++)
//        {
//                    // == String type (callOutgoingToPSTN.IdsTags) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: callOutgoingToPSTN.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (callOutgoingToPSTN.IdAccount) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: callOutgoingToPSTN.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (callOutgoingToPSTN.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (callOutgoingToPSTN.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (callOutgoingToPSTN.Id) == 
//        {
//            var err = Validate_String(value: callOutgoingToPSTN.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: callOutgoingToPSTN.Id);
//            }
//        }
//        // == Value type (callOutgoingToPSTN.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: callOutgoingToPSTN.DateCreated);
//            }            
//        }
//        // == Value type (callOutgoingToPSTN.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: callOutgoingToPSTN.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: callOutgoingToPSTN.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_TrunkOrigination(TrunkOrigination trunkOrigination, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(trunkOrigination)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (trunkOrigination is TrunkOriginationForward trunkOriginationForward)
//{
//            // == Value type (trunkOriginationForward.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationForward.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationForward.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationForward.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationForward.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationForward.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationForward.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationForward.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationForward.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationForward.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationForward.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationForward.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationForward.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationForward.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationForward.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationForward.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationForward.Id);
//            }
//        }
//        // == Value type (trunkOriginationForward.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationForward.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationForward.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationForward.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationForward.DateUpdated);
//            }            
//        }

//}
//else if (trunkOrigination is TrunkOriginationRegister trunkOriginationRegister)
//{
//            // == String type (trunkOriginationRegister.Reg_username) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_username, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_username", value: trunkOriginationRegister.Reg_username);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_password) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_password, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_password", value: trunkOriginationRegister.Reg_password);
//            }
//        }
//        // == String type (trunkOriginationRegister.Reg_host) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Reg_host, isNullable: false, isRequired: true, minLength: 0, maxLength: 500);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Reg_host", value: trunkOriginationRegister.Reg_host);
//            }
//        }
//        // == Value type (trunkOriginationRegister.Reg_port) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Int32>(value: trunkOriginationRegister.Reg_port, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Reg_port", value: trunkOriginationRegister.Reg_port);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.TrunkOriginationType) == 
//        {
//            int err1 = Validate_EnumType<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, typeOfEnum: typeof(TrunkOriginationType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }
//            int err3 = Validate_ValueTypeRequired<TrunkOriginationType>(value: trunkOriginationRegister.TrunkOriginationType, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.TrunkOriginationType", value: trunkOriginationRegister.TrunkOriginationType);
//            }            
//        }
//        // == String type (trunkOriginationRegister.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: trunkOriginationRegister.IdVoipProvider);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbx) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbx, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbx", value: trunkOriginationRegister.IdCloudServicePbx);
//            }
//        }
//        // == String type (trunkOriginationRegister.IdCloudServicePbxFailover) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.IdCloudServicePbxFailover, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCloudServicePbxFailover", value: trunkOriginationRegister.IdCloudServicePbxFailover);
//            }
//        }
//        // == String type (trunkOriginationRegister.ProviderId) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: trunkOriginationRegister.ProviderId);
//            }
//        }
//        // == String type (trunkOriginationRegister.FriendlyName) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: trunkOriginationRegister.FriendlyName);
//            }
//        }
//        // == [Ignoring] Value type (trunkOriginationRegister.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (trunkOriginationRegister.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (trunkOriginationRegister.Id) == 
//        {
//            var err = Validate_String(value: trunkOriginationRegister.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: trunkOriginationRegister.Id);
//            }
//        }
//        // == Value type (trunkOriginationRegister.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: trunkOriginationRegister.DateCreated);
//            }            
//        }
//        // == Value type (trunkOriginationRegister.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: trunkOriginationRegister.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: trunkOriginationRegister.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }
//    private IEnumerable<ValidationError> Validate_VoipNumber(VoipNumber voipNumber, StringBuilder callStack)
//    {
//        if(ValidatedObjects.Add(voipNumber)==false)
//            // item has already been validate. This is to prevent a circular reference
//            yield break;

//if (voipNumber is VoipNumberAvailableForPurchase voipNumberAvailableForPurchase)
//{
//    // == IList type (voipNumberAvailableForPurchase.RulesPhone) ==
//{
//    if(voipNumberAvailableForPurchase.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesSms) ==
//{
//    if(voipNumberAvailableForPurchase.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberAvailableForPurchase.RulesFax) ==
//{
//    if(voipNumberAvailableForPurchase.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberAvailableForPurchase.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RequiresCustomerInfo) because it is not required. (nothing to validate) == 
//        // == Value type (voipNumberAvailableForPurchase.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberAvailableForPurchase.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberAvailableForPurchase.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberAvailableForPurchase.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberAvailableForPurchase.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberAvailableForPurchase.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberAvailableForPurchase.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberAvailableForPurchase.ProviderId);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberAvailableForPurchase.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Number) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberAvailableForPurchase.Number);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberAvailableForPurchase.FriendlyName);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.Description) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberAvailableForPurchase.Description);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberAvailableForPurchase.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberAvailableForPurchase.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberAvailableForPurchase.Language);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.City) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberAvailableForPurchase.City);
//            }
//        }
//        // == String type (voipNumberAvailableForPurchase.State) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberAvailableForPurchase.State);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberAvailableForPurchase.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberAvailableForPurchase.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberAvailableForPurchase.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberAvailableForPurchase.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberAvailableForPurchase.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberAvailableForPurchase.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberAvailableForPurchase.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberAvailableForPurchase.TimeZone);
//            }
//        }
//// == IList type (voipNumberAvailableForPurchase.IdsTags) ==
//{
//    if(voipNumberAvailableForPurchase.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberAvailableForPurchase.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberAvailableForPurchase.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberAvailableForPurchase.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberAvailableForPurchase.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberAvailableForPurchase.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberAvailableForPurchase.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberAvailableForPurchase.Id) == 
//        {
//            var err = Validate_String(value: voipNumberAvailableForPurchase.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberAvailableForPurchase.Id);
//            }
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberAvailableForPurchase.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberAvailableForPurchase.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberAvailableForPurchase.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberAvailableForPurchase.DateUpdated);
//            }            
//        }

//}
//else if (voipNumber is VoipNumberFax voipNumberFax)
//{
//    // == IList type (voipNumberFax.RulesPhone) ==
//{
//    if(voipNumberFax.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesSms) ==
//{
//    if(voipNumberFax.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberFax.RulesFax) ==
//{
//    if(voipNumberFax.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberFax.RulesFax.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesFax", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberFax.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberFax.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberFax.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberFax.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberFax.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberFax.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberFax.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberFax.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberFax.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberFax.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberFax.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberFax.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberFax.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberFax.ProviderId);
//            }
//        }
//        // == String type (voipNumberFax.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberFax.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberFax.Number) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberFax.Number);
//            }
//        }
//        // == String type (voipNumberFax.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberFax.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberFax.FriendlyName);
//            }
//        }
//        // == String type (voipNumberFax.Description) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberFax.Description);
//            }
//        }
//        // == Value type (voipNumberFax.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberFax.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberFax.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberFax.Language);
//            }            
//        }
//        // == String type (voipNumberFax.City) == 
//        {
//            var err = Validate_String(value: voipNumberFax.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberFax.City);
//            }
//        }
//        // == String type (voipNumberFax.State) == 
//        {
//            var err = Validate_String(value: voipNumberFax.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberFax.State);
//            }
//        }
//        // == Value type (voipNumberFax.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberFax.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberFax.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberFax.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberFax.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberFax.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberFax.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberFax.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberFax.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberFax.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberFax.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberFax.TimeZone);
//            }
//        }
//// == IList type (voipNumberFax.IdsTags) ==
//{
//    if(voipNumberFax.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberFax.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberFax.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberFax.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberFax.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberFax.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberFax.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberFax.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberFax.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberFax.Id) == 
//        {
//            var err = Validate_String(value: voipNumberFax.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberFax.Id);
//            }
//        }
//        // == Value type (voipNumberFax.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberFax.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberFax.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberFax.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberFax.DateUpdated);
//            }            
//        }

//}
//else if (voipNumber is VoipNumberPhone voipNumberPhone)
//{
//    // == IList type (voipNumberPhone.RulesPhone) ==
//{
//    if(voipNumberPhone.RulesPhone is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone", value: null); // Error because list cannot be null
//    }
//    else
//    {
//        if(voipNumberPhone.RulesPhone.Count == 0) yield return BuildErrorMessage(errorType: 4, callstack: $"{callStack}.RulesPhone", value: null); // Error because list is required meaning it should contain at least one item

//        for (int i = 0; i < voipNumberPhone.RulesPhone.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesPhone[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesPhone[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesPhone[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesSms) ==
//{
//    if(voipNumberPhone.RulesSms is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesSms.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesSms[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesSms[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesSms[{i}]");
//                        foreach(var err in Validate_RuleSms(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//// == IList type (voipNumberPhone.RulesFax) ==
//{
//    if(voipNumberPhone.RulesFax is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.RulesFax.Count; i++)
//        {
//                            // == Validate object ==
//                {
//                    var tmp = voipNumberPhone.RulesFax[i];
//                    if(tmp is null)
//                    {
//                        yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.RulesFax[{i}]", value: null);
//                    }
//                    else
//                    {
//                        var pos = callStack.Length;
//                        if (callStack.Length > 0) callStack.Append('.');
//                        callStack.Append($"RulesFax[{i}]");
//                        foreach(var err in Validate_Rule(tmp, callStack))
//                            yield return err;
//                        callStack.Length = pos;
//                    }
//                }

//        }
//    }
//}

//        // == Value type (voipNumberPhone.VoipNumberType) == 
//        {
//            int err1 = Validate_EnumType<VoipNumberType>(value: voipNumberPhone.VoipNumberType, typeOfEnum: typeof(VoipNumberType));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.VoipNumberType", value: voipNumberPhone.VoipNumberType);
//            }
//            // [Ignoring] to validate its value because it is not required and not nullable. (nothing to validate)            
//        }
//        // == String type (voipNumberPhone.IdCustomerInfo) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdCustomerInfo, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdCustomerInfo", value: voipNumberPhone.IdCustomerInfo);
//            }
//        }
//        // == String type (voipNumberPhone.IdTrunkOrigination) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdTrunkOrigination, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdTrunkOrigination", value: voipNumberPhone.IdTrunkOrigination);
//            }
//        }
//        // == String type (voipNumberPhone.IdVoipProvider) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdVoipProvider, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdVoipProvider", value: voipNumberPhone.IdVoipProvider);
//            }
//        }
//        // == String type (voipNumberPhone.ProviderId) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.ProviderId, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.ProviderId", value: voipNumberPhone.ProviderId);
//            }
//        }
//        // == String type (voipNumberPhone.IdMusicOnHoldGroup) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdMusicOnHoldGroup, isNullable: true, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdMusicOnHoldGroup", value: voipNumberPhone.IdMusicOnHoldGroup);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.InjectFriendlyNameToCallerId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.RecordIncomingCalls) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.UseAiForIncomingCalls) because it is not required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Number) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Number, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Number", value: voipNumberPhone.Number);
//            }
//        }
//        // == String type (voipNumberPhone.FriendlyName) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.FriendlyName, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.FriendlyName", value: voipNumberPhone.FriendlyName);
//            }
//        }
//        // == String type (voipNumberPhone.Description) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Description, isNullable: true, isRequired: false, minLength: 0, maxLength: 1000);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Description", value: voipNumberPhone.Description);
//            }
//        }
//        // == Value type (voipNumberPhone.Language) == 
//        {
//            int err1 = Validate_EnumType<Language>(value: voipNumberPhone.Language, typeOfEnum: typeof(Language));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }
//            int err3 = Validate_ValueTypeRequired<Language>(value: voipNumberPhone.Language, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.Language", value: voipNumberPhone.Language);
//            }            
//        }
//        // == String type (voipNumberPhone.City) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.City, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.City", value: voipNumberPhone.City);
//            }
//        }
//        // == String type (voipNumberPhone.State) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.State, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.State", value: voipNumberPhone.State);
//            }
//        }
//        // == Value type (voipNumberPhone.CountryIsoCode) == 
//        {
//            int err1 = Validate_EnumType<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, typeOfEnum: typeof(CountryIsoCode));
//            if (err1 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err1, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }
//            int err3 = Validate_ValueTypeRequired<CountryIsoCode>(value: voipNumberPhone.CountryIsoCode, isEnum: true);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.CountryIsoCode", value: voipNumberPhone.CountryIsoCode);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsSmsEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsSmsEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsSmsEnabled", value: voipNumberPhone.IsSmsEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsVoiceEnabled) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsVoiceEnabled, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsVoiceEnabled", value: voipNumberPhone.IsVoiceEnabled);
//            }            
//        }
//        // == Value type (voipNumberPhone.IsTollFree) == 
//        {

//            int err3 = Validate_ValueTypeRequired<Boolean>(value: voipNumberPhone.IsTollFree, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.IsTollFree", value: voipNumberPhone.IsTollFree);
//            }            
//        }
//        // == String type (voipNumberPhone.TimeZone) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.TimeZone, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.TimeZone", value: voipNumberPhone.TimeZone);
//            }
//        }
//// == IList type (voipNumberPhone.IdsTags) ==
//{
//    if(voipNumberPhone.IdsTags is null)
//    {
//                yield return BuildErrorMessage(errorType: 1, callstack: $"{callStack}.IdsTags", value: null); // Error because list cannot be null
//    }
//    else
//    {
        
//        for (int i = 0; i < voipNumberPhone.IdsTags.Count; i++)
//        {
//                    // == String type (voipNumberPhone.IdsTags) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdsTags[i], isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdsTags[{i}]", value: voipNumberPhone.IdsTags[i]);
//            }
//        }
//        }
//    }
//}

//        // == String type (voipNumberPhone.IdAccount) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.IdAccount, isNullable: false, isRequired: true, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.IdAccount", value: voipNumberPhone.IdAccount);
//            }
//        }
//        // == [Ignoring] Value type (voipNumberPhone.BuiltId) because it is not required. (nothing to validate) == 
//        // == [Ignoring] Value type (voipNumberPhone.DateDeleted) because it is nullable. If its nullable it cannot be required. (nothing to validate) == 
//        // == String type (voipNumberPhone.Id) == 
//        {
//            var err = Validate_String(value: voipNumberPhone.Id, isNullable: false, isRequired: false, minLength: 0, maxLength: 100);
//            if(err != 0)
//            {
//                yield return BuildErrorMessage(errorType: err, callstack: $"{callStack}.Id", value: voipNumberPhone.Id);
//            }
//        }
//        // == Value type (voipNumberPhone.DateCreated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateCreated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateCreated", value: voipNumberPhone.DateCreated);
//            }            
//        }
//        // == Value type (voipNumberPhone.DateUpdated) == 
//        {

//            int err3 = Validate_ValueTypeRequired<DateTime>(value: voipNumberPhone.DateUpdated, isEnum: false);
//            if (err3 != 0)
//            {
//                yield return BuildErrorMessage(errorType: err3, callstack: $"{callStack}.DateUpdated", value: voipNumberPhone.DateUpdated);
//            }            
//        }

//}
//else
//{
//    // This means we are validating an derived class that does not exist. 
//    // For example if a class has property of type Animal and we are validating a Dog that is not part of validation.
//    // Re-Generating this code should fix this problem if class Dog exists on the assembiles passed to this validator.
//    if (Debugger.IsAttached) Debugger.Break();
//    yield return new ValidationError() { ErrorMessage = "Internal Validation Error" };
//}

//        yield break;
//    }

//#endregion
//}
